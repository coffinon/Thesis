
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b88  08003b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b90  08003b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08003c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003c08  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  0002dabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ae9  00000000  00000000  00030e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bda0  00000000  00000000  00053909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c845a  00000000  00000000  0005f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022ec  00000000  00000000  00127b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800372c 	.word	0x0800372c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800372c 	.word	0x0800372c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_Init+0x40>)
 80005c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <HAL_Init+0x40>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x40>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f92b 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f002 fa9a 	bl	8002b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f943 	bl	80008a6 <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f000 f90b 	bl	8000852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000008 	.word	0x20000008
 8000654:	20000004 	.word	0x20000004
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	20000098 	.word	0x20000098

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000098 	.word	0x20000098

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <__NVIC_EnableIRQ+0x38>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff29 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff3e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d004      	beq.n	80008dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e00c      	b.n	80008f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2205      	movs	r2, #5
 80008e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0201 	bic.w	r2, r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e165      	b.n	8000bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000920:	2201      	movs	r2, #1
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	429a      	cmp	r2, r3
 800093a:	f040 8154 	bne.w	8000be6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d00b      	beq.n	800095e <HAL_GPIO_Init+0x5a>
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d007      	beq.n	800095e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000952:	2b11      	cmp	r3, #17
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d130      	bne.n	80009c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4013      	ands	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	68da      	ldr	r2, [r3, #12]
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000994:	2201      	movs	r2, #1
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	091b      	lsrs	r3, r3, #4
 80009aa:	f003 0201 	and.w	r2, r3, #1
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d003      	beq.n	8000a00 <HAL_GPIO_Init+0xfc>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b12      	cmp	r3, #18
 80009fe:	d123      	bne.n	8000a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	220f      	movs	r2, #15
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	691a      	ldr	r2, [r3, #16]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3208      	adds	r2, #8
 8000a42:	69b9      	ldr	r1, [r7, #24]
 8000a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0203 	and.w	r2, r3, #3
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80ae 	beq.w	8000be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <HAL_GPIO_Init+0x300>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a5c      	ldr	r2, [pc, #368]	; (8000c04 <HAL_GPIO_Init+0x300>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b5a      	ldr	r3, [pc, #360]	; (8000c04 <HAL_GPIO_Init+0x300>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aa6:	4a58      	ldr	r2, [pc, #352]	; (8000c08 <HAL_GPIO_Init+0x304>)
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	3302      	adds	r3, #2
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	220f      	movs	r2, #15
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4f      	ldr	r2, [pc, #316]	; (8000c0c <HAL_GPIO_Init+0x308>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d025      	beq.n	8000b1e <HAL_GPIO_Init+0x21a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4e      	ldr	r2, [pc, #312]	; (8000c10 <HAL_GPIO_Init+0x30c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d01f      	beq.n	8000b1a <HAL_GPIO_Init+0x216>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4d      	ldr	r2, [pc, #308]	; (8000c14 <HAL_GPIO_Init+0x310>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d019      	beq.n	8000b16 <HAL_GPIO_Init+0x212>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <HAL_GPIO_Init+0x314>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0x20e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <HAL_GPIO_Init+0x318>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d00d      	beq.n	8000b0e <HAL_GPIO_Init+0x20a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4a      	ldr	r2, [pc, #296]	; (8000c20 <HAL_GPIO_Init+0x31c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d007      	beq.n	8000b0a <HAL_GPIO_Init+0x206>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <HAL_GPIO_Init+0x320>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_GPIO_Init+0x202>
 8000b02:	2306      	movs	r3, #6
 8000b04:	e00c      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b06:	2307      	movs	r3, #7
 8000b08:	e00a      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	e008      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b0e:	2304      	movs	r3, #4
 8000b10:	e006      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e004      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e002      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <HAL_GPIO_Init+0x21c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	69fa      	ldr	r2, [r7, #28]
 8000b22:	f002 0203 	and.w	r2, r2, #3
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	4093      	lsls	r3, r2
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b30:	4935      	ldr	r1, [pc, #212]	; (8000c08 <HAL_GPIO_Init+0x304>)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b8c:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_GPIO_Init+0x324>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3301      	adds	r3, #1
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	f67f ae96 	bls.w	8000920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40021400 	.word	0x40021400
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40013c00 	.word	0x40013c00

08000c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c48:	e003      	b.n	8000c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_PWREx_EnableOverDrive+0x94>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c8c:	f7ff fcfa 	bl	8000684 <HAL_GetTick>
 8000c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c92:	e009      	b.n	8000ca8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c94:	f7ff fcf6 	bl	8000684 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca2:	d901      	bls.n	8000ca8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e01f      	b.n	8000ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d1ee      	bne.n	8000c94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cbc:	f7ff fce2 	bl	8000684 <HAL_GetTick>
 8000cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cc2:	e009      	b.n	8000cd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcde 	bl	8000684 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cd2:	d901      	bls.n	8000cd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e007      	b.n	8000ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ce4:	d1ee      	bne.n	8000cc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	420e0040 	.word	0x420e0040
 8000cf8:	40007000 	.word	0x40007000
 8000cfc:	420e0044 	.word	0x420e0044

08000d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e0cc      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d90c      	bls.n	8000d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d22:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d2a:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d001      	beq.n	8000d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e0b8      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d020      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d54:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a58      	ldr	r2, [pc, #352]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	494d      	ldr	r1, [pc, #308]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d044      	beq.n	8000e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d107      	bne.n	8000dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d119      	bne.n	8000dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e07f      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d003      	beq.n	8000dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d107      	bne.n	8000dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d109      	bne.n	8000dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e06f      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e067      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f023 0203 	bic.w	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4934      	ldr	r1, [pc, #208]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000df0:	f7ff fc48 	bl	8000684 <HAL_GetTick>
 8000df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df6:	e00a      	b.n	8000e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df8:	f7ff fc44 	bl	8000684 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e04f      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 020c 	and.w	r2, r3, #12
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d1eb      	bne.n	8000df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d20c      	bcs.n	8000e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e032      	b.n	8000eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4916      	ldr	r1, [pc, #88]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	490e      	ldr	r1, [pc, #56]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e86:	f000 f855 	bl	8000f34 <HAL_RCC_GetSysClockFreq>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_RCC_ClockConfig+0x1bc>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	490a      	ldr	r1, [pc, #40]	; (8000ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e98:	5ccb      	ldrb	r3, [r1, r3]
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fba8 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	08003b3c 	.word	0x08003b3c
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ee8:	f7ff fff0 	bl	8000ecc <HAL_RCC_GetHCLKFreq>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	0a9b      	lsrs	r3, r3, #10
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	4903      	ldr	r1, [pc, #12]	; (8000f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	08003b4c 	.word	0x08003b4c

08000f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f10:	f7ff ffdc 	bl	8000ecc <HAL_RCC_GetHCLKFreq>
 8000f14:	4602      	mov	r2, r0
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	0b5b      	lsrs	r3, r3, #13
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	4903      	ldr	r1, [pc, #12]	; (8000f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f22:	5ccb      	ldrb	r3, [r1, r3]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	08003b4c 	.word	0x08003b4c

08000f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f38:	b088      	sub	sp, #32
 8000f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f50:	4bce      	ldr	r3, [pc, #824]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b0c      	cmp	r3, #12
 8000f5a:	f200 818d 	bhi.w	8001278 <HAL_RCC_GetSysClockFreq+0x344>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <HAL_RCC_GetSysClockFreq+0x30>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f99 	.word	0x08000f99
 8000f68:	08001279 	.word	0x08001279
 8000f6c:	08001279 	.word	0x08001279
 8000f70:	08001279 	.word	0x08001279
 8000f74:	08000f9f 	.word	0x08000f9f
 8000f78:	08001279 	.word	0x08001279
 8000f7c:	08001279 	.word	0x08001279
 8000f80:	08001279 	.word	0x08001279
 8000f84:	08000fa5 	.word	0x08000fa5
 8000f88:	08001279 	.word	0x08001279
 8000f8c:	08001279 	.word	0x08001279
 8000f90:	08001279 	.word	0x08001279
 8000f94:	08001119 	.word	0x08001119
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f98:	4bbd      	ldr	r3, [pc, #756]	; (8001290 <HAL_RCC_GetSysClockFreq+0x35c>)
 8000f9a:	61bb      	str	r3, [r7, #24]
       break;
 8000f9c:	e16f      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f9e:	4bbd      	ldr	r3, [pc, #756]	; (8001294 <HAL_RCC_GetSysClockFreq+0x360>)
 8000fa0:	61bb      	str	r3, [r7, #24]
      break;
 8000fa2:	e16c      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fa4:	4bb9      	ldr	r3, [pc, #740]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fae:	4bb7      	ldr	r3, [pc, #732]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d053      	beq.n	8001062 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fba:	4bb4      	ldr	r3, [pc, #720]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	099b      	lsrs	r3, r3, #6
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000fca:	f04f 0100 	mov.w	r1, #0
 8000fce:	ea02 0400 	and.w	r4, r2, r0
 8000fd2:	603c      	str	r4, [r7, #0]
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	014b      	lsls	r3, r1, #5
 8000fea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fee:	0142      	lsls	r2, r0, #5
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	1ac0      	subs	r0, r0, r3
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	eb61 0103 	sbc.w	r1, r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	018b      	lsls	r3, r1, #6
 8001008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800100c:	0182      	lsls	r2, r0, #6
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	eb63 0301 	sbc.w	r3, r3, r1
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	f04f 0100 	mov.w	r1, #0
 800101c:	00d9      	lsls	r1, r3, #3
 800101e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001022:	00d0      	lsls	r0, r2, #3
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4621      	mov	r1, r4
 800102a:	1852      	adds	r2, r2, r1
 800102c:	4629      	mov	r1, r5
 800102e:	eb43 0101 	adc.w	r1, r3, r1
 8001032:	460b      	mov	r3, r1
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	0259      	lsls	r1, r3, #9
 800103e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001042:	0250      	lsls	r0, r2, #9
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	461a      	mov	r2, r3
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	f7ff f934 	bl	80002c0 <__aeabi_uldivmod>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4613      	mov	r3, r2
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e04c      	b.n	80010fc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001062:	4b8a      	ldr	r3, [pc, #552]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	099b      	lsrs	r3, r3, #6
 8001068:	461a      	mov	r2, r3
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001072:	f04f 0100 	mov.w	r1, #0
 8001076:	ea02 0a00 	and.w	sl, r2, r0
 800107a:	ea03 0b01 	and.w	fp, r3, r1
 800107e:	4650      	mov	r0, sl
 8001080:	4659      	mov	r1, fp
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	014b      	lsls	r3, r1, #5
 800108c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001090:	0142      	lsls	r2, r0, #5
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	ebb0 000a 	subs.w	r0, r0, sl
 800109a:	eb61 010b 	sbc.w	r1, r1, fp
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	018b      	lsls	r3, r1, #6
 80010a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80010ac:	0182      	lsls	r2, r0, #6
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	eb63 0301 	sbc.w	r3, r3, r1
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	f04f 0100 	mov.w	r1, #0
 80010bc:	00d9      	lsls	r1, r3, #3
 80010be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80010c2:	00d0      	lsls	r0, r2, #3
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	eb12 020a 	adds.w	r2, r2, sl
 80010cc:	eb43 030b 	adc.w	r3, r3, fp
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	f04f 0100 	mov.w	r1, #0
 80010d8:	0299      	lsls	r1, r3, #10
 80010da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80010de:	0290      	lsls	r0, r2, #10
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	f7ff f8e6 	bl	80002c0 <__aeabi_uldivmod>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4613      	mov	r3, r2
 80010fa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	3301      	adds	r3, #1
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	61bb      	str	r3, [r7, #24]
      break;
 8001116:	e0b2      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001120:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001122:	4b5a      	ldr	r3, [pc, #360]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d04d      	beq.n	80011ca <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	461a      	mov	r2, r3
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800113e:	f04f 0100 	mov.w	r1, #0
 8001142:	ea02 0800 	and.w	r8, r2, r0
 8001146:	ea03 0901 	and.w	r9, r3, r1
 800114a:	4640      	mov	r0, r8
 800114c:	4649      	mov	r1, r9
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	014b      	lsls	r3, r1, #5
 8001158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800115c:	0142      	lsls	r2, r0, #5
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	ebb0 0008 	subs.w	r0, r0, r8
 8001166:	eb61 0109 	sbc.w	r1, r1, r9
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	018b      	lsls	r3, r1, #6
 8001174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001178:	0182      	lsls	r2, r0, #6
 800117a:	1a12      	subs	r2, r2, r0
 800117c:	eb63 0301 	sbc.w	r3, r3, r1
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	f04f 0100 	mov.w	r1, #0
 8001188:	00d9      	lsls	r1, r3, #3
 800118a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800118e:	00d0      	lsls	r0, r2, #3
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	eb12 0208 	adds.w	r2, r2, r8
 8001198:	eb43 0309 	adc.w	r3, r3, r9
 800119c:	f04f 0000 	mov.w	r0, #0
 80011a0:	f04f 0100 	mov.w	r1, #0
 80011a4:	0259      	lsls	r1, r3, #9
 80011a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80011aa:	0250      	lsls	r0, r2, #9
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f7ff f880 	bl	80002c0 <__aeabi_uldivmod>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4613      	mov	r3, r2
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	e04a      	b.n	8001260 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	099b      	lsrs	r3, r3, #6
 80011d0:	461a      	mov	r2, r3
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80011da:	f04f 0100 	mov.w	r1, #0
 80011de:	ea02 0400 	and.w	r4, r2, r0
 80011e2:	ea03 0501 	and.w	r5, r3, r1
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	014b      	lsls	r3, r1, #5
 80011f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011f8:	0142      	lsls	r2, r0, #5
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	1b00      	subs	r0, r0, r4
 8001200:	eb61 0105 	sbc.w	r1, r1, r5
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	018b      	lsls	r3, r1, #6
 800120e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001212:	0182      	lsls	r2, r0, #6
 8001214:	1a12      	subs	r2, r2, r0
 8001216:	eb63 0301 	sbc.w	r3, r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	f04f 0100 	mov.w	r1, #0
 8001222:	00d9      	lsls	r1, r3, #3
 8001224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001228:	00d0      	lsls	r0, r2, #3
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	1912      	adds	r2, r2, r4
 8001230:	eb45 0303 	adc.w	r3, r5, r3
 8001234:	f04f 0000 	mov.w	r0, #0
 8001238:	f04f 0100 	mov.w	r1, #0
 800123c:	0299      	lsls	r1, r3, #10
 800123e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001242:	0290      	lsls	r0, r2, #10
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	461a      	mov	r2, r3
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f7ff f834 	bl	80002c0 <__aeabi_uldivmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4613      	mov	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_RCC_GetSysClockFreq+0x358>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	0f1b      	lsrs	r3, r3, #28
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	61bb      	str	r3, [r7, #24]
      break;
 8001276:	e002      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_RCC_GetSysClockFreq+0x35c>)
 800127a:	61bb      	str	r3, [r7, #24]
      break;
 800127c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800127e:	69bb      	ldr	r3, [r7, #24]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	00f42400 	.word	0x00f42400
 8001294:	007a1200 	.word	0x007a1200

08001298 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8083 	beq.w	80013b8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012ca:	4b8f      	ldr	r3, [pc, #572]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d6:	d00c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d8:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d112      	bne.n	800130a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e4:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012f0:	d10b      	bne.n	800130a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d05b      	beq.n	80013b6 <HAL_RCC_OscConfig+0x11e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d157      	bne.n	80013b6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e216      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x8a>
 8001314:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a7b      	ldr	r2, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e01d      	b.n	800135e <HAL_RCC_OscConfig+0xc6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0xae>
 800132c:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0xc6>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d013      	beq.n	800138e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f98d 	bl	8000684 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff f989 	bl	8000684 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1db      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0xd6>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff f979 	bl	8000684 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff f975 	bl	8000684 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1c7      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0xfe>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d06f      	beq.n	80014a4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d017      	beq.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013d0:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d11c      	bne.n	800142e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f4:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d116      	bne.n	800142e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x180>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e18f      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4938      	ldr	r1, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142c:	e03a      	b.n	80014a4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d020      	beq.n	8001478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001436:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_RCC_OscConfig+0x274>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff f922 	bl	8000684 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff f91e 	bl	8000684 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e170      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
 8001476:	e015      	b.n	80014a4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x274>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff f901 	bl	8000684 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff f8fd 	bl	8000684 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e14f      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d037      	beq.n	8001520 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d016      	beq.n	80014e6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x278>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff f8e1 	bl	8000684 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff f8dd 	bl	8000684 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e12f      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x22e>
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_RCC_OscConfig+0x278>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff f8ca 	bl	8000684 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	e00f      	b.n	8001514 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff f8c6 	bl	8000684 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d908      	bls.n	8001514 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e118      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b8a      	ldr	r3, [pc, #552]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e9      	bne.n	80014f4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b83      	ldr	r3, [pc, #524]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7e      	ldr	r2, [pc, #504]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b79      	ldr	r3, [pc, #484]	; (8001744 <HAL_RCC_OscConfig+0x4ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a75      	ldr	r2, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4ac>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff f885 	bl	8000684 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff f881 	bl	8000684 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0d3      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_RCC_OscConfig+0x4ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x31a>
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x354>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x33c>
 80015ba:	4b61      	ldr	r3, [pc, #388]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a60      	ldr	r2, [pc, #384]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5d      	ldr	r2, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x354>
 80015d4:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a56      	ldr	r2, [pc, #344]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff f846 	bl	8000684 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff f842 	bl	8000684 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e092      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x364>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f830 	bl	8000684 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff f82c 	bl	8000684 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e07c      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d068      	beq.n	8001736 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d060      	beq.n	8001732 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d145      	bne.n	8001704 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_OscConfig+0x4b0>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff f801 	bl	8000684 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7fe fffd 	bl	8000684 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e04f      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	019b      	lsls	r3, r3, #6
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	3b01      	subs	r3, #1
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	071b      	lsls	r3, r3, #28
 80016d0:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_OscConfig+0x4b0>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7fe ffd2 	bl	8000684 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7fe ffce 	bl	8000684 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e020      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44c>
 8001702:	e018      	b.n	8001736 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x4b0>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7fe ffbb 	bl	8000684 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001712:	f7fe ffb7 	bl	8000684 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e009      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x4a8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x47a>
 8001730:	e001      	b.n	8001736 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060

0800174c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e03f      	b.n	80017de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 faa2 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800178e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb97 	bl	8001ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b088      	sub	sp, #32
 80017ea:	af02      	add	r7, sp, #8
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b20      	cmp	r3, #32
 8001804:	f040 8083 	bne.w	800190e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_UART_Transmit+0x2e>
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e07b      	b.n	8001910 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_UART_Transmit+0x40>
 8001822:	2302      	movs	r3, #2
 8001824:	e074      	b.n	8001910 <HAL_UART_Transmit+0x12a>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2221      	movs	r2, #33	; 0x21
 8001838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800183c:	f7fe ff22 	bl	8000684 <HAL_GetTick>
 8001840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	88fa      	ldrh	r2, [r7, #6]
 800184c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001856:	e042      	b.n	80018de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186e:	d122      	bne.n	80018b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2200      	movs	r2, #0
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f9b6 	bl	8001bec <UART_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e042      	b.n	8001910 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800189c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3302      	adds	r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	e017      	b.n	80018de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	e013      	b.n	80018de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f993 	bl	8001bec <UART_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e01f      	b.n	8001910 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1b7      	bne.n	8001858 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2200      	movs	r2, #0
 80018f0:	2140      	movs	r1, #64	; 0x40
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f97a 	bl	8001bec <UART_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e006      	b.n	8001910 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
  }
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d140      	bne.n	80019b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_UART_Receive_IT+0x26>
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e039      	b.n	80019b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_UART_Receive_IT+0x38>
 800194c:	2302      	movs	r3, #2
 800194e:	e032      	b.n	80019b6 <HAL_UART_Receive_IT+0x9e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	88fa      	ldrh	r2, [r7, #6]
 8001968:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2222      	movs	r2, #34	; 0x22
 8001974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10d      	bne.n	8001a16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_UART_IRQHandler+0x52>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f9d6 	bl	8001dc0 <UART_Receive_IT>
      return;
 8001a14:	e0d0      	b.n	8001bb8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80b0 	beq.w	8001b7e <HAL_UART_IRQHandler+0x1ba>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_UART_IRQHandler+0x70>
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80a5 	beq.w	8001b7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_UART_IRQHandler+0x90>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_UART_IRQHandler+0xb0>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	f043 0202 	orr.w	r2, r3, #2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_UART_IRQHandler+0xd0>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00f      	beq.n	8001abe <HAL_UART_IRQHandler+0xfa>
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <HAL_UART_IRQHandler+0xee>
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab6:	f043 0208 	orr.w	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d077      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_UART_IRQHandler+0x11c>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f970 	bl	8001dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aea:	2b40      	cmp	r3, #64	; 0x40
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_UART_IRQHandler+0x144>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d031      	beq.n	8001b6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8b9 	bl	8001c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	2b40      	cmp	r3, #64	; 0x40
 8001b1a:	d123      	bne.n	8001b64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <HAL_UART_IRQHandler+0x1fc>)
 8001b3a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe febc 	bl	80008be <HAL_DMA_Abort_IT>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d016      	beq.n	8001b7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b56:	4610      	mov	r0, r2
 8001b58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5a:	e00e      	b.n	8001b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f83b 	bl	8001bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b62:	e00a      	b.n	8001b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f837 	bl	8001bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b6a:	e006      	b.n	8001b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f833 	bl	8001bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001b78:	e01d      	b.n	8001bb6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b7a:	bf00      	nop
    return;
 8001b7c:	e01b      	b.n	8001bb6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_UART_IRQHandler+0x1d6>
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8a6 	bl	8001ce4 <UART_Transmit_IT>
    return;
 8001b98:	e00e      	b.n	8001bb8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x1f4>
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8ee 	bl	8001d90 <UART_EndTransmit_IT>
    return;
 8001bb4:	e000      	b.n	8001bb8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001bb6:	bf00      	nop
  }
}
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08001cbd 	.word	0x08001cbd

08001bc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bfc:	e02c      	b.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d028      	beq.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8001c0c:	f7fe fd3a 	bl	8000684 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d21d      	bcs.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e00f      	b.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d0c3      	beq.n	8001bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff ff7e 	bl	8001bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b21      	cmp	r3, #33	; 0x21
 8001cf6:	d144      	bne.n	8001d82 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d11a      	bne.n	8001d38 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d16:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	1c9a      	adds	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	e00e      	b.n	8001d4a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	621a      	str	r2, [r3, #32]
 8001d36:	e008      	b.n	8001d4a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	1c59      	adds	r1, r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6211      	str	r1, [r2, #32]
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4619      	mov	r1, r3
 8001d58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff07 	bl	8001bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b22      	cmp	r3, #34	; 0x22
 8001dd2:	d171      	bne.n	8001eb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	d123      	bne.n	8001e26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10e      	bne.n	8001e0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	1c9a      	adds	r2, r3, #2
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
 8001e08:	e029      	b.n	8001e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
 8001e24:	e01b      	b.n	8001e5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6858      	ldr	r0, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6291      	str	r1, [r2, #40]	; 0x28
 8001e3e:	b2c2      	uxtb	r2, r0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e00c      	b.n	8001e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	6288      	str	r0, [r1, #40]	; 0x28
 8001e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d120      	bne.n	8001eb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0220 	bic.w	r2, r2, #32
 8001e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 ff56 	bl	8002d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e002      	b.n	8001eba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec8:	b0bd      	sub	sp, #244	; 0xf4
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee0:	68d9      	ldr	r1, [r3, #12]
 8001ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	ea40 0301 	orr.w	r3, r0, r1
 8001eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8001f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f1c:	f021 010c 	bic.w	r1, r1, #12
 8001f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f3e:	6999      	ldr	r1, [r3, #24]
 8001f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	ea40 0301 	orr.w	r3, r0, r1
 8001f4a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f56:	f040 81a5 	bne.w	80022a4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4bcd      	ldr	r3, [pc, #820]	; (8002298 <UART_SetConfig+0x3d4>)
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d006      	beq.n	8001f74 <UART_SetConfig+0xb0>
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4bcb      	ldr	r3, [pc, #812]	; (800229c <UART_SetConfig+0x3d8>)
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	f040 80cb 	bne.w	800210a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f74:	f7fe ffca 	bl	8000f0c <HAL_RCC_GetPCLK2Freq>
 8001f78:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f80:	461c      	mov	r4, r3
 8001f82:	f04f 0500 	mov.w	r5, #0
 8001f86:	4622      	mov	r2, r4
 8001f88:	462b      	mov	r3, r5
 8001f8a:	1891      	adds	r1, r2, r2
 8001f8c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001f90:	415b      	adcs	r3, r3
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f9a:	1912      	adds	r2, r2, r4
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	f04f 0000 	mov.w	r0, #0
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	00d9      	lsls	r1, r3, #3
 8001faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fae:	00d0      	lsls	r0, r2, #3
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	1911      	adds	r1, r2, r4
 8001fb6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001fba:	416b      	adcs	r3, r5
 8001fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	1891      	adds	r1, r2, r2
 8001fce:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001fd2:	415b      	adcs	r3, r3
 8001fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fd8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001fdc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001fe0:	f7fe f96e 	bl	80002c0 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4bad      	ldr	r3, [pc, #692]	; (80022a0 <UART_SetConfig+0x3dc>)
 8001fea:	fba3 2302 	umull	r2, r3, r3, r2
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	011e      	lsls	r6, r3, #4
 8001ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	f04f 0500 	mov.w	r5, #0
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	462b      	mov	r3, r5
 8002000:	1891      	adds	r1, r2, r2
 8002002:	67b9      	str	r1, [r7, #120]	; 0x78
 8002004:	415b      	adcs	r3, r3
 8002006:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002008:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800200c:	1912      	adds	r2, r2, r4
 800200e:	eb45 0303 	adc.w	r3, r5, r3
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	00d9      	lsls	r1, r3, #3
 800201c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002020:	00d0      	lsls	r0, r2, #3
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	1911      	adds	r1, r2, r4
 8002028:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800202c:	416b      	adcs	r3, r5
 800202e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	461a      	mov	r2, r3
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	1891      	adds	r1, r2, r2
 8002040:	6739      	str	r1, [r7, #112]	; 0x70
 8002042:	415b      	adcs	r3, r3
 8002044:	677b      	str	r3, [r7, #116]	; 0x74
 8002046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800204a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800204e:	f7fe f937 	bl	80002c0 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <UART_SetConfig+0x3dc>)
 8002058:	fba3 1302 	umull	r1, r3, r3, r2
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	2164      	movs	r1, #100	; 0x64
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	3332      	adds	r3, #50	; 0x32
 800206a:	4a8d      	ldr	r2, [pc, #564]	; (80022a0 <UART_SetConfig+0x3dc>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002078:	441e      	add	r6, r3
 800207a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800207e:	4618      	mov	r0, r3
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	1894      	adds	r4, r2, r2
 800208a:	66bc      	str	r4, [r7, #104]	; 0x68
 800208c:	415b      	adcs	r3, r3
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002090:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002094:	1812      	adds	r2, r2, r0
 8002096:	eb41 0303 	adc.w	r3, r1, r3
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	f04f 0500 	mov.w	r5, #0
 80020a2:	00dd      	lsls	r5, r3, #3
 80020a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020a8:	00d4      	lsls	r4, r2, #3
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	1814      	adds	r4, r2, r0
 80020b0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80020b4:	414b      	adcs	r3, r1
 80020b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	461a      	mov	r2, r3
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	1891      	adds	r1, r2, r2
 80020c8:	6639      	str	r1, [r7, #96]	; 0x60
 80020ca:	415b      	adcs	r3, r3
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
 80020ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020d6:	f7fe f8f3 	bl	80002c0 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4b70      	ldr	r3, [pc, #448]	; (80022a0 <UART_SetConfig+0x3dc>)
 80020e0:	fba3 1302 	umull	r1, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	2164      	movs	r1, #100	; 0x64
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	3332      	adds	r3, #50	; 0x32
 80020f2:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <UART_SetConfig+0x3dc>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	f003 0207 	and.w	r2, r3, #7
 80020fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4432      	add	r2, r6
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e26d      	b.n	80025e6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800210a:	f7fe feeb 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
 800210e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002116:	461c      	mov	r4, r3
 8002118:	f04f 0500 	mov.w	r5, #0
 800211c:	4622      	mov	r2, r4
 800211e:	462b      	mov	r3, r5
 8002120:	1891      	adds	r1, r2, r2
 8002122:	65b9      	str	r1, [r7, #88]	; 0x58
 8002124:	415b      	adcs	r3, r3
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002128:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800212c:	1912      	adds	r2, r2, r4
 800212e:	eb45 0303 	adc.w	r3, r5, r3
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	00d9      	lsls	r1, r3, #3
 800213c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002140:	00d0      	lsls	r0, r2, #3
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	1911      	adds	r1, r2, r4
 8002148:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800214c:	416b      	adcs	r3, r5
 800214e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	461a      	mov	r2, r3
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	1891      	adds	r1, r2, r2
 8002160:	6539      	str	r1, [r7, #80]	; 0x50
 8002162:	415b      	adcs	r3, r3
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
 8002166:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800216a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800216e:	f7fe f8a7 	bl	80002c0 <__aeabi_uldivmod>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <UART_SetConfig+0x3dc>)
 8002178:	fba3 2302 	umull	r2, r3, r3, r2
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	011e      	lsls	r6, r3, #4
 8002180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002184:	461c      	mov	r4, r3
 8002186:	f04f 0500 	mov.w	r5, #0
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	1891      	adds	r1, r2, r2
 8002190:	64b9      	str	r1, [r7, #72]	; 0x48
 8002192:	415b      	adcs	r3, r3
 8002194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002196:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219a:	1912      	adds	r2, r2, r4
 800219c:	eb45 0303 	adc.w	r3, r5, r3
 80021a0:	f04f 0000 	mov.w	r0, #0
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	00d9      	lsls	r1, r3, #3
 80021aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ae:	00d0      	lsls	r0, r2, #3
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	1911      	adds	r1, r2, r4
 80021b6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80021ba:	416b      	adcs	r3, r5
 80021bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80021c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	6439      	str	r1, [r7, #64]	; 0x40
 80021d0:	415b      	adcs	r3, r3
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
 80021d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80021dc:	f7fe f870 	bl	80002c0 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <UART_SetConfig+0x3dc>)
 80021e6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2164      	movs	r1, #100	; 0x64
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	3332      	adds	r3, #50	; 0x32
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <UART_SetConfig+0x3dc>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002206:	441e      	add	r6, r3
 8002208:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800220c:	4618      	mov	r0, r3
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	1894      	adds	r4, r2, r2
 8002218:	63bc      	str	r4, [r7, #56]	; 0x38
 800221a:	415b      	adcs	r3, r3
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002222:	1812      	adds	r2, r2, r0
 8002224:	eb41 0303 	adc.w	r3, r1, r3
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	f04f 0500 	mov.w	r5, #0
 8002230:	00dd      	lsls	r5, r3, #3
 8002232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002236:	00d4      	lsls	r4, r2, #3
 8002238:	4622      	mov	r2, r4
 800223a:	462b      	mov	r3, r5
 800223c:	1814      	adds	r4, r2, r0
 800223e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002242:	414b      	adcs	r3, r1
 8002244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	461a      	mov	r2, r3
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	1891      	adds	r1, r2, r2
 8002256:	6339      	str	r1, [r7, #48]	; 0x30
 8002258:	415b      	adcs	r3, r3
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
 800225c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002260:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002264:	f7fe f82c 	bl	80002c0 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <UART_SetConfig+0x3dc>)
 800226e:	fba3 1302 	umull	r1, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2164      	movs	r1, #100	; 0x64
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	3332      	adds	r3, #50	; 0x32
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <UART_SetConfig+0x3dc>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	f003 0207 	and.w	r2, r3, #7
 800228c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4432      	add	r2, r6
 8002294:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002296:	e1a6      	b.n	80025e6 <UART_SetConfig+0x722>
 8002298:	40011000 	.word	0x40011000
 800229c:	40011400 	.word	0x40011400
 80022a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4bd1      	ldr	r3, [pc, #836]	; (80025f0 <UART_SetConfig+0x72c>)
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d006      	beq.n	80022be <UART_SetConfig+0x3fa>
 80022b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4bcf      	ldr	r3, [pc, #828]	; (80025f4 <UART_SetConfig+0x730>)
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 80ca 	bne.w	8002452 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022be:	f7fe fe25 	bl	8000f0c <HAL_RCC_GetPCLK2Freq>
 80022c2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022ca:	461c      	mov	r4, r3
 80022cc:	f04f 0500 	mov.w	r5, #0
 80022d0:	4622      	mov	r2, r4
 80022d2:	462b      	mov	r3, r5
 80022d4:	1891      	adds	r1, r2, r2
 80022d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80022d8:	415b      	adcs	r3, r3
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e0:	1912      	adds	r2, r2, r4
 80022e2:	eb45 0303 	adc.w	r3, r5, r3
 80022e6:	f04f 0000 	mov.w	r0, #0
 80022ea:	f04f 0100 	mov.w	r1, #0
 80022ee:	00d9      	lsls	r1, r3, #3
 80022f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f4:	00d0      	lsls	r0, r2, #3
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	eb12 0a04 	adds.w	sl, r2, r4
 80022fe:	eb43 0b05 	adc.w	fp, r3, r5
 8002302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	008b      	lsls	r3, r1, #2
 8002318:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800231c:	0082      	lsls	r2, r0, #2
 800231e:	4650      	mov	r0, sl
 8002320:	4659      	mov	r1, fp
 8002322:	f7fd ffcd 	bl	80002c0 <__aeabi_uldivmod>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4bb3      	ldr	r3, [pc, #716]	; (80025f8 <UART_SetConfig+0x734>)
 800232c:	fba3 2302 	umull	r2, r3, r3, r2
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	011e      	lsls	r6, r3, #4
 8002334:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002338:	4618      	mov	r0, r3
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	1894      	adds	r4, r2, r2
 8002344:	623c      	str	r4, [r7, #32]
 8002346:	415b      	adcs	r3, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234e:	1812      	adds	r2, r2, r0
 8002350:	eb41 0303 	adc.w	r3, r1, r3
 8002354:	f04f 0400 	mov.w	r4, #0
 8002358:	f04f 0500 	mov.w	r5, #0
 800235c:	00dd      	lsls	r5, r3, #3
 800235e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002362:	00d4      	lsls	r4, r2, #3
 8002364:	4622      	mov	r2, r4
 8002366:	462b      	mov	r3, r5
 8002368:	1814      	adds	r4, r2, r0
 800236a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800236e:	414b      	adcs	r3, r1
 8002370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	008b      	lsls	r3, r1, #2
 800238a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800238e:	0082      	lsls	r2, r0, #2
 8002390:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002394:	f7fd ff94 	bl	80002c0 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4b96      	ldr	r3, [pc, #600]	; (80025f8 <UART_SetConfig+0x734>)
 800239e:	fba3 1302 	umull	r1, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2164      	movs	r1, #100	; 0x64
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	4a91      	ldr	r2, [pc, #580]	; (80025f8 <UART_SetConfig+0x734>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023bc:	441e      	add	r6, r3
 80023be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	1894      	adds	r4, r2, r2
 80023ce:	61bc      	str	r4, [r7, #24]
 80023d0:	415b      	adcs	r3, r3
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	1812      	adds	r2, r2, r0
 80023da:	eb41 0303 	adc.w	r3, r1, r3
 80023de:	f04f 0400 	mov.w	r4, #0
 80023e2:	f04f 0500 	mov.w	r5, #0
 80023e6:	00dd      	lsls	r5, r3, #3
 80023e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ec:	00d4      	lsls	r4, r2, #3
 80023ee:	4622      	mov	r2, r4
 80023f0:	462b      	mov	r3, r5
 80023f2:	1814      	adds	r4, r2, r0
 80023f4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80023f8:	414b      	adcs	r3, r1
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	008b      	lsls	r3, r1, #2
 8002414:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002418:	0082      	lsls	r2, r0, #2
 800241a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800241e:	f7fd ff4f 	bl	80002c0 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <UART_SetConfig+0x734>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2164      	movs	r1, #100	; 0x64
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	4a6f      	ldr	r2, [pc, #444]	; (80025f8 <UART_SetConfig+0x734>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4432      	add	r2, r6
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e0c9      	b.n	80025e6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002452:	f7fe fd47 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
 8002456:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800245a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800245e:	461c      	mov	r4, r3
 8002460:	f04f 0500 	mov.w	r5, #0
 8002464:	4622      	mov	r2, r4
 8002466:	462b      	mov	r3, r5
 8002468:	1891      	adds	r1, r2, r2
 800246a:	6139      	str	r1, [r7, #16]
 800246c:	415b      	adcs	r3, r3
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002474:	1912      	adds	r2, r2, r4
 8002476:	eb45 0303 	adc.w	r3, r5, r3
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	00d9      	lsls	r1, r3, #3
 8002484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002488:	00d0      	lsls	r0, r2, #3
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	eb12 0804 	adds.w	r8, r2, r4
 8002492:	eb43 0905 	adc.w	r9, r3, r5
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	008b      	lsls	r3, r1, #2
 80024ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024b0:	0082      	lsls	r2, r0, #2
 80024b2:	4640      	mov	r0, r8
 80024b4:	4649      	mov	r1, r9
 80024b6:	f7fd ff03 	bl	80002c0 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <UART_SetConfig+0x734>)
 80024c0:	fba3 2302 	umull	r2, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	011e      	lsls	r6, r3, #4
 80024c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024cc:	4618      	mov	r0, r3
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	1894      	adds	r4, r2, r2
 80024d8:	60bc      	str	r4, [r7, #8]
 80024da:	415b      	adcs	r3, r3
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e2:	1812      	adds	r2, r2, r0
 80024e4:	eb41 0303 	adc.w	r3, r1, r3
 80024e8:	f04f 0400 	mov.w	r4, #0
 80024ec:	f04f 0500 	mov.w	r5, #0
 80024f0:	00dd      	lsls	r5, r3, #3
 80024f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024f6:	00d4      	lsls	r4, r2, #3
 80024f8:	4622      	mov	r2, r4
 80024fa:	462b      	mov	r3, r5
 80024fc:	1814      	adds	r4, r2, r0
 80024fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002502:	414b      	adcs	r3, r1
 8002504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	008b      	lsls	r3, r1, #2
 800251e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002522:	0082      	lsls	r2, r0, #2
 8002524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002528:	f7fd feca 	bl	80002c0 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <UART_SetConfig+0x734>)
 8002532:	fba3 1302 	umull	r1, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2164      	movs	r1, #100	; 0x64
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	3332      	adds	r3, #50	; 0x32
 8002544:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <UART_SetConfig+0x734>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002550:	441e      	add	r6, r3
 8002552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002556:	4618      	mov	r0, r3
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	1894      	adds	r4, r2, r2
 8002562:	603c      	str	r4, [r7, #0]
 8002564:	415b      	adcs	r3, r3
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800256c:	1812      	adds	r2, r2, r0
 800256e:	eb41 0303 	adc.w	r3, r1, r3
 8002572:	f04f 0400 	mov.w	r4, #0
 8002576:	f04f 0500 	mov.w	r5, #0
 800257a:	00dd      	lsls	r5, r3, #3
 800257c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002580:	00d4      	lsls	r4, r2, #3
 8002582:	4622      	mov	r2, r4
 8002584:	462b      	mov	r3, r5
 8002586:	1814      	adds	r4, r2, r0
 8002588:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800258c:	414b      	adcs	r3, r1
 800258e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	008b      	lsls	r3, r1, #2
 80025a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ac:	0082      	lsls	r2, r0, #2
 80025ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80025b2:	f7fd fe85 	bl	80002c0 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <UART_SetConfig+0x734>)
 80025bc:	fba3 1302 	umull	r1, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2164      	movs	r1, #100	; 0x64
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	3332      	adds	r3, #50	; 0x32
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <UART_SetConfig+0x734>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 020f 	and.w	r2, r3, #15
 80025da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4432      	add	r2, r6
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	e7ff      	b.n	80025e6 <UART_SetConfig+0x722>
 80025e6:	bf00      	nop
 80025e8:	37f4      	adds	r7, #244	; 0xf4
 80025ea:	46bd      	mov	sp, r7
 80025ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f0:	40011000 	.word	0x40011000
 80025f4:	40011400 	.word	0x40011400
 80025f8:	51eb851f 	.word	0x51eb851f

080025fc <ApplicationManager_Init>:
static void ApplicationManager_Static_GotEncryptedPacketHandler(void);
static void ApplicationManager_Static_DefaultHandler(void);


void ApplicationManager_Init(ApplicationHandler_t *App)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	App->ApplicationState = APP_STATE_WAITING;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
	App->MessageLength = 0u;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <ApplicationManager_StateMachine>:

void ApplicationManager_StateMachine(ApplicationHandler_t *App)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	while(1u)
	{
		switch(App->ApplicationState)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d818      	bhi.n	800265e <ApplicationManager_StateMachine+0x42>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <ApplicationManager_StateMachine+0x18>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	0800264b 	.word	0x0800264b
 800263c:	08002653 	.word	0x08002653
 8002640:	08002659 	.word	0x08002659
		{
			case APP_STATE_WAITING :
				ApplicationManager_Static_WaitingHandler();
 8002644:	f000 f80e 	bl	8002664 <ApplicationManager_Static_WaitingHandler>
				break;
 8002648:	e00b      	b.n	8002662 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_COMMAND :
				ApplicationManager_Static_GotCommandHandler(App);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f812 	bl	8002674 <ApplicationManager_Static_GotCommandHandler>
				break;
 8002650:	e007      	b.n	8002662 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_PACKET :
				ApplicationManager_Static_GotPacketHandler();
 8002652:	f000 f825 	bl	80026a0 <ApplicationManager_Static_GotPacketHandler>
				break;
 8002656:	e004      	b.n	8002662 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_ENCRYPTED_PACKET :
				ApplicationManager_Static_GotEncryptedPacketHandler();
 8002658:	f000 f829 	bl	80026ae <ApplicationManager_Static_GotEncryptedPacketHandler>
				break;
 800265c:	e001      	b.n	8002662 <ApplicationManager_StateMachine+0x46>
			default :
				ApplicationManager_Static_DefaultHandler();
 800265e:	f000 f82d 	bl	80026bc <ApplicationManager_Static_DefaultHandler>
		switch(App->ApplicationState)
 8002662:	e7df      	b.n	8002624 <ApplicationManager_StateMachine+0x8>

08002664 <ApplicationManager_Static_WaitingHandler>:
		}
	}
}

static void ApplicationManager_Static_WaitingHandler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
	// TODO
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <ApplicationManager_Static_GotCommandHandler>:

static void ApplicationManager_Static_GotCommandHandler(ApplicationHandler_t *App)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	// Check command type
	CommandLineInterfaceController_GetCommand(&hCLI, hCLI.pCLI_Buffer, App->MessageLength);
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <ApplicationManager_Static_GotCommandHandler+0x28>)
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	461a      	mov	r2, r3
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <ApplicationManager_Static_GotCommandHandler+0x28>)
 8002688:	f000 f862 	bl	8002750 <CommandLineInterfaceController_GetCommand>

	// Reset application state
	App->ApplicationState = APP_STATE_WAITING;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000198 	.word	0x20000198

080026a0 <ApplicationManager_Static_GotPacketHandler>:

static void ApplicationManager_Static_GotPacketHandler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
	// TODO
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <ApplicationManager_Static_GotEncryptedPacketHandler>:

static void ApplicationManager_Static_GotEncryptedPacketHandler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
	// TODO
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <ApplicationManager_Static_DefaultHandler>:

static void ApplicationManager_Static_DefaultHandler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	// TODO
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <CommandLineInterfaceController_Init>:
static void CommandLineInterfaceController_Controller_Static_DisconnectHandler(CommandLineInterfaceControllerHandle_t *CLI);
static void CommandLineInterfaceController_Controller_Static_MessageHandler(CommandLineInterfaceControllerHandle_t *CLI);


void CommandLineInterfaceController_Init(CommandLineInterfaceControllerHandle_t *CLI)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	CLI->pCLI_Buffer = CommandLineInterfaceController_Buffer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <CommandLineInterfaceController_Init+0x28>)
 80026d8:	601a      	str	r2, [r3, #0]

	CLI->CLI_BufferSize = COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	22fa      	movs	r2, #250	; 0xfa
 80026de:	809a      	strh	r2, [r3, #4]

	CLI->CLI_BufferHead = 0u;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	719a      	strb	r2, [r3, #6]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000009c 	.word	0x2000009c

080026f8 <CommandLineInterfaceController_WriteMessage>:


void CommandLineInterfaceController_WriteMessage(CommandLineInterfaceControllerHandle_t *CLI, const char *msg)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	uint16_t Size;

    // Check message length
	if(strlen(msg) <= COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH)
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7fd fd84 	bl	8000210 <strlen>
 8002708:	4603      	mov	r3, r0
 800270a:	2bfa      	cmp	r3, #250	; 0xfa
 800270c:	d808      	bhi.n	8002720 <CommandLineInterfaceController_WriteMessage+0x28>
	{
		Size = sprintf(CLI->pCLI_Buffer, msg);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fbe9 	bl	8002eec <siprintf>
 800271a:	4603      	mov	r3, r0
 800271c:	81fb      	strh	r3, [r7, #14]
 800271e:	e007      	b.n	8002730 <CommandLineInterfaceController_WriteMessage+0x38>
	}
	else
	{
		Size = sprintf(CLI->pCLI_Buffer, "ERROR : Message is too long !\r");
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4908      	ldr	r1, [pc, #32]	; (8002748 <CommandLineInterfaceController_WriteMessage+0x50>)
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fbe0 	bl	8002eec <siprintf>
 800272c:	4603      	mov	r3, r0
 800272e:	81fb      	strh	r3, [r7, #14]
	}

    // Send the message
	HAL_UART_Transmit(&huart2, (uint8_t*) CLI->pCLI_Buffer, Size, 100u);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	89fa      	ldrh	r2, [r7, #14]
 8002736:	2364      	movs	r3, #100	; 0x64
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <CommandLineInterfaceController_WriteMessage+0x54>)
 800273a:	f7ff f854 	bl	80017e6 <HAL_UART_Transmit>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	08003744 	.word	0x08003744
 800274c:	200001a4 	.word	0x200001a4

08002750 <CommandLineInterfaceController_GetCommand>:


void CommandLineInterfaceController_GetCommand(CommandLineInterfaceControllerHandle_t *CLI, char *msg, uint8_t length)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8002756:	af00      	add	r7, sp, #0
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	6018      	str	r0, [r3, #0]
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	6019      	str	r1, [r3, #0]
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	701a      	strb	r2, [r3, #0]
	uint8_t CommandNumber = 0xFFu;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307

	const char commands[COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT][COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH] =
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <CommandLineInterfaceController_GetCommand+0x134>)
 8002774:	4618      	mov	r0, r3
 8002776:	4611      	mov	r1, r2
 8002778:	f240 23ee 	movw	r3, #750	; 0x2ee
 800277c:	461a      	mov	r2, r3
 800277e:	f000 fb9f 	bl	8002ec0 <memcpy>
		"connect",
		"disconnect"
	};

    // Check the given string for command patterns
	for(uint8_t i = 0u; i < COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT; ++i)
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 8002788:	e050      	b.n	800282c <CommandLineInterfaceController_GetCommand+0xdc>
	{
		for(uint8_t j = 0u; j < length; ++j)
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
 8002790:	e03f      	b.n	8002812 <CommandLineInterfaceController_GetCommand+0xc2>
		{
			if(commands[i][j] != msg[j])
 8002792:	f897 2306 	ldrb.w	r2, [r7, #774]	; 0x306
 8002796:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 800279a:	f107 0114 	add.w	r1, r7, #20
 800279e:	20fa      	movs	r0, #250	; 0xfa
 80027a0:	fb00 f202 	mul.w	r2, r0, r2
 80027a4:	440a      	add	r2, r1
 80027a6:	4413      	add	r3, r2
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 80027ae:	f107 0108 	add.w	r1, r7, #8
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	440b      	add	r3, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d131      	bne.n	8002820 <CommandLineInterfaceController_GetCommand+0xd0>
			{
				break;
			}
			else if((j == strlen(commands[i]) - 1u) && (length == strlen(commands[i])))
 80027bc:	f897 4305 	ldrb.w	r4, [r7, #773]	; 0x305
 80027c0:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 80027c4:	f107 0214 	add.w	r2, r7, #20
 80027c8:	21fa      	movs	r1, #250	; 0xfa
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fd1d 	bl	8000210 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	3b01      	subs	r3, #1
 80027da:	429c      	cmp	r4, r3
 80027dc:	d114      	bne.n	8002808 <CommandLineInterfaceController_GetCommand+0xb8>
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	781c      	ldrb	r4, [r3, #0]
 80027e2:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 80027e6:	f107 0214 	add.w	r2, r7, #20
 80027ea:	21fa      	movs	r1, #250	; 0xfa
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fd0c 	bl	8000210 <strlen>
 80027f8:	4603      	mov	r3, r0
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d104      	bne.n	8002808 <CommandLineInterfaceController_GetCommand+0xb8>
			{
				CommandNumber = i;
 80027fe:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8002802:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
				break;
 8002806:	e00c      	b.n	8002822 <CommandLineInterfaceController_GetCommand+0xd2>
		for(uint8_t j = 0u; j < length; ++j)
 8002808:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 800280c:	3301      	adds	r3, #1
 800280e:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	f897 2305 	ldrb.w	r2, [r7, #773]	; 0x305
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b9      	bcc.n	8002792 <CommandLineInterfaceController_GetCommand+0x42>
 800281e:	e000      	b.n	8002822 <CommandLineInterfaceController_GetCommand+0xd2>
				break;
 8002820:	bf00      	nop
	for(uint8_t i = 0u; i < COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT; ++i)
 8002822:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8002826:	3301      	adds	r3, #1
 8002828:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 800282c:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8002830:	2b02      	cmp	r3, #2
 8002832:	d9aa      	bls.n	800278a <CommandLineInterfaceController_GetCommand+0x3a>
			}
		}
	}

    // Execute the given command
	switch(CommandNumber)
 8002834:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8002838:	2b02      	cmp	r3, #2
 800283a:	d012      	beq.n	8002862 <CommandLineInterfaceController_GetCommand+0x112>
 800283c:	2b02      	cmp	r3, #2
 800283e:	dc16      	bgt.n	800286e <CommandLineInterfaceController_GetCommand+0x11e>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <CommandLineInterfaceController_GetCommand+0xfa>
 8002844:	2b01      	cmp	r3, #1
 8002846:	d006      	beq.n	8002856 <CommandLineInterfaceController_GetCommand+0x106>
 8002848:	e011      	b.n	800286e <CommandLineInterfaceController_GetCommand+0x11e>
	{
		case 0u :
			CommandLineInterfaceController_Controller_Static_HelpHandler(CLI);
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f000 f81a 	bl	8002888 <CommandLineInterfaceController_Controller_Static_HelpHandler>
			break;
 8002854:	e011      	b.n	800287a <CommandLineInterfaceController_GetCommand+0x12a>
		case 1u :
			CommandLineInterfaceController_Controller_Static_ConnectHandler(CLI);
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	f000 f828 	bl	80028b0 <CommandLineInterfaceController_Controller_Static_ConnectHandler>
			break;
 8002860:	e00b      	b.n	800287a <CommandLineInterfaceController_GetCommand+0x12a>
		case 2u :
			CommandLineInterfaceController_Controller_Static_DisconnectHandler(CLI);
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	f000 f830 	bl	80028cc <CommandLineInterfaceController_Controller_Static_DisconnectHandler>
			break;
 800286c:	e005      	b.n	800287a <CommandLineInterfaceController_GetCommand+0x12a>
		default :
			CommandLineInterfaceController_Controller_Static_MessageHandler(CLI);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	f000 f838 	bl	80028e8 <CommandLineInterfaceController_Controller_Static_MessageHandler>
	}
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	f507 7743 	add.w	r7, r7, #780	; 0x30c
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	08003764 	.word	0x08003764

08002888 <CommandLineInterfaceController_Controller_Static_HelpHandler>:


static void CommandLineInterfaceController_Controller_Static_HelpHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	CommandLineInterfaceController_WriteMessage(CLI, ">> connect - show list of available connections\r");
 8002890:	4905      	ldr	r1, [pc, #20]	; (80028a8 <CommandLineInterfaceController_Controller_Static_HelpHandler+0x20>)
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ff30 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>
	CommandLineInterfaceController_WriteMessage(CLI, ">> disconnect - disconnect from all connections\r");
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <CommandLineInterfaceController_Controller_Static_HelpHandler+0x24>)
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff2c 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	08003a54 	.word	0x08003a54
 80028ac:	08003a88 	.word	0x08003a88

080028b0 <CommandLineInterfaceController_Controller_Static_ConnectHandler>:

static void CommandLineInterfaceController_Controller_Static_ConnectHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	CommandLineInterfaceController_WriteMessage(CLI, "List of available connections : \r");
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <CommandLineInterfaceController_Controller_Static_ConnectHandler+0x18>)
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff1c 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>
	// TODO - connections list
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08003abc 	.word	0x08003abc

080028cc <CommandLineInterfaceController_Controller_Static_DisconnectHandler>:

static void CommandLineInterfaceController_Controller_Static_DisconnectHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	// TODO - disconnect part of the code
	CommandLineInterfaceController_WriteMessage(CLI, "Disconnected from all connections\r");
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <CommandLineInterfaceController_Controller_Static_DisconnectHandler+0x18>)
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff0e 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	08003ae0 	.word	0x08003ae0

080028e8 <CommandLineInterfaceController_Controller_Static_MessageHandler>:

static void CommandLineInterfaceController_Controller_Static_MessageHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	// TODO - pack the message and send
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <MX_GPIO_Init+0xd0>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <MX_GPIO_Init+0xd0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <MX_GPIO_Init+0xd0>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <MX_GPIO_Init+0xd0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	2120      	movs	r1, #32
 8002986:	4812      	ldr	r0, [pc, #72]	; (80029d0 <MX_GPIO_Init+0xd4>)
 8002988:	f7fe f950 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800298c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <MX_GPIO_Init+0xd8>)
 8002994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	480d      	ldr	r0, [pc, #52]	; (80029d8 <MX_GPIO_Init+0xdc>)
 80029a2:	f7fd ffaf 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029a6:	2320      	movs	r3, #32
 80029a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <MX_GPIO_Init+0xd4>)
 80029be:	f7fd ffa1 	bl	8000904 <HAL_GPIO_Init>

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	10210000 	.word	0x10210000
 80029d8:	40020800 	.word	0x40020800

080029dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029e0:	f7fd fdea 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e4:	f000 f824 	bl	8002a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e8:	f7ff ff88 	bl	80028fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029ec:	f000 f93c 	bl	8002c68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */  
  CommandLineInterfaceController_Init(&hCLI);
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <main+0x44>)
 80029f2:	f7ff fe6b 	bl	80026cc <CommandLineInterfaceController_Init>
  ApplicationManager_Init(&hApplication);
 80029f6:	480b      	ldr	r0, [pc, #44]	; (8002a24 <main+0x48>)
 80029f8:	f7ff fe00 	bl	80025fc <ApplicationManager_Init>

  CommandLineInterfaceController_WriteMessage(&hCLI, "COMMAND LINE INTERFACE\r");
 80029fc:	490a      	ldr	r1, [pc, #40]	; (8002a28 <main+0x4c>)
 80029fe:	4808      	ldr	r0, [pc, #32]	; (8002a20 <main+0x44>)
 8002a00:	f7ff fe7a 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>

  HAL_UART_Receive_IT(&huart2, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u);
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <main+0x44>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <main+0x44>)
 8002a0a:	7992      	ldrb	r2, [r2, #6]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4619      	mov	r1, r3
 8002a12:	4806      	ldr	r0, [pc, #24]	; (8002a2c <main+0x50>)
 8002a14:	f7fe ff80 	bl	8001918 <HAL_UART_Receive_IT>

  ApplicationManager_StateMachine(&hApplication);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <main+0x48>)
 8002a1a:	f7ff fdff 	bl	800261c <ApplicationManager_StateMachine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <main+0x42>
 8002a20:	20000198 	.word	0x20000198
 8002a24:	200001a0 	.word	0x200001a0
 8002a28:	08003b04 	.word	0x08003b04
 8002a2c:	200001a4 	.word	0x200001a4

08002a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b094      	sub	sp, #80	; 0x50
 8002a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	2234      	movs	r2, #52	; 0x34
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa4c 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
 8002a64:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a70:	2300      	movs	r3, #0
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <SystemClock_Config+0xe0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <SystemClock_Config+0xe0>)
 8002a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <SystemClock_Config+0xe0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a96:	2302      	movs	r3, #2
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002aa4:	23b4      	movs	r3, #180	; 0xb4
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fbed 	bl	8001298 <HAL_RCC_OscConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ac4:	f000 f826 	bl	8002b14 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ac8:	f7fe f8ca 	bl	8000c60 <HAL_PWREx_EnableOverDrive>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ad2:	f000 f81f 	bl	8002b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad6:	230f      	movs	r3, #15
 8002ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ada:	2302      	movs	r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ae2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	2105      	movs	r1, #5
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe f903 	bl	8000d00 <HAL_RCC_ClockConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002b00:	f000 f808 	bl	8002b14 <Error_Handler>
  }
}
 8002b04:	bf00      	nop
 8002b06:	3750      	adds	r7, #80	; 0x50
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b62:	2007      	movs	r0, #7
 8002b64:	f7fd fe6a 	bl	800083c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <HardFault_Handler+0x4>

08002b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <MemManage_Handler+0x4>

08002b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc8:	f7fd fd48 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <USART2_IRQHandler+0x10>)
 8002bd6:	f7fe fef5 	bl	80019c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001a4 	.word	0x200001a4

08002be4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x50>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <_sbrk+0x16>
		heap_end = &end;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_sbrk+0x50>)
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <_sbrk+0x54>)
 8002bf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <_sbrk+0x50>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <_sbrk+0x50>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	466a      	mov	r2, sp
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d907      	bls.n	8002c1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c0e:	f000 f92d 	bl	8002e6c <__errno>
 8002c12:	4603      	mov	r3, r0
 8002c14:	220c      	movs	r2, #12
 8002c16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e006      	b.n	8002c2c <_sbrk+0x48>
	}

	heap_end += incr;
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <_sbrk+0x50>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <_sbrk+0x50>)
 8002c28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000008c 	.word	0x2000008c
 8002c38:	200001f8 	.word	0x200001f8

08002c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <SystemInit+0x28>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <SystemInit+0x28>)
 8002c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SystemInit+0x28>)
 8002c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c56:	609a      	str	r2, [r3, #8]
#endif
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_USART2_UART_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002ca0:	f7fe fd54 	bl	800174c <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002caa:	f7ff ff33 	bl	8002b14 <Error_Handler>
  }

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200001a4 	.word	0x200001a4
 8002cb8:	40004400 	.word	0x40004400

08002cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_UART_MspInit+0x94>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d133      	bne.n	8002d46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d16:	230c      	movs	r3, #12
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d26:	2307      	movs	r3, #7
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HAL_UART_MspInit+0x9c>)
 8002d32:	f7fd fde7 	bl	8000904 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2026      	movs	r0, #38	; 0x26
 8002d3c:	f7fd fd89 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d40:	2026      	movs	r0, #38	; 0x26
 8002d42:	f7fd fda2 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000

08002d5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	// Check if buffer is not full, if yes generate error message
	if(hCLI.CLI_BufferHead != hCLI.CLI_BufferSize)
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d66:	799b      	ldrb	r3, [r3, #6]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d6c:	889b      	ldrh	r3, [r3, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d036      	beq.n	8002de0 <HAL_UART_RxCpltCallback+0x84>
	{
		// Echo functionality
		HAL_UART_Transmit(huart, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u, 100u);
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d78:	7992      	ldrb	r2, [r2, #6]
 8002d7a:	1899      	adds	r1, r3, r2
 8002d7c:	2364      	movs	r3, #100	; 0x64
 8002d7e:	2201      	movs	r2, #1
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fe fd30 	bl	80017e6 <HAL_UART_Transmit>

		// Check if enter button has been pushed
		if(hCLI.pCLI_Buffer[hCLI.CLI_BufferHead] == '\r')
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d8c:	7992      	ldrb	r2, [r2, #6]
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b0d      	cmp	r3, #13
 8002d94:	d10a      	bne.n	8002dac <HAL_UART_RxCpltCallback+0x50>
		{
			hApplication.ApplicationState = APP_STATE_GOT_COMMAND;
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_UART_RxCpltCallback+0xb4>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
			hApplication.MessageLength = hCLI.CLI_BufferHead;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002d9e:	799a      	ldrb	r2, [r3, #6]
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_UART_RxCpltCallback+0xb4>)
 8002da2:	705a      	strb	r2, [r3, #1]

			// Reset command line interface controller buffer head
			hCLI.CLI_BufferHead = 0u;
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	719a      	strb	r2, [r3, #6]
 8002daa:	e020      	b.n	8002dee <HAL_UART_RxCpltCallback+0x92>
		}
		// Check if backspace button has been pushed
		else if(hCLI.pCLI_Buffer[hCLI.CLI_BufferHead] == 127u)
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002db2:	7992      	ldrb	r2, [r2, #6]
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dba:	d10a      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x76>
		{
			if(hCLI.CLI_BufferHead > 0u)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dbe:	799b      	ldrb	r3, [r3, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d014      	beq.n	8002dee <HAL_UART_RxCpltCallback+0x92>
			{
				hCLI.CLI_BufferHead--;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dc6:	799b      	ldrb	r3, [r3, #6]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dce:	719a      	strb	r2, [r3, #6]
 8002dd0:	e00d      	b.n	8002dee <HAL_UART_RxCpltCallback+0x92>
			}
		}
		else
		{
			hCLI.CLI_BufferHead++;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dd4:	799b      	ldrb	r3, [r3, #6]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002ddc:	719a      	strb	r2, [r3, #6]
 8002dde:	e006      	b.n	8002dee <HAL_UART_RxCpltCallback+0x92>
		}
	}
	else
	{
		CommandLineInterfaceController_WriteMessage(&hCLI, "\rERROR : command is too long !\r");
 8002de0:	490c      	ldr	r1, [pc, #48]	; (8002e14 <HAL_UART_RxCpltCallback+0xb8>)
 8002de2:	480a      	ldr	r0, [pc, #40]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002de4:	f7ff fc88 	bl	80026f8 <CommandLineInterfaceController_WriteMessage>

		hCLI.CLI_BufferHead = 0u;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	719a      	strb	r2, [r3, #6]
	}

	// Reenable UART receive interrupt
	HAL_UART_Receive_IT(huart, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u);
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <HAL_UART_RxCpltCallback+0xb0>)
 8002df4:	7992      	ldrb	r2, [r2, #6]
 8002df6:	4413      	add	r3, r2
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fd8b 	bl	8001918 <HAL_UART_Receive_IT>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000198 	.word	0x20000198
 8002e10:	200001a0 	.word	0x200001a0
 8002e14:	08003b1c 	.word	0x08003b1c

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e1e:	e003      	b.n	8002e28 <LoopCopyDataInit>

08002e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e26:	3104      	adds	r1, #4

08002e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e28:	480b      	ldr	r0, [pc, #44]	; (8002e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e30:	d3f6      	bcc.n	8002e20 <CopyDataInit>
  ldr  r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e34:	e002      	b.n	8002e3c <LoopFillZerobss>

08002e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e38:	f842 3b04 	str.w	r3, [r2], #4

08002e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e40:	d3f9      	bcc.n	8002e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e42:	f7ff fefb 	bl	8002c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f000 f817 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7ff fdc7 	bl	80029dc <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e54:	08003b98 	.word	0x08003b98
  ldr  r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002e60:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002e64:	200001f4 	.word	0x200001f4

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>
	...

08002e6c <__errno>:
 8002e6c:	4b01      	ldr	r3, [pc, #4]	; (8002e74 <__errno+0x8>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4d0d      	ldr	r5, [pc, #52]	; (8002eb0 <__libc_init_array+0x38>)
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	; (8002eb4 <__libc_init_array+0x3c>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	2600      	movs	r6, #0
 8002e84:	42a6      	cmp	r6, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	4d0b      	ldr	r5, [pc, #44]	; (8002eb8 <__libc_init_array+0x40>)
 8002e8a:	4c0c      	ldr	r4, [pc, #48]	; (8002ebc <__libc_init_array+0x44>)
 8002e8c:	f000 fc4e 	bl	800372c <_init>
 8002e90:	1b64      	subs	r4, r4, r5
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	2600      	movs	r6, #0
 8002e96:	42a6      	cmp	r6, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea0:	4798      	blx	r3
 8002ea2:	3601      	adds	r6, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eaa:	4798      	blx	r3
 8002eac:	3601      	adds	r6, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	08003b90 	.word	0x08003b90
 8002eb4:	08003b90 	.word	0x08003b90
 8002eb8:	08003b90 	.word	0x08003b90
 8002ebc:	08003b94 	.word	0x08003b94

08002ec0 <memcpy>:
 8002ec0:	440a      	add	r2, r1
 8002ec2:	4291      	cmp	r1, r2
 8002ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ec8:	d100      	bne.n	8002ecc <memcpy+0xc>
 8002eca:	4770      	bx	lr
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ed6:	4291      	cmp	r1, r2
 8002ed8:	d1f9      	bne.n	8002ece <memcpy+0xe>
 8002eda:	bd10      	pop	{r4, pc}

08002edc <memset>:
 8002edc:	4402      	add	r2, r0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <siprintf>:
 8002eec:	b40e      	push	{r1, r2, r3}
 8002eee:	b500      	push	{lr}
 8002ef0:	b09c      	sub	sp, #112	; 0x70
 8002ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef4:	9002      	str	r0, [sp, #8]
 8002ef6:	9006      	str	r0, [sp, #24]
 8002ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002efc:	4809      	ldr	r0, [pc, #36]	; (8002f24 <siprintf+0x38>)
 8002efe:	9107      	str	r1, [sp, #28]
 8002f00:	9104      	str	r1, [sp, #16]
 8002f02:	4909      	ldr	r1, [pc, #36]	; (8002f28 <siprintf+0x3c>)
 8002f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f08:	9105      	str	r1, [sp, #20]
 8002f0a:	6800      	ldr	r0, [r0, #0]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	a902      	add	r1, sp, #8
 8002f10:	f000 f868 	bl	8002fe4 <_svfiprintf_r>
 8002f14:	9b02      	ldr	r3, [sp, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	b01c      	add	sp, #112	; 0x70
 8002f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f20:	b003      	add	sp, #12
 8002f22:	4770      	bx	lr
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	ffff0208 	.word	0xffff0208

08002f2c <__ssputs_r>:
 8002f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	688e      	ldr	r6, [r1, #8]
 8002f32:	429e      	cmp	r6, r3
 8002f34:	4682      	mov	sl, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	4690      	mov	r8, r2
 8002f3a:	461f      	mov	r7, r3
 8002f3c:	d838      	bhi.n	8002fb0 <__ssputs_r+0x84>
 8002f3e:	898a      	ldrh	r2, [r1, #12]
 8002f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f44:	d032      	beq.n	8002fac <__ssputs_r+0x80>
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	6909      	ldr	r1, [r1, #16]
 8002f4a:	eba5 0901 	sub.w	r9, r5, r1
 8002f4e:	6965      	ldr	r5, [r4, #20]
 8002f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f58:	3301      	adds	r3, #1
 8002f5a:	444b      	add	r3, r9
 8002f5c:	106d      	asrs	r5, r5, #1
 8002f5e:	429d      	cmp	r5, r3
 8002f60:	bf38      	it	cc
 8002f62:	461d      	movcc	r5, r3
 8002f64:	0553      	lsls	r3, r2, #21
 8002f66:	d531      	bpl.n	8002fcc <__ssputs_r+0xa0>
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f000 fb39 	bl	80035e0 <_malloc_r>
 8002f6e:	4606      	mov	r6, r0
 8002f70:	b950      	cbnz	r0, 8002f88 <__ssputs_r+0x5c>
 8002f72:	230c      	movs	r3, #12
 8002f74:	f8ca 3000 	str.w	r3, [sl]
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7e:	81a3      	strh	r3, [r4, #12]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f88:	6921      	ldr	r1, [r4, #16]
 8002f8a:	464a      	mov	r2, r9
 8002f8c:	f7ff ff98 	bl	8002ec0 <memcpy>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	6126      	str	r6, [r4, #16]
 8002f9e:	6165      	str	r5, [r4, #20]
 8002fa0:	444e      	add	r6, r9
 8002fa2:	eba5 0509 	sub.w	r5, r5, r9
 8002fa6:	6026      	str	r6, [r4, #0]
 8002fa8:	60a5      	str	r5, [r4, #8]
 8002faa:	463e      	mov	r6, r7
 8002fac:	42be      	cmp	r6, r7
 8002fae:	d900      	bls.n	8002fb2 <__ssputs_r+0x86>
 8002fb0:	463e      	mov	r6, r7
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	f000 faa8 	bl	800350c <memmove>
 8002fbc:	68a3      	ldr	r3, [r4, #8]
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	1b9b      	subs	r3, r3, r6
 8002fc2:	4432      	add	r2, r6
 8002fc4:	60a3      	str	r3, [r4, #8]
 8002fc6:	6022      	str	r2, [r4, #0]
 8002fc8:	2000      	movs	r0, #0
 8002fca:	e7db      	b.n	8002f84 <__ssputs_r+0x58>
 8002fcc:	462a      	mov	r2, r5
 8002fce:	f000 fb61 	bl	8003694 <_realloc_r>
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d1e1      	bne.n	8002f9c <__ssputs_r+0x70>
 8002fd8:	6921      	ldr	r1, [r4, #16]
 8002fda:	4650      	mov	r0, sl
 8002fdc:	f000 fab0 	bl	8003540 <_free_r>
 8002fe0:	e7c7      	b.n	8002f72 <__ssputs_r+0x46>
	...

08002fe4 <_svfiprintf_r>:
 8002fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe8:	4698      	mov	r8, r3
 8002fea:	898b      	ldrh	r3, [r1, #12]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	b09d      	sub	sp, #116	; 0x74
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	460d      	mov	r5, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	d50e      	bpl.n	8003016 <_svfiprintf_r+0x32>
 8002ff8:	690b      	ldr	r3, [r1, #16]
 8002ffa:	b963      	cbnz	r3, 8003016 <_svfiprintf_r+0x32>
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	f000 faef 	bl	80035e0 <_malloc_r>
 8003002:	6028      	str	r0, [r5, #0]
 8003004:	6128      	str	r0, [r5, #16]
 8003006:	b920      	cbnz	r0, 8003012 <_svfiprintf_r+0x2e>
 8003008:	230c      	movs	r3, #12
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	e0d1      	b.n	80031b6 <_svfiprintf_r+0x1d2>
 8003012:	2340      	movs	r3, #64	; 0x40
 8003014:	616b      	str	r3, [r5, #20]
 8003016:	2300      	movs	r3, #0
 8003018:	9309      	str	r3, [sp, #36]	; 0x24
 800301a:	2320      	movs	r3, #32
 800301c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003020:	f8cd 800c 	str.w	r8, [sp, #12]
 8003024:	2330      	movs	r3, #48	; 0x30
 8003026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031d0 <_svfiprintf_r+0x1ec>
 800302a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800302e:	f04f 0901 	mov.w	r9, #1
 8003032:	4623      	mov	r3, r4
 8003034:	469a      	mov	sl, r3
 8003036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800303a:	b10a      	cbz	r2, 8003040 <_svfiprintf_r+0x5c>
 800303c:	2a25      	cmp	r2, #37	; 0x25
 800303e:	d1f9      	bne.n	8003034 <_svfiprintf_r+0x50>
 8003040:	ebba 0b04 	subs.w	fp, sl, r4
 8003044:	d00b      	beq.n	800305e <_svfiprintf_r+0x7a>
 8003046:	465b      	mov	r3, fp
 8003048:	4622      	mov	r2, r4
 800304a:	4629      	mov	r1, r5
 800304c:	4638      	mov	r0, r7
 800304e:	f7ff ff6d 	bl	8002f2c <__ssputs_r>
 8003052:	3001      	adds	r0, #1
 8003054:	f000 80aa 	beq.w	80031ac <_svfiprintf_r+0x1c8>
 8003058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800305a:	445a      	add	r2, fp
 800305c:	9209      	str	r2, [sp, #36]	; 0x24
 800305e:	f89a 3000 	ldrb.w	r3, [sl]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80a2 	beq.w	80031ac <_svfiprintf_r+0x1c8>
 8003068:	2300      	movs	r3, #0
 800306a:	f04f 32ff 	mov.w	r2, #4294967295
 800306e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003072:	f10a 0a01 	add.w	sl, sl, #1
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	9307      	str	r3, [sp, #28]
 800307a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800307e:	931a      	str	r3, [sp, #104]	; 0x68
 8003080:	4654      	mov	r4, sl
 8003082:	2205      	movs	r2, #5
 8003084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003088:	4851      	ldr	r0, [pc, #324]	; (80031d0 <_svfiprintf_r+0x1ec>)
 800308a:	f7fd f8c9 	bl	8000220 <memchr>
 800308e:	9a04      	ldr	r2, [sp, #16]
 8003090:	b9d8      	cbnz	r0, 80030ca <_svfiprintf_r+0xe6>
 8003092:	06d0      	lsls	r0, r2, #27
 8003094:	bf44      	itt	mi
 8003096:	2320      	movmi	r3, #32
 8003098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800309c:	0711      	lsls	r1, r2, #28
 800309e:	bf44      	itt	mi
 80030a0:	232b      	movmi	r3, #43	; 0x2b
 80030a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030a6:	f89a 3000 	ldrb.w	r3, [sl]
 80030aa:	2b2a      	cmp	r3, #42	; 0x2a
 80030ac:	d015      	beq.n	80030da <_svfiprintf_r+0xf6>
 80030ae:	9a07      	ldr	r2, [sp, #28]
 80030b0:	4654      	mov	r4, sl
 80030b2:	2000      	movs	r0, #0
 80030b4:	f04f 0c0a 	mov.w	ip, #10
 80030b8:	4621      	mov	r1, r4
 80030ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030be:	3b30      	subs	r3, #48	; 0x30
 80030c0:	2b09      	cmp	r3, #9
 80030c2:	d94e      	bls.n	8003162 <_svfiprintf_r+0x17e>
 80030c4:	b1b0      	cbz	r0, 80030f4 <_svfiprintf_r+0x110>
 80030c6:	9207      	str	r2, [sp, #28]
 80030c8:	e014      	b.n	80030f4 <_svfiprintf_r+0x110>
 80030ca:	eba0 0308 	sub.w	r3, r0, r8
 80030ce:	fa09 f303 	lsl.w	r3, r9, r3
 80030d2:	4313      	orrs	r3, r2
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	46a2      	mov	sl, r4
 80030d8:	e7d2      	b.n	8003080 <_svfiprintf_r+0x9c>
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	1d19      	adds	r1, r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	9103      	str	r1, [sp, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bfbb      	ittet	lt
 80030e6:	425b      	neglt	r3, r3
 80030e8:	f042 0202 	orrlt.w	r2, r2, #2
 80030ec:	9307      	strge	r3, [sp, #28]
 80030ee:	9307      	strlt	r3, [sp, #28]
 80030f0:	bfb8      	it	lt
 80030f2:	9204      	strlt	r2, [sp, #16]
 80030f4:	7823      	ldrb	r3, [r4, #0]
 80030f6:	2b2e      	cmp	r3, #46	; 0x2e
 80030f8:	d10c      	bne.n	8003114 <_svfiprintf_r+0x130>
 80030fa:	7863      	ldrb	r3, [r4, #1]
 80030fc:	2b2a      	cmp	r3, #42	; 0x2a
 80030fe:	d135      	bne.n	800316c <_svfiprintf_r+0x188>
 8003100:	9b03      	ldr	r3, [sp, #12]
 8003102:	1d1a      	adds	r2, r3, #4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	9203      	str	r2, [sp, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	bfb8      	it	lt
 800310c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003110:	3402      	adds	r4, #2
 8003112:	9305      	str	r3, [sp, #20]
 8003114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031e0 <_svfiprintf_r+0x1fc>
 8003118:	7821      	ldrb	r1, [r4, #0]
 800311a:	2203      	movs	r2, #3
 800311c:	4650      	mov	r0, sl
 800311e:	f7fd f87f 	bl	8000220 <memchr>
 8003122:	b140      	cbz	r0, 8003136 <_svfiprintf_r+0x152>
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	eba0 000a 	sub.w	r0, r0, sl
 800312a:	fa03 f000 	lsl.w	r0, r3, r0
 800312e:	9b04      	ldr	r3, [sp, #16]
 8003130:	4303      	orrs	r3, r0
 8003132:	3401      	adds	r4, #1
 8003134:	9304      	str	r3, [sp, #16]
 8003136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313a:	4826      	ldr	r0, [pc, #152]	; (80031d4 <_svfiprintf_r+0x1f0>)
 800313c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003140:	2206      	movs	r2, #6
 8003142:	f7fd f86d 	bl	8000220 <memchr>
 8003146:	2800      	cmp	r0, #0
 8003148:	d038      	beq.n	80031bc <_svfiprintf_r+0x1d8>
 800314a:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <_svfiprintf_r+0x1f4>)
 800314c:	bb1b      	cbnz	r3, 8003196 <_svfiprintf_r+0x1b2>
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	3307      	adds	r3, #7
 8003152:	f023 0307 	bic.w	r3, r3, #7
 8003156:	3308      	adds	r3, #8
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800315c:	4433      	add	r3, r6
 800315e:	9309      	str	r3, [sp, #36]	; 0x24
 8003160:	e767      	b.n	8003032 <_svfiprintf_r+0x4e>
 8003162:	fb0c 3202 	mla	r2, ip, r2, r3
 8003166:	460c      	mov	r4, r1
 8003168:	2001      	movs	r0, #1
 800316a:	e7a5      	b.n	80030b8 <_svfiprintf_r+0xd4>
 800316c:	2300      	movs	r3, #0
 800316e:	3401      	adds	r4, #1
 8003170:	9305      	str	r3, [sp, #20]
 8003172:	4619      	mov	r1, r3
 8003174:	f04f 0c0a 	mov.w	ip, #10
 8003178:	4620      	mov	r0, r4
 800317a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800317e:	3a30      	subs	r2, #48	; 0x30
 8003180:	2a09      	cmp	r2, #9
 8003182:	d903      	bls.n	800318c <_svfiprintf_r+0x1a8>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0c5      	beq.n	8003114 <_svfiprintf_r+0x130>
 8003188:	9105      	str	r1, [sp, #20]
 800318a:	e7c3      	b.n	8003114 <_svfiprintf_r+0x130>
 800318c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003190:	4604      	mov	r4, r0
 8003192:	2301      	movs	r3, #1
 8003194:	e7f0      	b.n	8003178 <_svfiprintf_r+0x194>
 8003196:	ab03      	add	r3, sp, #12
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	462a      	mov	r2, r5
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <_svfiprintf_r+0x1f8>)
 800319e:	a904      	add	r1, sp, #16
 80031a0:	4638      	mov	r0, r7
 80031a2:	f3af 8000 	nop.w
 80031a6:	1c42      	adds	r2, r0, #1
 80031a8:	4606      	mov	r6, r0
 80031aa:	d1d6      	bne.n	800315a <_svfiprintf_r+0x176>
 80031ac:	89ab      	ldrh	r3, [r5, #12]
 80031ae:	065b      	lsls	r3, r3, #25
 80031b0:	f53f af2c 	bmi.w	800300c <_svfiprintf_r+0x28>
 80031b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031b6:	b01d      	add	sp, #116	; 0x74
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031bc:	ab03      	add	r3, sp, #12
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	462a      	mov	r2, r5
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <_svfiprintf_r+0x1f8>)
 80031c4:	a904      	add	r1, sp, #16
 80031c6:	4638      	mov	r0, r7
 80031c8:	f000 f87a 	bl	80032c0 <_printf_i>
 80031cc:	e7eb      	b.n	80031a6 <_svfiprintf_r+0x1c2>
 80031ce:	bf00      	nop
 80031d0:	08003b54 	.word	0x08003b54
 80031d4:	08003b5e 	.word	0x08003b5e
 80031d8:	00000000 	.word	0x00000000
 80031dc:	08002f2d 	.word	0x08002f2d
 80031e0:	08003b5a 	.word	0x08003b5a

080031e4 <_printf_common>:
 80031e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e8:	4616      	mov	r6, r2
 80031ea:	4699      	mov	r9, r3
 80031ec:	688a      	ldr	r2, [r1, #8]
 80031ee:	690b      	ldr	r3, [r1, #16]
 80031f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031f4:	4293      	cmp	r3, r2
 80031f6:	bfb8      	it	lt
 80031f8:	4613      	movlt	r3, r2
 80031fa:	6033      	str	r3, [r6, #0]
 80031fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003200:	4607      	mov	r7, r0
 8003202:	460c      	mov	r4, r1
 8003204:	b10a      	cbz	r2, 800320a <_printf_common+0x26>
 8003206:	3301      	adds	r3, #1
 8003208:	6033      	str	r3, [r6, #0]
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	0699      	lsls	r1, r3, #26
 800320e:	bf42      	ittt	mi
 8003210:	6833      	ldrmi	r3, [r6, #0]
 8003212:	3302      	addmi	r3, #2
 8003214:	6033      	strmi	r3, [r6, #0]
 8003216:	6825      	ldr	r5, [r4, #0]
 8003218:	f015 0506 	ands.w	r5, r5, #6
 800321c:	d106      	bne.n	800322c <_printf_common+0x48>
 800321e:	f104 0a19 	add.w	sl, r4, #25
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	6832      	ldr	r2, [r6, #0]
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	42ab      	cmp	r3, r5
 800322a:	dc26      	bgt.n	800327a <_printf_common+0x96>
 800322c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003230:	1e13      	subs	r3, r2, #0
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	bf18      	it	ne
 8003236:	2301      	movne	r3, #1
 8003238:	0692      	lsls	r2, r2, #26
 800323a:	d42b      	bmi.n	8003294 <_printf_common+0xb0>
 800323c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003240:	4649      	mov	r1, r9
 8003242:	4638      	mov	r0, r7
 8003244:	47c0      	blx	r8
 8003246:	3001      	adds	r0, #1
 8003248:	d01e      	beq.n	8003288 <_printf_common+0xa4>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	68e5      	ldr	r5, [r4, #12]
 800324e:	6832      	ldr	r2, [r6, #0]
 8003250:	f003 0306 	and.w	r3, r3, #6
 8003254:	2b04      	cmp	r3, #4
 8003256:	bf08      	it	eq
 8003258:	1aad      	subeq	r5, r5, r2
 800325a:	68a3      	ldr	r3, [r4, #8]
 800325c:	6922      	ldr	r2, [r4, #16]
 800325e:	bf0c      	ite	eq
 8003260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003264:	2500      	movne	r5, #0
 8003266:	4293      	cmp	r3, r2
 8003268:	bfc4      	itt	gt
 800326a:	1a9b      	subgt	r3, r3, r2
 800326c:	18ed      	addgt	r5, r5, r3
 800326e:	2600      	movs	r6, #0
 8003270:	341a      	adds	r4, #26
 8003272:	42b5      	cmp	r5, r6
 8003274:	d11a      	bne.n	80032ac <_printf_common+0xc8>
 8003276:	2000      	movs	r0, #0
 8003278:	e008      	b.n	800328c <_printf_common+0xa8>
 800327a:	2301      	movs	r3, #1
 800327c:	4652      	mov	r2, sl
 800327e:	4649      	mov	r1, r9
 8003280:	4638      	mov	r0, r7
 8003282:	47c0      	blx	r8
 8003284:	3001      	adds	r0, #1
 8003286:	d103      	bne.n	8003290 <_printf_common+0xac>
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003290:	3501      	adds	r5, #1
 8003292:	e7c6      	b.n	8003222 <_printf_common+0x3e>
 8003294:	18e1      	adds	r1, r4, r3
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	2030      	movs	r0, #48	; 0x30
 800329a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800329e:	4422      	add	r2, r4
 80032a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032a8:	3302      	adds	r3, #2
 80032aa:	e7c7      	b.n	800323c <_printf_common+0x58>
 80032ac:	2301      	movs	r3, #1
 80032ae:	4622      	mov	r2, r4
 80032b0:	4649      	mov	r1, r9
 80032b2:	4638      	mov	r0, r7
 80032b4:	47c0      	blx	r8
 80032b6:	3001      	adds	r0, #1
 80032b8:	d0e6      	beq.n	8003288 <_printf_common+0xa4>
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7d9      	b.n	8003272 <_printf_common+0x8e>
	...

080032c0 <_printf_i>:
 80032c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c4:	460c      	mov	r4, r1
 80032c6:	4691      	mov	r9, r2
 80032c8:	7e27      	ldrb	r7, [r4, #24]
 80032ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032cc:	2f78      	cmp	r7, #120	; 0x78
 80032ce:	4680      	mov	r8, r0
 80032d0:	469a      	mov	sl, r3
 80032d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032d6:	d807      	bhi.n	80032e8 <_printf_i+0x28>
 80032d8:	2f62      	cmp	r7, #98	; 0x62
 80032da:	d80a      	bhi.n	80032f2 <_printf_i+0x32>
 80032dc:	2f00      	cmp	r7, #0
 80032de:	f000 80d8 	beq.w	8003492 <_printf_i+0x1d2>
 80032e2:	2f58      	cmp	r7, #88	; 0x58
 80032e4:	f000 80a3 	beq.w	800342e <_printf_i+0x16e>
 80032e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032f0:	e03a      	b.n	8003368 <_printf_i+0xa8>
 80032f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032f6:	2b15      	cmp	r3, #21
 80032f8:	d8f6      	bhi.n	80032e8 <_printf_i+0x28>
 80032fa:	a001      	add	r0, pc, #4	; (adr r0, 8003300 <_printf_i+0x40>)
 80032fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003300:	08003359 	.word	0x08003359
 8003304:	0800336d 	.word	0x0800336d
 8003308:	080032e9 	.word	0x080032e9
 800330c:	080032e9 	.word	0x080032e9
 8003310:	080032e9 	.word	0x080032e9
 8003314:	080032e9 	.word	0x080032e9
 8003318:	0800336d 	.word	0x0800336d
 800331c:	080032e9 	.word	0x080032e9
 8003320:	080032e9 	.word	0x080032e9
 8003324:	080032e9 	.word	0x080032e9
 8003328:	080032e9 	.word	0x080032e9
 800332c:	08003479 	.word	0x08003479
 8003330:	0800339d 	.word	0x0800339d
 8003334:	0800345b 	.word	0x0800345b
 8003338:	080032e9 	.word	0x080032e9
 800333c:	080032e9 	.word	0x080032e9
 8003340:	0800349b 	.word	0x0800349b
 8003344:	080032e9 	.word	0x080032e9
 8003348:	0800339d 	.word	0x0800339d
 800334c:	080032e9 	.word	0x080032e9
 8003350:	080032e9 	.word	0x080032e9
 8003354:	08003463 	.word	0x08003463
 8003358:	680b      	ldr	r3, [r1, #0]
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	600a      	str	r2, [r1, #0]
 8003360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003368:	2301      	movs	r3, #1
 800336a:	e0a3      	b.n	80034b4 <_printf_i+0x1f4>
 800336c:	6825      	ldr	r5, [r4, #0]
 800336e:	6808      	ldr	r0, [r1, #0]
 8003370:	062e      	lsls	r6, r5, #24
 8003372:	f100 0304 	add.w	r3, r0, #4
 8003376:	d50a      	bpl.n	800338e <_printf_i+0xce>
 8003378:	6805      	ldr	r5, [r0, #0]
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	2d00      	cmp	r5, #0
 800337e:	da03      	bge.n	8003388 <_printf_i+0xc8>
 8003380:	232d      	movs	r3, #45	; 0x2d
 8003382:	426d      	negs	r5, r5
 8003384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003388:	485e      	ldr	r0, [pc, #376]	; (8003504 <_printf_i+0x244>)
 800338a:	230a      	movs	r3, #10
 800338c:	e019      	b.n	80033c2 <_printf_i+0x102>
 800338e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003392:	6805      	ldr	r5, [r0, #0]
 8003394:	600b      	str	r3, [r1, #0]
 8003396:	bf18      	it	ne
 8003398:	b22d      	sxthne	r5, r5
 800339a:	e7ef      	b.n	800337c <_printf_i+0xbc>
 800339c:	680b      	ldr	r3, [r1, #0]
 800339e:	6825      	ldr	r5, [r4, #0]
 80033a0:	1d18      	adds	r0, r3, #4
 80033a2:	6008      	str	r0, [r1, #0]
 80033a4:	0628      	lsls	r0, r5, #24
 80033a6:	d501      	bpl.n	80033ac <_printf_i+0xec>
 80033a8:	681d      	ldr	r5, [r3, #0]
 80033aa:	e002      	b.n	80033b2 <_printf_i+0xf2>
 80033ac:	0669      	lsls	r1, r5, #25
 80033ae:	d5fb      	bpl.n	80033a8 <_printf_i+0xe8>
 80033b0:	881d      	ldrh	r5, [r3, #0]
 80033b2:	4854      	ldr	r0, [pc, #336]	; (8003504 <_printf_i+0x244>)
 80033b4:	2f6f      	cmp	r7, #111	; 0x6f
 80033b6:	bf0c      	ite	eq
 80033b8:	2308      	moveq	r3, #8
 80033ba:	230a      	movne	r3, #10
 80033bc:	2100      	movs	r1, #0
 80033be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033c2:	6866      	ldr	r6, [r4, #4]
 80033c4:	60a6      	str	r6, [r4, #8]
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	bfa2      	ittt	ge
 80033ca:	6821      	ldrge	r1, [r4, #0]
 80033cc:	f021 0104 	bicge.w	r1, r1, #4
 80033d0:	6021      	strge	r1, [r4, #0]
 80033d2:	b90d      	cbnz	r5, 80033d8 <_printf_i+0x118>
 80033d4:	2e00      	cmp	r6, #0
 80033d6:	d04d      	beq.n	8003474 <_printf_i+0x1b4>
 80033d8:	4616      	mov	r6, r2
 80033da:	fbb5 f1f3 	udiv	r1, r5, r3
 80033de:	fb03 5711 	mls	r7, r3, r1, r5
 80033e2:	5dc7      	ldrb	r7, [r0, r7]
 80033e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033e8:	462f      	mov	r7, r5
 80033ea:	42bb      	cmp	r3, r7
 80033ec:	460d      	mov	r5, r1
 80033ee:	d9f4      	bls.n	80033da <_printf_i+0x11a>
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d10b      	bne.n	800340c <_printf_i+0x14c>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	07df      	lsls	r7, r3, #31
 80033f8:	d508      	bpl.n	800340c <_printf_i+0x14c>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	6861      	ldr	r1, [r4, #4]
 80033fe:	4299      	cmp	r1, r3
 8003400:	bfde      	ittt	le
 8003402:	2330      	movle	r3, #48	; 0x30
 8003404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800340c:	1b92      	subs	r2, r2, r6
 800340e:	6122      	str	r2, [r4, #16]
 8003410:	f8cd a000 	str.w	sl, [sp]
 8003414:	464b      	mov	r3, r9
 8003416:	aa03      	add	r2, sp, #12
 8003418:	4621      	mov	r1, r4
 800341a:	4640      	mov	r0, r8
 800341c:	f7ff fee2 	bl	80031e4 <_printf_common>
 8003420:	3001      	adds	r0, #1
 8003422:	d14c      	bne.n	80034be <_printf_i+0x1fe>
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	b004      	add	sp, #16
 800342a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342e:	4835      	ldr	r0, [pc, #212]	; (8003504 <_printf_i+0x244>)
 8003430:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	680e      	ldr	r6, [r1, #0]
 8003438:	061f      	lsls	r7, r3, #24
 800343a:	f856 5b04 	ldr.w	r5, [r6], #4
 800343e:	600e      	str	r6, [r1, #0]
 8003440:	d514      	bpl.n	800346c <_printf_i+0x1ac>
 8003442:	07d9      	lsls	r1, r3, #31
 8003444:	bf44      	itt	mi
 8003446:	f043 0320 	orrmi.w	r3, r3, #32
 800344a:	6023      	strmi	r3, [r4, #0]
 800344c:	b91d      	cbnz	r5, 8003456 <_printf_i+0x196>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	f023 0320 	bic.w	r3, r3, #32
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	2310      	movs	r3, #16
 8003458:	e7b0      	b.n	80033bc <_printf_i+0xfc>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	f043 0320 	orr.w	r3, r3, #32
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	2378      	movs	r3, #120	; 0x78
 8003464:	4828      	ldr	r0, [pc, #160]	; (8003508 <_printf_i+0x248>)
 8003466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800346a:	e7e3      	b.n	8003434 <_printf_i+0x174>
 800346c:	065e      	lsls	r6, r3, #25
 800346e:	bf48      	it	mi
 8003470:	b2ad      	uxthmi	r5, r5
 8003472:	e7e6      	b.n	8003442 <_printf_i+0x182>
 8003474:	4616      	mov	r6, r2
 8003476:	e7bb      	b.n	80033f0 <_printf_i+0x130>
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	6826      	ldr	r6, [r4, #0]
 800347c:	6960      	ldr	r0, [r4, #20]
 800347e:	1d1d      	adds	r5, r3, #4
 8003480:	600d      	str	r5, [r1, #0]
 8003482:	0635      	lsls	r5, r6, #24
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	d501      	bpl.n	800348c <_printf_i+0x1cc>
 8003488:	6018      	str	r0, [r3, #0]
 800348a:	e002      	b.n	8003492 <_printf_i+0x1d2>
 800348c:	0671      	lsls	r1, r6, #25
 800348e:	d5fb      	bpl.n	8003488 <_printf_i+0x1c8>
 8003490:	8018      	strh	r0, [r3, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	6123      	str	r3, [r4, #16]
 8003496:	4616      	mov	r6, r2
 8003498:	e7ba      	b.n	8003410 <_printf_i+0x150>
 800349a:	680b      	ldr	r3, [r1, #0]
 800349c:	1d1a      	adds	r2, r3, #4
 800349e:	600a      	str	r2, [r1, #0]
 80034a0:	681e      	ldr	r6, [r3, #0]
 80034a2:	6862      	ldr	r2, [r4, #4]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7fc feba 	bl	8000220 <memchr>
 80034ac:	b108      	cbz	r0, 80034b2 <_printf_i+0x1f2>
 80034ae:	1b80      	subs	r0, r0, r6
 80034b0:	6060      	str	r0, [r4, #4]
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	6123      	str	r3, [r4, #16]
 80034b6:	2300      	movs	r3, #0
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034bc:	e7a8      	b.n	8003410 <_printf_i+0x150>
 80034be:	6923      	ldr	r3, [r4, #16]
 80034c0:	4632      	mov	r2, r6
 80034c2:	4649      	mov	r1, r9
 80034c4:	4640      	mov	r0, r8
 80034c6:	47d0      	blx	sl
 80034c8:	3001      	adds	r0, #1
 80034ca:	d0ab      	beq.n	8003424 <_printf_i+0x164>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	079b      	lsls	r3, r3, #30
 80034d0:	d413      	bmi.n	80034fa <_printf_i+0x23a>
 80034d2:	68e0      	ldr	r0, [r4, #12]
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	4298      	cmp	r0, r3
 80034d8:	bfb8      	it	lt
 80034da:	4618      	movlt	r0, r3
 80034dc:	e7a4      	b.n	8003428 <_printf_i+0x168>
 80034de:	2301      	movs	r3, #1
 80034e0:	4632      	mov	r2, r6
 80034e2:	4649      	mov	r1, r9
 80034e4:	4640      	mov	r0, r8
 80034e6:	47d0      	blx	sl
 80034e8:	3001      	adds	r0, #1
 80034ea:	d09b      	beq.n	8003424 <_printf_i+0x164>
 80034ec:	3501      	adds	r5, #1
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	9903      	ldr	r1, [sp, #12]
 80034f2:	1a5b      	subs	r3, r3, r1
 80034f4:	42ab      	cmp	r3, r5
 80034f6:	dcf2      	bgt.n	80034de <_printf_i+0x21e>
 80034f8:	e7eb      	b.n	80034d2 <_printf_i+0x212>
 80034fa:	2500      	movs	r5, #0
 80034fc:	f104 0619 	add.w	r6, r4, #25
 8003500:	e7f5      	b.n	80034ee <_printf_i+0x22e>
 8003502:	bf00      	nop
 8003504:	08003b65 	.word	0x08003b65
 8003508:	08003b76 	.word	0x08003b76

0800350c <memmove>:
 800350c:	4288      	cmp	r0, r1
 800350e:	b510      	push	{r4, lr}
 8003510:	eb01 0402 	add.w	r4, r1, r2
 8003514:	d902      	bls.n	800351c <memmove+0x10>
 8003516:	4284      	cmp	r4, r0
 8003518:	4623      	mov	r3, r4
 800351a:	d807      	bhi.n	800352c <memmove+0x20>
 800351c:	1e43      	subs	r3, r0, #1
 800351e:	42a1      	cmp	r1, r4
 8003520:	d008      	beq.n	8003534 <memmove+0x28>
 8003522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800352a:	e7f8      	b.n	800351e <memmove+0x12>
 800352c:	4402      	add	r2, r0
 800352e:	4601      	mov	r1, r0
 8003530:	428a      	cmp	r2, r1
 8003532:	d100      	bne.n	8003536 <memmove+0x2a>
 8003534:	bd10      	pop	{r4, pc}
 8003536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800353a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800353e:	e7f7      	b.n	8003530 <memmove+0x24>

08003540 <_free_r>:
 8003540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003542:	2900      	cmp	r1, #0
 8003544:	d048      	beq.n	80035d8 <_free_r+0x98>
 8003546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800354a:	9001      	str	r0, [sp, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f1a1 0404 	sub.w	r4, r1, #4
 8003552:	bfb8      	it	lt
 8003554:	18e4      	addlt	r4, r4, r3
 8003556:	f000 f8d3 	bl	8003700 <__malloc_lock>
 800355a:	4a20      	ldr	r2, [pc, #128]	; (80035dc <_free_r+0x9c>)
 800355c:	9801      	ldr	r0, [sp, #4]
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	4615      	mov	r5, r2
 8003562:	b933      	cbnz	r3, 8003572 <_free_r+0x32>
 8003564:	6063      	str	r3, [r4, #4]
 8003566:	6014      	str	r4, [r2, #0]
 8003568:	b003      	add	sp, #12
 800356a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800356e:	f000 b8cd 	b.w	800370c <__malloc_unlock>
 8003572:	42a3      	cmp	r3, r4
 8003574:	d90b      	bls.n	800358e <_free_r+0x4e>
 8003576:	6821      	ldr	r1, [r4, #0]
 8003578:	1862      	adds	r2, r4, r1
 800357a:	4293      	cmp	r3, r2
 800357c:	bf04      	itt	eq
 800357e:	681a      	ldreq	r2, [r3, #0]
 8003580:	685b      	ldreq	r3, [r3, #4]
 8003582:	6063      	str	r3, [r4, #4]
 8003584:	bf04      	itt	eq
 8003586:	1852      	addeq	r2, r2, r1
 8003588:	6022      	streq	r2, [r4, #0]
 800358a:	602c      	str	r4, [r5, #0]
 800358c:	e7ec      	b.n	8003568 <_free_r+0x28>
 800358e:	461a      	mov	r2, r3
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b10b      	cbz	r3, 8003598 <_free_r+0x58>
 8003594:	42a3      	cmp	r3, r4
 8003596:	d9fa      	bls.n	800358e <_free_r+0x4e>
 8003598:	6811      	ldr	r1, [r2, #0]
 800359a:	1855      	adds	r5, r2, r1
 800359c:	42a5      	cmp	r5, r4
 800359e:	d10b      	bne.n	80035b8 <_free_r+0x78>
 80035a0:	6824      	ldr	r4, [r4, #0]
 80035a2:	4421      	add	r1, r4
 80035a4:	1854      	adds	r4, r2, r1
 80035a6:	42a3      	cmp	r3, r4
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	d1dd      	bne.n	8003568 <_free_r+0x28>
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	6053      	str	r3, [r2, #4]
 80035b2:	4421      	add	r1, r4
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	e7d7      	b.n	8003568 <_free_r+0x28>
 80035b8:	d902      	bls.n	80035c0 <_free_r+0x80>
 80035ba:	230c      	movs	r3, #12
 80035bc:	6003      	str	r3, [r0, #0]
 80035be:	e7d3      	b.n	8003568 <_free_r+0x28>
 80035c0:	6825      	ldr	r5, [r4, #0]
 80035c2:	1961      	adds	r1, r4, r5
 80035c4:	428b      	cmp	r3, r1
 80035c6:	bf04      	itt	eq
 80035c8:	6819      	ldreq	r1, [r3, #0]
 80035ca:	685b      	ldreq	r3, [r3, #4]
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	bf04      	itt	eq
 80035d0:	1949      	addeq	r1, r1, r5
 80035d2:	6021      	streq	r1, [r4, #0]
 80035d4:	6054      	str	r4, [r2, #4]
 80035d6:	e7c7      	b.n	8003568 <_free_r+0x28>
 80035d8:	b003      	add	sp, #12
 80035da:	bd30      	pop	{r4, r5, pc}
 80035dc:	20000090 	.word	0x20000090

080035e0 <_malloc_r>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	1ccd      	adds	r5, r1, #3
 80035e4:	f025 0503 	bic.w	r5, r5, #3
 80035e8:	3508      	adds	r5, #8
 80035ea:	2d0c      	cmp	r5, #12
 80035ec:	bf38      	it	cc
 80035ee:	250c      	movcc	r5, #12
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	4606      	mov	r6, r0
 80035f4:	db01      	blt.n	80035fa <_malloc_r+0x1a>
 80035f6:	42a9      	cmp	r1, r5
 80035f8:	d903      	bls.n	8003602 <_malloc_r+0x22>
 80035fa:	230c      	movs	r3, #12
 80035fc:	6033      	str	r3, [r6, #0]
 80035fe:	2000      	movs	r0, #0
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003602:	f000 f87d 	bl	8003700 <__malloc_lock>
 8003606:	4921      	ldr	r1, [pc, #132]	; (800368c <_malloc_r+0xac>)
 8003608:	680a      	ldr	r2, [r1, #0]
 800360a:	4614      	mov	r4, r2
 800360c:	b99c      	cbnz	r4, 8003636 <_malloc_r+0x56>
 800360e:	4f20      	ldr	r7, [pc, #128]	; (8003690 <_malloc_r+0xb0>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b923      	cbnz	r3, 800361e <_malloc_r+0x3e>
 8003614:	4621      	mov	r1, r4
 8003616:	4630      	mov	r0, r6
 8003618:	f000 f862 	bl	80036e0 <_sbrk_r>
 800361c:	6038      	str	r0, [r7, #0]
 800361e:	4629      	mov	r1, r5
 8003620:	4630      	mov	r0, r6
 8003622:	f000 f85d 	bl	80036e0 <_sbrk_r>
 8003626:	1c43      	adds	r3, r0, #1
 8003628:	d123      	bne.n	8003672 <_malloc_r+0x92>
 800362a:	230c      	movs	r3, #12
 800362c:	6033      	str	r3, [r6, #0]
 800362e:	4630      	mov	r0, r6
 8003630:	f000 f86c 	bl	800370c <__malloc_unlock>
 8003634:	e7e3      	b.n	80035fe <_malloc_r+0x1e>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	1b5b      	subs	r3, r3, r5
 800363a:	d417      	bmi.n	800366c <_malloc_r+0x8c>
 800363c:	2b0b      	cmp	r3, #11
 800363e:	d903      	bls.n	8003648 <_malloc_r+0x68>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	441c      	add	r4, r3
 8003644:	6025      	str	r5, [r4, #0]
 8003646:	e004      	b.n	8003652 <_malloc_r+0x72>
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	42a2      	cmp	r2, r4
 800364c:	bf0c      	ite	eq
 800364e:	600b      	streq	r3, [r1, #0]
 8003650:	6053      	strne	r3, [r2, #4]
 8003652:	4630      	mov	r0, r6
 8003654:	f000 f85a 	bl	800370c <__malloc_unlock>
 8003658:	f104 000b 	add.w	r0, r4, #11
 800365c:	1d23      	adds	r3, r4, #4
 800365e:	f020 0007 	bic.w	r0, r0, #7
 8003662:	1ac2      	subs	r2, r0, r3
 8003664:	d0cc      	beq.n	8003600 <_malloc_r+0x20>
 8003666:	1a1b      	subs	r3, r3, r0
 8003668:	50a3      	str	r3, [r4, r2]
 800366a:	e7c9      	b.n	8003600 <_malloc_r+0x20>
 800366c:	4622      	mov	r2, r4
 800366e:	6864      	ldr	r4, [r4, #4]
 8003670:	e7cc      	b.n	800360c <_malloc_r+0x2c>
 8003672:	1cc4      	adds	r4, r0, #3
 8003674:	f024 0403 	bic.w	r4, r4, #3
 8003678:	42a0      	cmp	r0, r4
 800367a:	d0e3      	beq.n	8003644 <_malloc_r+0x64>
 800367c:	1a21      	subs	r1, r4, r0
 800367e:	4630      	mov	r0, r6
 8003680:	f000 f82e 	bl	80036e0 <_sbrk_r>
 8003684:	3001      	adds	r0, #1
 8003686:	d1dd      	bne.n	8003644 <_malloc_r+0x64>
 8003688:	e7cf      	b.n	800362a <_malloc_r+0x4a>
 800368a:	bf00      	nop
 800368c:	20000090 	.word	0x20000090
 8003690:	20000094 	.word	0x20000094

08003694 <_realloc_r>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	4607      	mov	r7, r0
 8003698:	4614      	mov	r4, r2
 800369a:	460e      	mov	r6, r1
 800369c:	b921      	cbnz	r1, 80036a8 <_realloc_r+0x14>
 800369e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036a2:	4611      	mov	r1, r2
 80036a4:	f7ff bf9c 	b.w	80035e0 <_malloc_r>
 80036a8:	b922      	cbnz	r2, 80036b4 <_realloc_r+0x20>
 80036aa:	f7ff ff49 	bl	8003540 <_free_r>
 80036ae:	4625      	mov	r5, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b4:	f000 f830 	bl	8003718 <_malloc_usable_size_r>
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d20f      	bcs.n	80036dc <_realloc_r+0x48>
 80036bc:	4621      	mov	r1, r4
 80036be:	4638      	mov	r0, r7
 80036c0:	f7ff ff8e 	bl	80035e0 <_malloc_r>
 80036c4:	4605      	mov	r5, r0
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d0f2      	beq.n	80036b0 <_realloc_r+0x1c>
 80036ca:	4631      	mov	r1, r6
 80036cc:	4622      	mov	r2, r4
 80036ce:	f7ff fbf7 	bl	8002ec0 <memcpy>
 80036d2:	4631      	mov	r1, r6
 80036d4:	4638      	mov	r0, r7
 80036d6:	f7ff ff33 	bl	8003540 <_free_r>
 80036da:	e7e9      	b.n	80036b0 <_realloc_r+0x1c>
 80036dc:	4635      	mov	r5, r6
 80036de:	e7e7      	b.n	80036b0 <_realloc_r+0x1c>

080036e0 <_sbrk_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	; (80036fc <_sbrk_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7ff fa7a 	bl	8002be4 <_sbrk>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_sbrk_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_sbrk_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	200001e4 	.word	0x200001e4

08003700 <__malloc_lock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_lock+0x8>)
 8003702:	f000 b811 	b.w	8003728 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	200001ec 	.word	0x200001ec

0800370c <__malloc_unlock>:
 800370c:	4801      	ldr	r0, [pc, #4]	; (8003714 <__malloc_unlock+0x8>)
 800370e:	f000 b80c 	b.w	800372a <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	200001ec 	.word	0x200001ec

08003718 <_malloc_usable_size_r>:
 8003718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371c:	1f18      	subs	r0, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfbc      	itt	lt
 8003722:	580b      	ldrlt	r3, [r1, r0]
 8003724:	18c0      	addlt	r0, r0, r3
 8003726:	4770      	bx	lr

08003728 <__retarget_lock_acquire_recursive>:
 8003728:	4770      	bx	lr

0800372a <__retarget_lock_release_recursive>:
 800372a:	4770      	bx	lr

0800372c <_init>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr

08003738 <_fini>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	bf00      	nop
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr
