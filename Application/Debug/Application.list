
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002648  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002824  08002824  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800282c  0800282c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002840  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002840  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc0  00000000  00000000  00028a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020910  00000000  00000000  0002b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a07b  00000000  00000000  0004bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b33  00000000  00000000  00055e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011994e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d5c  00000000  00000000  001199a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080027f4 	.word	0x080027f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080027f4 	.word	0x080027f4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_Init+0x40>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_Init+0x40>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x40>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f92b 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f002 f81a 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f943 	bl	80007ea <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f90b 	bl	8000796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff ff8e 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff29 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff3e 	bl	8000628 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff8e 	bl	80006d4 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff31 	bl	8000644 <__NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffa2 	bl	800073c <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b02      	cmp	r3, #2
 8000814:	d004      	beq.n	8000820 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e00c      	b.n	800083a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2205      	movs	r2, #5
 8000824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0201 	bic.w	r2, r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	e165      	b.n	8000b30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 8154 	bne.w	8000b2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d00b      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d007      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000896:	2b11      	cmp	r3, #17
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d130      	bne.n	8000904 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d003      	beq.n	8000944 <HAL_GPIO_Init+0xfc>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b12      	cmp	r3, #18
 8000942:	d123      	bne.n	800098c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	08da      	lsrs	r2, r3, #3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3208      	adds	r2, #8
 800094c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	691a      	ldr	r2, [r3, #16]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	69b9      	ldr	r1, [r7, #24]
 8000988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0203 	and.w	r2, r3, #3
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80ae 	beq.w	8000b2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <HAL_GPIO_Init+0x300>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a5c      	ldr	r2, [pc, #368]	; (8000b48 <HAL_GPIO_Init+0x300>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <HAL_GPIO_Init+0x300>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ea:	4a58      	ldr	r2, [pc, #352]	; (8000b4c <HAL_GPIO_Init+0x304>)
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4f      	ldr	r2, [pc, #316]	; (8000b50 <HAL_GPIO_Init+0x308>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d025      	beq.n	8000a62 <HAL_GPIO_Init+0x21a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <HAL_GPIO_Init+0x30c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d01f      	beq.n	8000a5e <HAL_GPIO_Init+0x216>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <HAL_GPIO_Init+0x310>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d019      	beq.n	8000a5a <HAL_GPIO_Init+0x212>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <HAL_GPIO_Init+0x314>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0x20e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <HAL_GPIO_Init+0x318>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d00d      	beq.n	8000a52 <HAL_GPIO_Init+0x20a>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x31c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d007      	beq.n	8000a4e <HAL_GPIO_Init+0x206>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x320>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_GPIO_Init+0x202>
 8000a46:	2306      	movs	r3, #6
 8000a48:	e00c      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	e00a      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e008      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a52:	2304      	movs	r3, #4
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e004      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e002      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x21c>
 8000a62:	2300      	movs	r3, #0
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	f002 0203 	and.w	r2, r2, #3
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a74:	4935      	ldr	r1, [pc, #212]	; (8000b4c <HAL_GPIO_Init+0x304>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a82:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa6:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <HAL_GPIO_Init+0x324>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	f67f ae96 	bls.w	8000864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40013c00 	.word	0x40013c00

08000b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b80:	787b      	ldrb	r3, [r7, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b8c:	e003      	b.n	8000b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_PWREx_EnableOverDrive+0x94>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bd0:	f7ff fcfa 	bl	80005c8 <HAL_GetTick>
 8000bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bd6:	e009      	b.n	8000bec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcf6 	bl	80005c8 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be6:	d901      	bls.n	8000bec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e01f      	b.n	8000c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d1ee      	bne.n	8000bd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c00:	f7ff fce2 	bl	80005c8 <HAL_GetTick>
 8000c04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c06:	e009      	b.n	8000c1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c08:	f7ff fcde 	bl	80005c8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c16:	d901      	bls.n	8000c1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e007      	b.n	8000c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c28:	d1ee      	bne.n	8000c08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	420e0040 	.word	0x420e0040
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	420e0044 	.word	0x420e0044

08000c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e0cc      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 030f 	and.w	r3, r3, #15
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d90c      	bls.n	8000c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d001      	beq.n	8000c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0b8      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d020      	beq.n	8000cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c98:	4b59      	ldr	r3, [pc, #356]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a58      	ldr	r2, [pc, #352]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cb0:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4a52      	ldr	r2, [pc, #328]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cbc:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	494d      	ldr	r1, [pc, #308]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d044      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d107      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d119      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e07f      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d003      	beq.n	8000d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d107      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d02:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e06f      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d12:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e067      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f023 0203 	bic.w	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4934      	ldr	r1, [pc, #208]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d34:	f7ff fc48 	bl	80005c8 <HAL_GetTick>
 8000d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d3a:	e00a      	b.n	8000d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f7ff fc44 	bl	80005c8 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e04f      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 020c 	and.w	r2, r3, #12
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d1eb      	bne.n	8000d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d20c      	bcs.n	8000d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_RCC_ClockConfig+0x1b8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d001      	beq.n	8000d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e032      	b.n	8000df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4916      	ldr	r1, [pc, #88]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	490e      	ldr	r1, [pc, #56]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dca:	f000 f855 	bl	8000e78 <HAL_RCC_GetSysClockFreq>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	091b      	lsrs	r3, r3, #4
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	490a      	ldr	r1, [pc, #40]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000ddc:	5ccb      	ldrb	r3, [r1, r3]
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1c8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fba8 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00
 8000e00:	40023800 	.word	0x40023800
 8000e04:	0800280c 	.word	0x0800280c
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_RCC_GetHCLKFreq>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	0a9b      	lsrs	r3, r3, #10
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	4903      	ldr	r1, [pc, #12]	; (8000e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e3e:	5ccb      	ldrb	r3, [r1, r3]
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	0800281c 	.word	0x0800281c

08000e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e54:	f7ff ffdc 	bl	8000e10 <HAL_RCC_GetHCLKFreq>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	0b5b      	lsrs	r3, r3, #13
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	4903      	ldr	r1, [pc, #12]	; (8000e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	0800281c 	.word	0x0800281c

08000e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e7c:	b088      	sub	sp, #32
 8000e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e94:	4bce      	ldr	r3, [pc, #824]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	f200 818d 	bhi.w	80011bc <HAL_RCC_GetSysClockFreq+0x344>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_RCC_GetSysClockFreq+0x30>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000edd 	.word	0x08000edd
 8000eac:	080011bd 	.word	0x080011bd
 8000eb0:	080011bd 	.word	0x080011bd
 8000eb4:	080011bd 	.word	0x080011bd
 8000eb8:	08000ee3 	.word	0x08000ee3
 8000ebc:	080011bd 	.word	0x080011bd
 8000ec0:	080011bd 	.word	0x080011bd
 8000ec4:	080011bd 	.word	0x080011bd
 8000ec8:	08000ee9 	.word	0x08000ee9
 8000ecc:	080011bd 	.word	0x080011bd
 8000ed0:	080011bd 	.word	0x080011bd
 8000ed4:	080011bd 	.word	0x080011bd
 8000ed8:	0800105d 	.word	0x0800105d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000edc:	4bbd      	ldr	r3, [pc, #756]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8000ede:	61bb      	str	r3, [r7, #24]
       break;
 8000ee0:	e16f      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ee2:	4bbd      	ldr	r3, [pc, #756]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x360>)
 8000ee4:	61bb      	str	r3, [r7, #24]
      break;
 8000ee6:	e16c      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ee8:	4bb9      	ldr	r3, [pc, #740]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ef0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ef2:	4bb7      	ldr	r3, [pc, #732]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d053      	beq.n	8000fa6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efe:	4bb4      	ldr	r3, [pc, #720]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	461a      	mov	r2, r3
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f0e:	f04f 0100 	mov.w	r1, #0
 8000f12:	ea02 0400 	and.w	r4, r2, r0
 8000f16:	603c      	str	r4, [r7, #0]
 8000f18:	400b      	ands	r3, r1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000f20:	4620      	mov	r0, r4
 8000f22:	4629      	mov	r1, r5
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	014b      	lsls	r3, r1, #5
 8000f2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f32:	0142      	lsls	r2, r0, #5
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	4623      	mov	r3, r4
 8000f3a:	1ac0      	subs	r0, r0, r3
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	018b      	lsls	r3, r1, #6
 8000f4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f50:	0182      	lsls	r2, r0, #6
 8000f52:	1a12      	subs	r2, r2, r0
 8000f54:	eb63 0301 	sbc.w	r3, r3, r1
 8000f58:	f04f 0000 	mov.w	r0, #0
 8000f5c:	f04f 0100 	mov.w	r1, #0
 8000f60:	00d9      	lsls	r1, r3, #3
 8000f62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f66:	00d0      	lsls	r0, r2, #3
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	1852      	adds	r2, r2, r1
 8000f70:	4629      	mov	r1, r5
 8000f72:	eb43 0101 	adc.w	r1, r3, r1
 8000f76:	460b      	mov	r3, r1
 8000f78:	f04f 0000 	mov.w	r0, #0
 8000f7c:	f04f 0100 	mov.w	r1, #0
 8000f80:	0259      	lsls	r1, r3, #9
 8000f82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8000f86:	0250      	lsls	r0, r2, #9
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	f7ff f934 	bl	8000204 <__aeabi_uldivmod>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	e04c      	b.n	8001040 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa6:	4b8a      	ldr	r3, [pc, #552]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	461a      	mov	r2, r3
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000fb6:	f04f 0100 	mov.w	r1, #0
 8000fba:	ea02 0a00 	and.w	sl, r2, r0
 8000fbe:	ea03 0b01 	and.w	fp, r3, r1
 8000fc2:	4650      	mov	r0, sl
 8000fc4:	4659      	mov	r1, fp
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	014b      	lsls	r3, r1, #5
 8000fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fd4:	0142      	lsls	r2, r0, #5
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	ebb0 000a 	subs.w	r0, r0, sl
 8000fde:	eb61 010b 	sbc.w	r1, r1, fp
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	018b      	lsls	r3, r1, #6
 8000fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000ff0:	0182      	lsls	r2, r0, #6
 8000ff2:	1a12      	subs	r2, r2, r0
 8000ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	f04f 0100 	mov.w	r1, #0
 8001000:	00d9      	lsls	r1, r3, #3
 8001002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001006:	00d0      	lsls	r0, r2, #3
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	eb12 020a 	adds.w	r2, r2, sl
 8001010:	eb43 030b 	adc.w	r3, r3, fp
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	f04f 0100 	mov.w	r1, #0
 800101c:	0299      	lsls	r1, r3, #10
 800101e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001022:	0290      	lsls	r0, r2, #10
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	461a      	mov	r2, r3
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	f7ff f8e6 	bl	8000204 <__aeabi_uldivmod>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4613      	mov	r3, r2
 800103e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001040:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	0c1b      	lsrs	r3, r3, #16
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	3301      	adds	r3, #1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fbb2 f3f3 	udiv	r3, r2, r3
 8001058:	61bb      	str	r3, [r7, #24]
      break;
 800105a:	e0b2      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001064:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001066:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d04d      	beq.n	800110e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	099b      	lsrs	r3, r3, #6
 8001078:	461a      	mov	r2, r3
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001082:	f04f 0100 	mov.w	r1, #0
 8001086:	ea02 0800 	and.w	r8, r2, r0
 800108a:	ea03 0901 	and.w	r9, r3, r1
 800108e:	4640      	mov	r0, r8
 8001090:	4649      	mov	r1, r9
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	014b      	lsls	r3, r1, #5
 800109c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80010a0:	0142      	lsls	r2, r0, #5
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	ebb0 0008 	subs.w	r0, r0, r8
 80010aa:	eb61 0109 	sbc.w	r1, r1, r9
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	018b      	lsls	r3, r1, #6
 80010b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80010bc:	0182      	lsls	r2, r0, #6
 80010be:	1a12      	subs	r2, r2, r0
 80010c0:	eb63 0301 	sbc.w	r3, r3, r1
 80010c4:	f04f 0000 	mov.w	r0, #0
 80010c8:	f04f 0100 	mov.w	r1, #0
 80010cc:	00d9      	lsls	r1, r3, #3
 80010ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80010d2:	00d0      	lsls	r0, r2, #3
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	eb12 0208 	adds.w	r2, r2, r8
 80010dc:	eb43 0309 	adc.w	r3, r3, r9
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	f04f 0100 	mov.w	r1, #0
 80010e8:	0259      	lsls	r1, r3, #9
 80010ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80010ee:	0250      	lsls	r0, r2, #9
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	f7ff f880 	bl	8000204 <__aeabi_uldivmod>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4613      	mov	r3, r2
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e04a      	b.n	80011a4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	461a      	mov	r2, r3
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	ea02 0400 	and.w	r4, r2, r0
 8001126:	ea03 0501 	and.w	r5, r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	014b      	lsls	r3, r1, #5
 8001138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800113c:	0142      	lsls	r2, r0, #5
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	1b00      	subs	r0, r0, r4
 8001144:	eb61 0105 	sbc.w	r1, r1, r5
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	018b      	lsls	r3, r1, #6
 8001152:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001156:	0182      	lsls	r2, r0, #6
 8001158:	1a12      	subs	r2, r2, r0
 800115a:	eb63 0301 	sbc.w	r3, r3, r1
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	f04f 0100 	mov.w	r1, #0
 8001166:	00d9      	lsls	r1, r3, #3
 8001168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800116c:	00d0      	lsls	r0, r2, #3
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	1912      	adds	r2, r2, r4
 8001174:	eb45 0303 	adc.w	r3, r5, r3
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	0299      	lsls	r1, r3, #10
 8001182:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001186:	0290      	lsls	r0, r2, #10
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	461a      	mov	r2, r3
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	f7ff f834 	bl	8000204 <__aeabi_uldivmod>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4613      	mov	r3, r2
 80011a2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	0f1b      	lsrs	r3, r3, #28
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	61bb      	str	r3, [r7, #24]
      break;
 80011ba:	e002      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011be:	61bb      	str	r3, [r7, #24]
      break;
 80011c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011c2:	69bb      	ldr	r3, [r7, #24]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	00f42400 	.word	0x00f42400
 80011d8:	007a1200 	.word	0x007a1200

080011dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8083 	beq.w	80012fc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011f6:	4b95      	ldr	r3, [pc, #596]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d019      	beq.n	8001236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001202:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800120e:	4b8f      	ldr	r3, [pc, #572]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121c:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001224:	2b0c      	cmp	r3, #12
 8001226:	d112      	bne.n	800124e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d05b      	beq.n	80012fa <HAL_RCC_OscConfig+0x11e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d157      	bne.n	80012fa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e216      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x8a>
 8001258:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a7b      	ldr	r2, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e01d      	b.n	80012a2 <HAL_RCC_OscConfig+0xc6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0xae>
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a72      	ldr	r2, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0xc6>
 800128a:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6f      	ldr	r2, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6c      	ldr	r2, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d013      	beq.n	80012d2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff f98d 	bl	80005c8 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b2:	f7ff f989 	bl	80005c8 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1db      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0xd6>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff f979 	bl	80005c8 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff f975 	bl	80005c8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e1c7      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ec:	4b57      	ldr	r3, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0xfe>
 80012f8:	e000      	b.n	80012fc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d06f      	beq.n	80013e8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800131c:	2b08      	cmp	r3, #8
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d11c      	bne.n	8001372 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d116      	bne.n	8001372 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x180>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e18f      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4938      	ldr	r1, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001370:	e03a      	b.n	80013e8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d020      	beq.n	80013bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff f922 	bl	80005c8 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff f91e 	bl	80005c8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e170      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4925      	ldr	r1, [pc, #148]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
 80013ba:	e015      	b.n	80013e8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff f901 	bl	80005c8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff f8fd 	bl	80005c8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e14f      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d037      	beq.n	8001464 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d016      	beq.n	800142a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_RCC_OscConfig+0x278>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff f8e1 	bl	80005c8 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff f8dd 	bl	80005c8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e12f      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_OscConfig+0x270>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x22e>
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x278>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff f8ca 	bl	80005c8 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001436:	e00f      	b.n	8001458 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff f8c6 	bl	80005c8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d908      	bls.n	8001458 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e118      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	42470000 	.word	0x42470000
 8001454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b8a      	ldr	r3, [pc, #552]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e9      	bne.n	8001438 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8097 	beq.w	80015a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b83      	ldr	r3, [pc, #524]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b7f      	ldr	r3, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a7e      	ldr	r2, [pc, #504]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_RCC_OscConfig+0x4ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b76      	ldr	r3, [pc, #472]	; (8001688 <HAL_RCC_OscConfig+0x4ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x4ac>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f885 	bl	80005c8 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff f881 	bl	80005c8 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0d3      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x4ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x31a>
 80014e8:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a65      	ldr	r2, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e01c      	b.n	8001530 <HAL_RCC_OscConfig+0x354>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x33c>
 80014fe:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a60      	ldr	r2, [pc, #384]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	4b5e      	ldr	r3, [pc, #376]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a5d      	ldr	r2, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0x354>
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a59      	ldr	r2, [pc, #356]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a56      	ldr	r2, [pc, #344]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d015      	beq.n	8001564 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff f846 	bl	80005c8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff f842 	bl	80005c8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e092      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ee      	beq.n	8001540 <HAL_RCC_OscConfig+0x364>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff f830 	bl	80005c8 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff f82c 	bl	80005c8 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e07c      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ee      	bne.n	800156c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d068      	beq.n	800167a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d060      	beq.n	8001676 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d145      	bne.n	8001648 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_RCC_OscConfig+0x4b0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff f801 	bl	80005c8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7fe fffd 	bl	80005c8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e04f      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	019b      	lsls	r3, r3, #6
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	071b      	lsls	r3, r3, #28
 8001614:	491b      	ldr	r1, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_RCC_OscConfig+0x4b0>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7fe ffd2 	bl	80005c8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7fe ffce 	bl	80005c8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x44c>
 8001646:	e018      	b.n	800167a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_RCC_OscConfig+0x4b0>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7fe ffbb 	bl	80005c8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7fe ffb7 	bl	80005c8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e009      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x4a8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x47a>
 8001674:	e001      	b.n	800167a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000
 800168c:	42470060 	.word	0x42470060

08001690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e03f      	b.n	8001722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fff6 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	; 0x24
 80016c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa69 	bl	8001bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_UART_IRQHandler+0x52>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f996 	bl	8001aa8 <UART_Receive_IT>
      return;
 800177c:	e0d0      	b.n	8001920 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b0 	beq.w	80018e6 <HAL_UART_IRQHandler+0x1ba>
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_UART_IRQHandler+0x70>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a5 	beq.w	80018e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <HAL_UART_IRQHandler+0x90>
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_UART_IRQHandler+0xb0>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	f043 0202 	orr.w	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_UART_IRQHandler+0xd0>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	f043 0204 	orr.w	r2, r3, #4
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <HAL_UART_IRQHandler+0xfa>
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <HAL_UART_IRQHandler+0xee>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	f043 0208 	orr.w	r2, r3, #8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d077      	beq.n	800191e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_UART_IRQHandler+0x11c>
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f930 	bl	8001aa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_UART_IRQHandler+0x144>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d031      	beq.n	80018d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f879 	bl	8001968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d123      	bne.n	80018cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001892:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_UART_IRQHandler+0x1fc>)
 80018a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe ffaa 	bl	8000802 <HAL_DMA_Abort_IT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018be:	4610      	mov	r0, r2
 80018c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018c2:	e00e      	b.n	80018e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f845 	bl	8001954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ca:	e00a      	b.n	80018e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f841 	bl	8001954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018d2:	e006      	b.n	80018e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f83d 	bl	8001954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80018e0:	e01d      	b.n	800191e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018e2:	bf00      	nop
    return;
 80018e4:	e01b      	b.n	800191e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_UART_IRQHandler+0x1d6>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f866 	bl	80019cc <UART_Transmit_IT>
    return;
 8001900:	e00e      	b.n	8001920 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <HAL_UART_IRQHandler+0x1f4>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f8ae 	bl	8001a78 <UART_EndTransmit_IT>
    return;
 800191c:	e000      	b.n	8001920 <HAL_UART_IRQHandler+0x1f4>
    return;
 800191e:	bf00      	nop
  }
}
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	080019a5 	.word	0x080019a5

0800192c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800197e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff ffc8 	bl	8001954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b21      	cmp	r3, #33	; 0x21
 80019de:	d144      	bne.n	8001a6a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e8:	d11a      	bne.n	8001a20 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	1c9a      	adds	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	621a      	str	r2, [r3, #32]
 8001a12:	e00e      	b.n	8001a32 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	621a      	str	r2, [r3, #32]
 8001a1e:	e008      	b.n	8001a32 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	1c59      	adds	r1, r3, #1
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6211      	str	r1, [r2, #32]
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001a6a:	2302      	movs	r3, #2
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b22      	cmp	r3, #34	; 0x22
 8001aba:	d171      	bne.n	8001ba0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac4:	d123      	bne.n	8001b0e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10e      	bne.n	8001af2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	1c9a      	adds	r2, r3, #2
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
 8001af0:	e029      	b.n	8001b46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b0c:	e01b      	b.n	8001b46 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10a      	bne.n	8001b2c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6858      	ldr	r0, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6291      	str	r1, [r2, #40]	; 0x28
 8001b26:	b2c2      	uxtb	r2, r0
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e00c      	b.n	8001b46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	1c58      	adds	r0, r3, #1
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	6288      	str	r0, [r1, #40]	; 0x28
 8001b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4619      	mov	r1, r3
 8001b54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d120      	bne.n	8001b9c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0220 	bic.w	r2, r2, #32
 8001b68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fed4 	bl	8001940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e002      	b.n	8001ba2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb0:	b0bd      	sub	sp, #244	; 0xf4
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	ea40 0301 	orr.w	r3, r0, r1
 8001bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8001bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c04:	f021 010c 	bic.w	r1, r1, #12
 8001c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c12:	430b      	orrs	r3, r1
 8001c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c26:	6999      	ldr	r1, [r3, #24]
 8001c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	ea40 0301 	orr.w	r3, r0, r1
 8001c32:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3e:	f040 81a5 	bne.w	8001f8c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4bcd      	ldr	r3, [pc, #820]	; (8001f80 <UART_SetConfig+0x3d4>)
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d006      	beq.n	8001c5c <UART_SetConfig+0xb0>
 8001c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4bcb      	ldr	r3, [pc, #812]	; (8001f84 <UART_SetConfig+0x3d8>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	f040 80cb 	bne.w	8001df2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c5c:	f7ff f8f8 	bl	8000e50 <HAL_RCC_GetPCLK2Freq>
 8001c60:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c68:	461c      	mov	r4, r3
 8001c6a:	f04f 0500 	mov.w	r5, #0
 8001c6e:	4622      	mov	r2, r4
 8001c70:	462b      	mov	r3, r5
 8001c72:	1891      	adds	r1, r2, r2
 8001c74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001c78:	415b      	adcs	r3, r3
 8001c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c82:	1912      	adds	r2, r2, r4
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	00d9      	lsls	r1, r3, #3
 8001c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c96:	00d0      	lsls	r0, r2, #3
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	1911      	adds	r1, r2, r4
 8001c9e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001ca2:	416b      	adcs	r3, r5
 8001ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	1891      	adds	r1, r2, r2
 8001cb6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001cba:	415b      	adcs	r3, r3
 8001cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cc0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001cc4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001cc8:	f7fe fa9c 	bl	8000204 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4bad      	ldr	r3, [pc, #692]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	011e      	lsls	r6, r3, #4
 8001cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cde:	461c      	mov	r4, r3
 8001ce0:	f04f 0500 	mov.w	r5, #0
 8001ce4:	4622      	mov	r2, r4
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	1891      	adds	r1, r2, r2
 8001cea:	67b9      	str	r1, [r7, #120]	; 0x78
 8001cec:	415b      	adcs	r3, r3
 8001cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cf0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001cf4:	1912      	adds	r2, r2, r4
 8001cf6:	eb45 0303 	adc.w	r3, r5, r3
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	00d9      	lsls	r1, r3, #3
 8001d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d08:	00d0      	lsls	r0, r2, #3
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	1911      	adds	r1, r2, r4
 8001d10:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001d14:	416b      	adcs	r3, r5
 8001d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	1891      	adds	r1, r2, r2
 8001d28:	6739      	str	r1, [r7, #112]	; 0x70
 8001d2a:	415b      	adcs	r3, r3
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d32:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001d36:	f7fe fa65 	bl	8000204 <__aeabi_uldivmod>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001d40:	fba3 1302 	umull	r1, r3, r3, r2
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	2164      	movs	r1, #100	; 0x64
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	3332      	adds	r3, #50	; 0x32
 8001d52:	4a8d      	ldr	r2, [pc, #564]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d60:	441e      	add	r6, r3
 8001d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d66:	4618      	mov	r0, r3
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	1894      	adds	r4, r2, r2
 8001d72:	66bc      	str	r4, [r7, #104]	; 0x68
 8001d74:	415b      	adcs	r3, r3
 8001d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d7c:	1812      	adds	r2, r2, r0
 8001d7e:	eb41 0303 	adc.w	r3, r1, r3
 8001d82:	f04f 0400 	mov.w	r4, #0
 8001d86:	f04f 0500 	mov.w	r5, #0
 8001d8a:	00dd      	lsls	r5, r3, #3
 8001d8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001d90:	00d4      	lsls	r4, r2, #3
 8001d92:	4622      	mov	r2, r4
 8001d94:	462b      	mov	r3, r5
 8001d96:	1814      	adds	r4, r2, r0
 8001d98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001d9c:	414b      	adcs	r3, r1
 8001d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	1891      	adds	r1, r2, r2
 8001db0:	6639      	str	r1, [r7, #96]	; 0x60
 8001db2:	415b      	adcs	r3, r3
 8001db4:	667b      	str	r3, [r7, #100]	; 0x64
 8001db6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dbe:	f7fe fa21 	bl	8000204 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	2164      	movs	r1, #100	; 0x64
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	4a6b      	ldr	r2, [pc, #428]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4432      	add	r2, r6
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	e26d      	b.n	80022ce <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff f819 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8001df6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dfe:	461c      	mov	r4, r3
 8001e00:	f04f 0500 	mov.w	r5, #0
 8001e04:	4622      	mov	r2, r4
 8001e06:	462b      	mov	r3, r5
 8001e08:	1891      	adds	r1, r2, r2
 8001e0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e0c:	415b      	adcs	r3, r3
 8001e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e14:	1912      	adds	r2, r2, r4
 8001e16:	eb45 0303 	adc.w	r3, r5, r3
 8001e1a:	f04f 0000 	mov.w	r0, #0
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	00d9      	lsls	r1, r3, #3
 8001e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e28:	00d0      	lsls	r0, r2, #3
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	1911      	adds	r1, r2, r4
 8001e30:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001e34:	416b      	adcs	r3, r5
 8001e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	461a      	mov	r2, r3
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	1891      	adds	r1, r2, r2
 8001e48:	6539      	str	r1, [r7, #80]	; 0x50
 8001e4a:	415b      	adcs	r3, r3
 8001e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e52:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001e56:	f7fe f9d5 	bl	8000204 <__aeabi_uldivmod>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001e60:	fba3 2302 	umull	r2, r3, r3, r2
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	011e      	lsls	r6, r3, #4
 8001e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	f04f 0500 	mov.w	r5, #0
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	1891      	adds	r1, r2, r2
 8001e78:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e7a:	415b      	adcs	r3, r3
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e82:	1912      	adds	r2, r2, r4
 8001e84:	eb45 0303 	adc.w	r3, r5, r3
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	00d9      	lsls	r1, r3, #3
 8001e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e96:	00d0      	lsls	r0, r2, #3
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	1911      	adds	r1, r2, r4
 8001e9e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001ea2:	416b      	adcs	r3, r5
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	1891      	adds	r1, r2, r2
 8001eb6:	6439      	str	r1, [r7, #64]	; 0x40
 8001eb8:	415b      	adcs	r3, r3
 8001eba:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ec0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ec4:	f7fe f99e 	bl	8000204 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001ece:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2164      	movs	r1, #100	; 0x64
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	3332      	adds	r3, #50	; 0x32
 8001ee0:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001eee:	441e      	add	r6, r3
 8001ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	1894      	adds	r4, r2, r2
 8001f00:	63bc      	str	r4, [r7, #56]	; 0x38
 8001f02:	415b      	adcs	r3, r3
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f0a:	1812      	adds	r2, r2, r0
 8001f0c:	eb41 0303 	adc.w	r3, r1, r3
 8001f10:	f04f 0400 	mov.w	r4, #0
 8001f14:	f04f 0500 	mov.w	r5, #0
 8001f18:	00dd      	lsls	r5, r3, #3
 8001f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f1e:	00d4      	lsls	r4, r2, #3
 8001f20:	4622      	mov	r2, r4
 8001f22:	462b      	mov	r3, r5
 8001f24:	1814      	adds	r4, r2, r0
 8001f26:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001f2a:	414b      	adcs	r3, r1
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	1891      	adds	r1, r2, r2
 8001f3e:	6339      	str	r1, [r7, #48]	; 0x30
 8001f40:	415b      	adcs	r3, r3
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
 8001f44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f48:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f4c:	f7fe f95a 	bl	8000204 <__aeabi_uldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001f56:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2164      	movs	r1, #100	; 0x64
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	3332      	adds	r3, #50	; 0x32
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <UART_SetConfig+0x3dc>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	f003 0207 	and.w	r2, r3, #7
 8001f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4432      	add	r2, r6
 8001f7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f7e:	e1a6      	b.n	80022ce <UART_SetConfig+0x722>
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40011400 	.word	0x40011400
 8001f88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4bd1      	ldr	r3, [pc, #836]	; (80022d8 <UART_SetConfig+0x72c>)
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d006      	beq.n	8001fa6 <UART_SetConfig+0x3fa>
 8001f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4bcf      	ldr	r3, [pc, #828]	; (80022dc <UART_SetConfig+0x730>)
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 80ca 	bne.w	800213a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fa6:	f7fe ff53 	bl	8000e50 <HAL_RCC_GetPCLK2Freq>
 8001faa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001fb2:	461c      	mov	r4, r3
 8001fb4:	f04f 0500 	mov.w	r5, #0
 8001fb8:	4622      	mov	r2, r4
 8001fba:	462b      	mov	r3, r5
 8001fbc:	1891      	adds	r1, r2, r2
 8001fbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc8:	1912      	adds	r2, r2, r4
 8001fca:	eb45 0303 	adc.w	r3, r5, r3
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	00d9      	lsls	r1, r3, #3
 8001fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fdc:	00d0      	lsls	r0, r2, #3
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	eb12 0a04 	adds.w	sl, r2, r4
 8001fe6:	eb43 0b05 	adc.w	fp, r3, r5
 8001fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	008b      	lsls	r3, r1, #2
 8002000:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002004:	0082      	lsls	r2, r0, #2
 8002006:	4650      	mov	r0, sl
 8002008:	4659      	mov	r1, fp
 800200a:	f7fe f8fb 	bl	8000204 <__aeabi_uldivmod>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4bb3      	ldr	r3, [pc, #716]	; (80022e0 <UART_SetConfig+0x734>)
 8002014:	fba3 2302 	umull	r2, r3, r3, r2
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	011e      	lsls	r6, r3, #4
 800201c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002020:	4618      	mov	r0, r3
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	1894      	adds	r4, r2, r2
 800202c:	623c      	str	r4, [r7, #32]
 800202e:	415b      	adcs	r3, r3
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002036:	1812      	adds	r2, r2, r0
 8002038:	eb41 0303 	adc.w	r3, r1, r3
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	f04f 0500 	mov.w	r5, #0
 8002044:	00dd      	lsls	r5, r3, #3
 8002046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800204a:	00d4      	lsls	r4, r2, #3
 800204c:	4622      	mov	r2, r4
 800204e:	462b      	mov	r3, r5
 8002050:	1814      	adds	r4, r2, r0
 8002052:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002056:	414b      	adcs	r3, r1
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800205c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	008b      	lsls	r3, r1, #2
 8002072:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002076:	0082      	lsls	r2, r0, #2
 8002078:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800207c:	f7fe f8c2 	bl	8000204 <__aeabi_uldivmod>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4b96      	ldr	r3, [pc, #600]	; (80022e0 <UART_SetConfig+0x734>)
 8002086:	fba3 1302 	umull	r1, r3, r3, r2
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2164      	movs	r1, #100	; 0x64
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	3332      	adds	r3, #50	; 0x32
 8002098:	4a91      	ldr	r2, [pc, #580]	; (80022e0 <UART_SetConfig+0x734>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a4:	441e      	add	r6, r3
 80020a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80020aa:	4618      	mov	r0, r3
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	1894      	adds	r4, r2, r2
 80020b6:	61bc      	str	r4, [r7, #24]
 80020b8:	415b      	adcs	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	1812      	adds	r2, r2, r0
 80020c2:	eb41 0303 	adc.w	r3, r1, r3
 80020c6:	f04f 0400 	mov.w	r4, #0
 80020ca:	f04f 0500 	mov.w	r5, #0
 80020ce:	00dd      	lsls	r5, r3, #3
 80020d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020d4:	00d4      	lsls	r4, r2, #3
 80020d6:	4622      	mov	r2, r4
 80020d8:	462b      	mov	r3, r5
 80020da:	1814      	adds	r4, r2, r0
 80020dc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80020e0:	414b      	adcs	r3, r1
 80020e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	008b      	lsls	r3, r1, #2
 80020fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002100:	0082      	lsls	r2, r0, #2
 8002102:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002106:	f7fe f87d 	bl	8000204 <__aeabi_uldivmod>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <UART_SetConfig+0x734>)
 8002110:	fba3 1302 	umull	r1, r3, r3, r2
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	2164      	movs	r1, #100	; 0x64
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	3332      	adds	r3, #50	; 0x32
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <UART_SetConfig+0x734>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4432      	add	r2, r6
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e0c9      	b.n	80022ce <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800213a:	f7fe fe75 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 800213e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002146:	461c      	mov	r4, r3
 8002148:	f04f 0500 	mov.w	r5, #0
 800214c:	4622      	mov	r2, r4
 800214e:	462b      	mov	r3, r5
 8002150:	1891      	adds	r1, r2, r2
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	415b      	adcs	r3, r3
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215c:	1912      	adds	r2, r2, r4
 800215e:	eb45 0303 	adc.w	r3, r5, r3
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	00d9      	lsls	r1, r3, #3
 800216c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002170:	00d0      	lsls	r0, r2, #3
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	eb12 0804 	adds.w	r8, r2, r4
 800217a:	eb43 0905 	adc.w	r9, r3, r5
 800217e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	008b      	lsls	r3, r1, #2
 8002194:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002198:	0082      	lsls	r2, r0, #2
 800219a:	4640      	mov	r0, r8
 800219c:	4649      	mov	r1, r9
 800219e:	f7fe f831 	bl	8000204 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <UART_SetConfig+0x734>)
 80021a8:	fba3 2302 	umull	r2, r3, r3, r2
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	011e      	lsls	r6, r3, #4
 80021b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021b4:	4618      	mov	r0, r3
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	1894      	adds	r4, r2, r2
 80021c0:	60bc      	str	r4, [r7, #8]
 80021c2:	415b      	adcs	r3, r3
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ca:	1812      	adds	r2, r2, r0
 80021cc:	eb41 0303 	adc.w	r3, r1, r3
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	f04f 0500 	mov.w	r5, #0
 80021d8:	00dd      	lsls	r5, r3, #3
 80021da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021de:	00d4      	lsls	r4, r2, #3
 80021e0:	4622      	mov	r2, r4
 80021e2:	462b      	mov	r3, r5
 80021e4:	1814      	adds	r4, r2, r0
 80021e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80021ea:	414b      	adcs	r3, r1
 80021ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	008b      	lsls	r3, r1, #2
 8002206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800220a:	0082      	lsls	r2, r0, #2
 800220c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002210:	f7fd fff8 	bl	8000204 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <UART_SetConfig+0x734>)
 800221a:	fba3 1302 	umull	r1, r3, r3, r2
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2164      	movs	r1, #100	; 0x64
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	3332      	adds	r3, #50	; 0x32
 800222c:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <UART_SetConfig+0x734>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	441e      	add	r6, r3
 800223a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800223e:	4618      	mov	r0, r3
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	1894      	adds	r4, r2, r2
 800224a:	603c      	str	r4, [r7, #0]
 800224c:	415b      	adcs	r3, r3
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002254:	1812      	adds	r2, r2, r0
 8002256:	eb41 0303 	adc.w	r3, r1, r3
 800225a:	f04f 0400 	mov.w	r4, #0
 800225e:	f04f 0500 	mov.w	r5, #0
 8002262:	00dd      	lsls	r5, r3, #3
 8002264:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002268:	00d4      	lsls	r4, r2, #3
 800226a:	4622      	mov	r2, r4
 800226c:	462b      	mov	r3, r5
 800226e:	1814      	adds	r4, r2, r0
 8002270:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002274:	414b      	adcs	r3, r1
 8002276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	008b      	lsls	r3, r1, #2
 8002290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002294:	0082      	lsls	r2, r0, #2
 8002296:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800229a:	f7fd ffb3 	bl	8000204 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <UART_SetConfig+0x734>)
 80022a4:	fba3 1302 	umull	r1, r3, r3, r2
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	2164      	movs	r1, #100	; 0x64
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	3332      	adds	r3, #50	; 0x32
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <UART_SetConfig+0x734>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	f003 020f 	and.w	r2, r3, #15
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4432      	add	r2, r6
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	e7ff      	b.n	80022ce <UART_SetConfig+0x722>
 80022ce:	bf00      	nop
 80022d0:	37f4      	adds	r7, #244	; 0xf4
 80022d2:	46bd      	mov	sp, r7
 80022d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	51eb851f 	.word	0x51eb851f

080022e4 <ApplicationManager_StateMachine>:
static void ApplicationManager_Static_GotEncryptedPacketHandler(void);
static void ApplicationManager_Static_DefaultHandler(void);


void ApplicationManager_StateMachine(ApplicationHandler_t *App)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch(App->ApplicationState)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d817      	bhi.n	8002324 <ApplicationManager_StateMachine+0x40>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <ApplicationManager_StateMachine+0x18>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	08002313 	.word	0x08002313
 8002304:	08002319 	.word	0x08002319
 8002308:	0800231f 	.word	0x0800231f
		{
			case APP_STATE_WAITING :
				ApplicationManager_Static_WaitingHandler();
 800230c:	f000 f80e 	bl	800232c <ApplicationManager_Static_WaitingHandler>
				break;
 8002310:	e00a      	b.n	8002328 <ApplicationManager_StateMachine+0x44>
			case APP_STATE_GOT_COMMAND :
				ApplicationManager_Static_GotCommandHandler();
 8002312:	f000 f812 	bl	800233a <ApplicationManager_Static_GotCommandHandler>
				break;
 8002316:	e007      	b.n	8002328 <ApplicationManager_StateMachine+0x44>
			case APP_STATE_GOT_PACKET :
				ApplicationManager_Static_GotPacketHandler();
 8002318:	f000 f816 	bl	8002348 <ApplicationManager_Static_GotPacketHandler>
				break;
 800231c:	e004      	b.n	8002328 <ApplicationManager_StateMachine+0x44>
			case APP_STATE_GOT_ENCRYPTED_PACKET :
				ApplicationManager_Static_GotEncryptedPacketHandler();
 800231e:	f000 f81a 	bl	8002356 <ApplicationManager_Static_GotEncryptedPacketHandler>
				break;
 8002322:	e001      	b.n	8002328 <ApplicationManager_StateMachine+0x44>
			default :
				ApplicationManager_Static_DefaultHandler();
 8002324:	f000 f81e 	bl	8002364 <ApplicationManager_Static_DefaultHandler>
		switch(App->ApplicationState)
 8002328:	e7e0      	b.n	80022ec <ApplicationManager_StateMachine+0x8>
 800232a:	bf00      	nop

0800232c <ApplicationManager_Static_WaitingHandler>:
		}
	}
}

static void ApplicationManager_Static_WaitingHandler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	// TODO
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <ApplicationManager_Static_GotCommandHandler>:

static void ApplicationManager_Static_GotCommandHandler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
	// TODO
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <ApplicationManager_Static_GotPacketHandler>:

static void ApplicationManager_Static_GotPacketHandler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	// TODO
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <ApplicationManager_Static_GotEncryptedPacketHandler>:

static void ApplicationManager_Static_GotEncryptedPacketHandler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
	// TODO
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <ApplicationManager_Static_DefaultHandler>:

static void ApplicationManager_Static_DefaultHandler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	// TODO
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <MX_GPIO_Init+0xd0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <MX_GPIO_Init+0xd0>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <MX_GPIO_Init+0xd0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <MX_GPIO_Init+0xd0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2120      	movs	r1, #32
 80023fe:	4812      	ldr	r0, [pc, #72]	; (8002448 <MX_GPIO_Init+0xd4>)
 8002400:	f7fe fbb6 	bl	8000b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_GPIO_Init+0xd8>)
 800240c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_GPIO_Init+0xdc>)
 800241a:	f7fe fa15 	bl	8000848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800241e:	2320      	movs	r3, #32
 8002420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_GPIO_Init+0xd4>)
 8002436:	f7fe fa07 	bl	8000848 <HAL_GPIO_Init>

}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000
 800244c:	10210000 	.word	0x10210000
 8002450:	40020800 	.word	0x40020800

08002454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245a:	f7fe f84f 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800245e:	f000 f809 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002462:	f7ff ff87 	bl	8002374 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002466:	f000 f8f5 	bl	8002654 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ApplicationHandler_t Application;



  ApplicationManager_StateMachine(&Application);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff39 	bl	80022e4 <ApplicationManager_StateMachine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002472:	e7fe      	b.n	8002472 <main+0x1e>

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	; 0x50
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	2234      	movs	r2, #52	; 0x34
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f9ae 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <SystemClock_Config+0xdc>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <SystemClock_Config+0xdc>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <SystemClock_Config+0xdc>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <SystemClock_Config+0xe0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <SystemClock_Config+0xe0>)
 80024be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <SystemClock_Config+0xe0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024da:	2302      	movs	r3, #2
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80024e8:	23b4      	movs	r3, #180	; 0xb4
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024f4:	2302      	movs	r3, #2
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fe6d 	bl	80011dc <HAL_RCC_OscConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002508:	f000 f826 	bl	8002558 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800250c:	f7fe fb4a 	bl	8000ba4 <HAL_PWREx_EnableOverDrive>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002516:	f000 f81f 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251a:	230f      	movs	r3, #15
 800251c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251e:	2302      	movs	r3, #2
 8002520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800252a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	2105      	movs	r1, #5
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fb83 	bl	8000c44 <HAL_RCC_ClockConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002544:	f000 f808 	bl	8002558 <Error_Handler>
  }
}
 8002548:	bf00      	nop
 800254a:	3750      	adds	r7, #80	; 0x50
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_MspInit+0x4c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_MspInit+0x4c>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_MspInit+0x4c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_MspInit+0x4c>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025a6:	2007      	movs	r0, #7
 80025a8:	f7fe f8ea 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f7fd ffc8 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART2_IRQHandler+0x10>)
 800261a:	f7ff f887 	bl	800172c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000002c 	.word	0x2000002c

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <SystemInit+0x28>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a07      	ldr	r2, [pc, #28]	; (8002650 <SystemInit+0x28>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SystemInit+0x28>)
 800263e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002642:	609a      	str	r2, [r3, #8]
#endif
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART2_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800268c:	f7ff f800 	bl	8001690 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f7ff ff5f 	bl	8002558 <Error_Handler>
  }

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000002c 	.word	0x2000002c
 80026a4:	40004400 	.word	0x40004400

080026a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_UART_MspInit+0x94>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d133      	bne.n	8002732 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_UART_MspInit+0x98>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002702:	230c      	movs	r3, #12
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002712:	2307      	movs	r3, #7
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_UART_MspInit+0x9c>)
 800271e:	f7fe f893 	bl	8000848 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f7fe f835 	bl	8000796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800272c:	2026      	movs	r0, #38	; 0x26
 800272e:	f7fe f84e 	bl	80007ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004400 	.word	0x40004400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002780 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800274c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800274e:	e003      	b.n	8002758 <LoopCopyDataInit>

08002750 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002752:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002754:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002756:	3104      	adds	r1, #4

08002758 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002758:	480b      	ldr	r0, [pc, #44]	; (8002788 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800275c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800275e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002760:	d3f6      	bcc.n	8002750 <CopyDataInit>
  ldr  r2, =_sbss
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002764:	e002      	b.n	800276c <LoopFillZerobss>

08002766 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002766:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002768:	f842 3b04 	str.w	r3, [r2], #4

0800276c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800276e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002770:	d3f9      	bcc.n	8002766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002772:	f7ff ff59 	bl	8002628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002776:	f000 f811 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7ff fe6b 	bl	8002454 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002780:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002784:	08002834 	.word	0x08002834
  ldr  r0, =_sdata
 8002788:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800278c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002790:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002794:	2000006c 	.word	0x2000006c

08002798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC_IRQHandler>
	...

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4d0d      	ldr	r5, [pc, #52]	; (80027d4 <__libc_init_array+0x38>)
 80027a0:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a2:	1b64      	subs	r4, r4, r5
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	2600      	movs	r6, #0
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	4d0b      	ldr	r5, [pc, #44]	; (80027dc <__libc_init_array+0x40>)
 80027ae:	4c0c      	ldr	r4, [pc, #48]	; (80027e0 <__libc_init_array+0x44>)
 80027b0:	f000 f820 	bl	80027f4 <_init>
 80027b4:	1b64      	subs	r4, r4, r5
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	2600      	movs	r6, #0
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	0800282c 	.word	0x0800282c
 80027d8:	0800282c 	.word	0x0800282c
 80027dc:	0800282c 	.word	0x0800282c
 80027e0:	08002830 	.word	0x08002830

080027e4 <memset>:
 80027e4:	4402      	add	r2, r0
 80027e6:	4603      	mov	r3, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <_init>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr

08002800 <_fini>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr
