
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000070  080061d0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080061d0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013213  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4a  00000000  00000000  000332b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c2d  00000000  00000000  00037608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb2d  00000000  00000000  0005b235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf42  00000000  00000000  0006ad62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  00135cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005750 	.word	0x08005750

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005750 	.word	0x08005750

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_Init+0x40>)
 80005c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <HAL_Init+0x40>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x40>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f94f 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f004 fa9c 	bl	8004b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f967 	bl	80008ee <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f000 f92f 	bl	800089a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000008 	.word	0x20000008
 8000654:	20000004 	.word	0x20000004
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	20000148 	.word	0x20000148

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000148 	.word	0x20000148

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ffee 	bl	8000684 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_Delay+0x44>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffde 	bl	8000684 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000004 	.word	0x20000004

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff29 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff3e 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff31 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffa2 	bl	8000840 <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d004      	beq.n	8000924 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	e00c      	b.n	800093e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2205      	movs	r2, #5
 8000928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 0201 	bic.w	r2, r2, #1
 800093a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e165      	b.n	8000c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000968:	2201      	movs	r2, #1
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	429a      	cmp	r2, r3
 8000982:	f040 8154 	bne.w	8000c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d00b      	beq.n	80009a6 <HAL_GPIO_Init+0x5a>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d007      	beq.n	80009a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099a:	2b11      	cmp	r3, #17
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b12      	cmp	r3, #18
 80009a4:	d130      	bne.n	8000a08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2203      	movs	r2, #3
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009dc:	2201      	movs	r2, #1
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	091b      	lsrs	r3, r3, #4
 80009f2:	f003 0201 	and.w	r2, r3, #1
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0xfc>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d123      	bne.n	8000a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	08da      	lsrs	r2, r3, #3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3208      	adds	r2, #8
 8000a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	69b9      	ldr	r1, [r7, #24]
 8000a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0203 	and.w	r2, r3, #3
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80ae 	beq.w	8000c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <HAL_GPIO_Init+0x300>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a5c      	ldr	r2, [pc, #368]	; (8000c4c <HAL_GPIO_Init+0x300>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <HAL_GPIO_Init+0x300>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aee:	4a58      	ldr	r2, [pc, #352]	; (8000c50 <HAL_GPIO_Init+0x304>)
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3302      	adds	r3, #2
 8000af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	220f      	movs	r2, #15
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <HAL_GPIO_Init+0x308>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d025      	beq.n	8000b66 <HAL_GPIO_Init+0x21a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4e      	ldr	r2, [pc, #312]	; (8000c58 <HAL_GPIO_Init+0x30c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d01f      	beq.n	8000b62 <HAL_GPIO_Init+0x216>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4d      	ldr	r2, [pc, #308]	; (8000c5c <HAL_GPIO_Init+0x310>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d019      	beq.n	8000b5e <HAL_GPIO_Init+0x212>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_GPIO_Init+0x314>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0x20e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_GPIO_Init+0x318>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d00d      	beq.n	8000b56 <HAL_GPIO_Init+0x20a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4a      	ldr	r2, [pc, #296]	; (8000c68 <HAL_GPIO_Init+0x31c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d007      	beq.n	8000b52 <HAL_GPIO_Init+0x206>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_GPIO_Init+0x320>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_GPIO_Init+0x202>
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	e00c      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b4e:	2307      	movs	r3, #7
 8000b50:	e00a      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b52:	2305      	movs	r3, #5
 8000b54:	e008      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b56:	2304      	movs	r3, #4
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e004      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_Init+0x21c>
 8000b66:	2300      	movs	r3, #0
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	f002 0203 	and.w	r2, r2, #3
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	4093      	lsls	r3, r2
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b78:	4935      	ldr	r1, [pc, #212]	; (8000c50 <HAL_GPIO_Init+0x304>)
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000baa:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_GPIO_Init+0x324>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3301      	adds	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	f67f ae96 	bls.w	8000968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40013800 	.word	0x40013800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40021400 	.word	0x40021400
 8000c6c:	40021800 	.word	0x40021800
 8000c70:	40013c00 	.word	0x40013c00

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c90:	e003      	b.n	8000c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	619a      	str	r2, [r3, #24]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fda6 	bl	8004818 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013c00 	.word	0x40013c00

08000cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_PWREx_EnableOverDrive+0x94>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff fcbe 	bl	8000684 <HAL_GetTick>
 8000d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d0a:	e009      	b.n	8000d20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d0c:	f7ff fcba 	bl	8000684 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1a:	d901      	bls.n	8000d20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e01f      	b.n	8000d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d1ee      	bne.n	8000d0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d34:	f7ff fca6 	bl	8000684 <HAL_GetTick>
 8000d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d3a:	e009      	b.n	8000d50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d3c:	f7ff fca2 	bl	8000684 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d4a:	d901      	bls.n	8000d50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e007      	b.n	8000d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d5c:	d1ee      	bne.n	8000d3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	420e0040 	.word	0x420e0040
 8000d70:	40007000 	.word	0x40007000
 8000d74:	420e0044 	.word	0x420e0044

08000d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e0cc      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d90c      	bls.n	8000db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9a:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da2:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d001      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e0b8      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dcc:	4b59      	ldr	r3, [pc, #356]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	4a58      	ldr	r2, [pc, #352]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000de4:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df0:	4b50      	ldr	r3, [pc, #320]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	494d      	ldr	r1, [pc, #308]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d044      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d107      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d119      	bne.n	8000e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e07f      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d003      	beq.n	8000e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d107      	bne.n	8000e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e36:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e06f      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e067      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f023 0203 	bic.w	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4934      	ldr	r1, [pc, #208]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e68:	f7ff fc0c 	bl	8000684 <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e6e:	e00a      	b.n	8000e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e70:	f7ff fc08 	bl	8000684 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e04f      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 020c 	and.w	r2, r3, #12
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d1eb      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d20c      	bcs.n	8000ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d001      	beq.n	8000ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e032      	b.n	8000f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4916      	ldr	r1, [pc, #88]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d009      	beq.n	8000efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	490e      	ldr	r1, [pc, #56]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000efe:	f000 f855 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	490a      	ldr	r1, [pc, #40]	; (8000f38 <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	5ccb      	ldrb	r3, [r1, r3]
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_RCC_ClockConfig+0x1c4>)
 8000f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_RCC_ClockConfig+0x1c8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb6c 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00
 8000f34:	40023800 	.word	0x40023800
 8000f38:	08006104 	.word	0x08006104
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_RCC_GetHCLKFreq>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	0a9b      	lsrs	r3, r3, #10
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	4903      	ldr	r1, [pc, #12]	; (8000f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f72:	5ccb      	ldrb	r3, [r1, r3]
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	08006114 	.word	0x08006114

08000f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f88:	f7ff ffdc 	bl	8000f44 <HAL_RCC_GetHCLKFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	0b5b      	lsrs	r3, r3, #13
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	4903      	ldr	r1, [pc, #12]	; (8000fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	08006114 	.word	0x08006114

08000fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb0:	b088      	sub	sp, #32
 8000fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fc8:	4bce      	ldr	r3, [pc, #824]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b0c      	cmp	r3, #12
 8000fd2:	f200 818d 	bhi.w	80012f0 <HAL_RCC_GetSysClockFreq+0x344>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <HAL_RCC_GetSysClockFreq+0x30>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001011 	.word	0x08001011
 8000fe0:	080012f1 	.word	0x080012f1
 8000fe4:	080012f1 	.word	0x080012f1
 8000fe8:	080012f1 	.word	0x080012f1
 8000fec:	08001017 	.word	0x08001017
 8000ff0:	080012f1 	.word	0x080012f1
 8000ff4:	080012f1 	.word	0x080012f1
 8000ff8:	080012f1 	.word	0x080012f1
 8000ffc:	0800101d 	.word	0x0800101d
 8001000:	080012f1 	.word	0x080012f1
 8001004:	080012f1 	.word	0x080012f1
 8001008:	080012f1 	.word	0x080012f1
 800100c:	08001191 	.word	0x08001191
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001010:	4bbd      	ldr	r3, [pc, #756]	; (8001308 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001012:	61bb      	str	r3, [r7, #24]
       break;
 8001014:	e16f      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001016:	4bbd      	ldr	r3, [pc, #756]	; (800130c <HAL_RCC_GetSysClockFreq+0x360>)
 8001018:	61bb      	str	r3, [r7, #24]
      break;
 800101a:	e16c      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800101c:	4bb9      	ldr	r3, [pc, #740]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001024:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001026:	4bb7      	ldr	r3, [pc, #732]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d053      	beq.n	80010da <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001032:	4bb4      	ldr	r3, [pc, #720]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	099b      	lsrs	r3, r3, #6
 8001038:	461a      	mov	r2, r3
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001042:	f04f 0100 	mov.w	r1, #0
 8001046:	ea02 0400 	and.w	r4, r2, r0
 800104a:	603c      	str	r4, [r7, #0]
 800104c:	400b      	ands	r3, r1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	014b      	lsls	r3, r1, #5
 8001062:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001066:	0142      	lsls	r2, r0, #5
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	4623      	mov	r3, r4
 800106e:	1ac0      	subs	r0, r0, r3
 8001070:	462b      	mov	r3, r5
 8001072:	eb61 0103 	sbc.w	r1, r1, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	018b      	lsls	r3, r1, #6
 8001080:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001084:	0182      	lsls	r2, r0, #6
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	eb63 0301 	sbc.w	r3, r3, r1
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	f04f 0100 	mov.w	r1, #0
 8001094:	00d9      	lsls	r1, r3, #3
 8001096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800109a:	00d0      	lsls	r0, r2, #3
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4621      	mov	r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4629      	mov	r1, r5
 80010a6:	eb43 0101 	adc.w	r1, r3, r1
 80010aa:	460b      	mov	r3, r1
 80010ac:	f04f 0000 	mov.w	r0, #0
 80010b0:	f04f 0100 	mov.w	r1, #0
 80010b4:	0259      	lsls	r1, r3, #9
 80010b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80010ba:	0250      	lsls	r0, r2, #9
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	f7ff f8f8 	bl	80002c0 <__aeabi_uldivmod>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4613      	mov	r3, r2
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	e04c      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	099b      	lsrs	r3, r3, #6
 80010e0:	461a      	mov	r2, r3
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010ea:	f04f 0100 	mov.w	r1, #0
 80010ee:	ea02 0a00 	and.w	sl, r2, r0
 80010f2:	ea03 0b01 	and.w	fp, r3, r1
 80010f6:	4650      	mov	r0, sl
 80010f8:	4659      	mov	r1, fp
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	014b      	lsls	r3, r1, #5
 8001104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001108:	0142      	lsls	r2, r0, #5
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	ebb0 000a 	subs.w	r0, r0, sl
 8001112:	eb61 010b 	sbc.w	r1, r1, fp
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	018b      	lsls	r3, r1, #6
 8001120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001124:	0182      	lsls	r2, r0, #6
 8001126:	1a12      	subs	r2, r2, r0
 8001128:	eb63 0301 	sbc.w	r3, r3, r1
 800112c:	f04f 0000 	mov.w	r0, #0
 8001130:	f04f 0100 	mov.w	r1, #0
 8001134:	00d9      	lsls	r1, r3, #3
 8001136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800113a:	00d0      	lsls	r0, r2, #3
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	eb12 020a 	adds.w	r2, r2, sl
 8001144:	eb43 030b 	adc.w	r3, r3, fp
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	f04f 0100 	mov.w	r1, #0
 8001150:	0299      	lsls	r1, r3, #10
 8001152:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001156:	0290      	lsls	r0, r2, #10
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	461a      	mov	r2, r3
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	f7ff f8aa 	bl	80002c0 <__aeabi_uldivmod>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4613      	mov	r3, r2
 8001172:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	0c1b      	lsrs	r3, r3, #16
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	3301      	adds	r3, #1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fbb2 f3f3 	udiv	r3, r2, r3
 800118c:	61bb      	str	r3, [r7, #24]
      break;
 800118e:	e0b2      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001190:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001198:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d04d      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	099b      	lsrs	r3, r3, #6
 80011ac:	461a      	mov	r2, r3
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80011b6:	f04f 0100 	mov.w	r1, #0
 80011ba:	ea02 0800 	and.w	r8, r2, r0
 80011be:	ea03 0901 	and.w	r9, r3, r1
 80011c2:	4640      	mov	r0, r8
 80011c4:	4649      	mov	r1, r9
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	014b      	lsls	r3, r1, #5
 80011d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011d4:	0142      	lsls	r2, r0, #5
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	ebb0 0008 	subs.w	r0, r0, r8
 80011de:	eb61 0109 	sbc.w	r1, r1, r9
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	018b      	lsls	r3, r1, #6
 80011ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80011f0:	0182      	lsls	r2, r0, #6
 80011f2:	1a12      	subs	r2, r2, r0
 80011f4:	eb63 0301 	sbc.w	r3, r3, r1
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	00d9      	lsls	r1, r3, #3
 8001202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001206:	00d0      	lsls	r0, r2, #3
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	eb12 0208 	adds.w	r2, r2, r8
 8001210:	eb43 0309 	adc.w	r3, r3, r9
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f04f 0100 	mov.w	r1, #0
 800121c:	0259      	lsls	r1, r3, #9
 800121e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001222:	0250      	lsls	r0, r2, #9
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	461a      	mov	r2, r3
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	f7ff f844 	bl	80002c0 <__aeabi_uldivmod>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4613      	mov	r3, r2
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e04a      	b.n	80012d8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	099b      	lsrs	r3, r3, #6
 8001248:	461a      	mov	r2, r3
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001252:	f04f 0100 	mov.w	r1, #0
 8001256:	ea02 0400 	and.w	r4, r2, r0
 800125a:	ea03 0501 	and.w	r5, r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	014b      	lsls	r3, r1, #5
 800126c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001270:	0142      	lsls	r2, r0, #5
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	1b00      	subs	r0, r0, r4
 8001278:	eb61 0105 	sbc.w	r1, r1, r5
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	018b      	lsls	r3, r1, #6
 8001286:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800128a:	0182      	lsls	r2, r0, #6
 800128c:	1a12      	subs	r2, r2, r0
 800128e:	eb63 0301 	sbc.w	r3, r3, r1
 8001292:	f04f 0000 	mov.w	r0, #0
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	00d9      	lsls	r1, r3, #3
 800129c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80012a0:	00d0      	lsls	r0, r2, #3
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	1912      	adds	r2, r2, r4
 80012a8:	eb45 0303 	adc.w	r3, r5, r3
 80012ac:	f04f 0000 	mov.w	r0, #0
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	0299      	lsls	r1, r3, #10
 80012b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80012ba:	0290      	lsls	r0, r2, #10
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	461a      	mov	r2, r3
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	f7fe fff8 	bl	80002c0 <__aeabi_uldivmod>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4613      	mov	r3, r2
 80012d6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_RCC_GetSysClockFreq+0x358>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	0f1b      	lsrs	r3, r3, #28
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ec:	61bb      	str	r3, [r7, #24]
      break;
 80012ee:	e002      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012f2:	61bb      	str	r3, [r7, #24]
      break;
 80012f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f6:	69bb      	ldr	r3, [r7, #24]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	00f42400 	.word	0x00f42400
 800130c:	007a1200 	.word	0x007a1200

08001310 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8083 	beq.w	8001430 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800132a:	4b95      	ldr	r3, [pc, #596]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d019      	beq.n	800136a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001336:	4b92      	ldr	r3, [pc, #584]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800133e:	2b08      	cmp	r3, #8
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001342:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001350:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b85      	ldr	r3, [pc, #532]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d05b      	beq.n	800142e <HAL_RCC_OscConfig+0x11e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d157      	bne.n	800142e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e216      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x8a>
 800138c:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7b      	ldr	r2, [pc, #492]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e01d      	b.n	80013d6 <HAL_RCC_OscConfig+0xc6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0xae>
 80013a4:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a75      	ldr	r2, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b73      	ldr	r3, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a72      	ldr	r2, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0xc6>
 80013be:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6f      	ldr	r2, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6c      	ldr	r2, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d013      	beq.n	8001406 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff f951 	bl	8000684 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e6:	f7ff f94d 	bl	8000684 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1db      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f8:	4b61      	ldr	r3, [pc, #388]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0xd6>
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff f93d 	bl	8000684 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140e:	f7ff f939 	bl	8000684 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b64      	cmp	r3, #100	; 0x64
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1c7      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0xfe>
 800142c:	e000      	b.n	8001430 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d06f      	beq.n	800151c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	d017      	beq.n	8001478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001450:	2b08      	cmp	r3, #8
 8001452:	d105      	bne.n	8001460 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d11c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d116      	bne.n	80014a6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x180>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e18f      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4938      	ldr	r1, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a4:	e03a      	b.n	800151c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d020      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ae:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff f8e6 	bl	8000684 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff f8e2 	bl	8000684 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e170      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4925      	ldr	r1, [pc, #148]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e015      	b.n	800151c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff f8c5 	bl	8000684 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff f8c1 	bl	8000684 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e14f      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d037      	beq.n	8001598 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d016      	beq.n	800155e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_RCC_OscConfig+0x278>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff f8a5 	bl	8000684 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff f8a1 	bl	8000684 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e12f      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x22e>
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_RCC_OscConfig+0x278>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff f88e 	bl	8000684 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156a:	e00f      	b.n	800158c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff f88a 	bl	8000684 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d908      	bls.n	800158c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e118      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	42470000 	.word	0x42470000
 8001588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	4b8a      	ldr	r3, [pc, #552]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800158e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e9      	bne.n	800156c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8097 	beq.w	80016d4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015aa:	4b83      	ldr	r3, [pc, #524]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a7e      	ldr	r2, [pc, #504]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b79      	ldr	r3, [pc, #484]	; (80017bc <HAL_RCC_OscConfig+0x4ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x4ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a75      	ldr	r2, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x4ac>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f849 	bl	8000684 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff f845 	bl	8000684 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0d3      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x4ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x31a>
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x354>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x33c>
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5d      	ldr	r2, [pc, #372]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x354>
 800164c:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a59      	ldr	r2, [pc, #356]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
 8001658:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff f80a 	bl	8000684 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f806 	bl	8000684 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e092      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x364>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7fe fff4 	bl	8000684 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7fe fff0 	bl	8000684 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e07c      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d068      	beq.n	80017ae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d060      	beq.n	80017aa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d145      	bne.n	800177c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_RCC_OscConfig+0x4b0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7fe ffc5 	bl	8000684 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7fe ffc1 	bl	8000684 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e04f      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	019b      	lsls	r3, r3, #6
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	071b      	lsls	r3, r3, #28
 8001748:	491b      	ldr	r1, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCC_OscConfig+0x4b0>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7fe ff96 	bl	8000684 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7fe ff92 	bl	8000684 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e020      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x44c>
 800177a:	e018      	b.n	80017ae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x4b0>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7fe ff7f 	bl	8000684 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7fe ff7b 	bl	8000684 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e009      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_OscConfig+0x4a8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x47a>
 80017a8:	e001      	b.n	80017ae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42470060 	.word	0x42470060

080017c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e056      	b.n	8001884 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d106      	bne.n	80017f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f003 f921 	bl	8004a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	ea42 0103 	orr.w	r1, r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	f003 0104 	and.w	r1, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001872:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_SPI_Transmit+0x22>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e11e      	b.n	8001aec <HAL_SPI_Transmit+0x260>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b6:	f7fe fee5 	bl	8000684 <HAL_GetTick>
 80018ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018d0:	e103      	b.n	8001ada <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_SPI_Transmit+0x52>
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018e2:	e0fa      	b.n	8001ada <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2203      	movs	r2, #3
 80018e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800192a:	d107      	bne.n	800193c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800193a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d007      	beq.n	800195a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001962:	d14b      	bne.n	80019fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_SPI_Transmit+0xe6>
 800196c:	8afb      	ldrh	r3, [r7, #22]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d13e      	bne.n	80019f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	1c9a      	adds	r2, r3, #2
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001996:	e02b      	b.n	80019f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d112      	bne.n	80019cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	1c9a      	adds	r2, r3, #2
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80019ca:	e011      	b.n	80019f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019cc:	f7fe fe5a 	bl	8000684 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d803      	bhi.n	80019e4 <HAL_SPI_Transmit+0x158>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e2:	d102      	bne.n	80019ea <HAL_SPI_Transmit+0x15e>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019ee:	e074      	b.n	8001ada <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ce      	bne.n	8001998 <HAL_SPI_Transmit+0x10c>
 80019fa:	e04c      	b.n	8001a96 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_SPI_Transmit+0x17e>
 8001a04:	8afb      	ldrh	r3, [r7, #22]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d140      	bne.n	8001a8c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	330c      	adds	r3, #12
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a30:	e02c      	b.n	8001a8c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d113      	bne.n	8001a68 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	330c      	adds	r3, #12
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a66:	e011      	b.n	8001a8c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a68:	f7fe fe0c 	bl	8000684 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d803      	bhi.n	8001a80 <HAL_SPI_Transmit+0x1f4>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d102      	bne.n	8001a86 <HAL_SPI_Transmit+0x1fa>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a8a:	e026      	b.n	8001ada <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1cd      	bne.n	8001a32 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fba4 	bl	80021e8 <SPI_EndRxTxTransaction>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
 8001ad6:	e000      	b.n	8001ada <HAL_SPI_Transmit+0x24e>
  }

error:
 8001ad8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b10:	d112      	bne.n	8001b38 <HAL_SPI_Receive+0x44>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b22:	88fa      	ldrh	r2, [r7, #6]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f8e9 	bl	8001d06 <HAL_SPI_TransmitReceive>
 8001b34:	4603      	mov	r3, r0
 8001b36:	e0e2      	b.n	8001cfe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_SPI_Receive+0x52>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e0db      	b.n	8001cfe <HAL_SPI_Receive+0x20a>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b4e:	f7fe fd99 	bl	8000684 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d002      	beq.n	8001b66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b64:	e0c2      	b.n	8001cec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_SPI_Receive+0x7e>
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b76:	e0b9      	b.n	8001cec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	88fa      	ldrh	r2, [r7, #6]
 8001b90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbe:	d107      	bne.n	8001bd0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d007      	beq.n	8001bee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d162      	bne.n	8001cbc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001bf6:	e02e      	b.n	8001c56 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d115      	bne.n	8001c32 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f103 020c 	add.w	r2, r3, #12
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c30:	e011      	b.n	8001c56 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c32:	f7fe fd27 	bl	8000684 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d803      	bhi.n	8001c4a <HAL_SPI_Receive+0x156>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d102      	bne.n	8001c50 <HAL_SPI_Receive+0x15c>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c54:	e04a      	b.n	8001cec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1cb      	bne.n	8001bf8 <HAL_SPI_Receive+0x104>
 8001c60:	e031      	b.n	8001cc6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d113      	bne.n	8001c98 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	1c9a      	adds	r2, r3, #2
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c96:	e011      	b.n	8001cbc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c98:	f7fe fcf4 	bl	8000684 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d803      	bhi.n	8001cb0 <HAL_SPI_Receive+0x1bc>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d102      	bne.n	8001cb6 <HAL_SPI_Receive+0x1c2>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cba:	e017      	b.n	8001cec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1cd      	bne.n	8001c62 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fa27 	bl	800211e <SPI_EndRxTransaction>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
 8001ce8:	e000      	b.n	8001cec <HAL_SPI_Receive+0x1f8>
  }

error :
 8001cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b08c      	sub	sp, #48	; 0x30
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_SPI_TransmitReceive+0x26>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e18a      	b.n	8002042 <HAL_SPI_TransmitReceive+0x33c>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d34:	f7fe fca6 	bl	8000684 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d00f      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x70>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d5c:	d107      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x68>
 8001d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d003      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d74:	e15b      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_SPI_TransmitReceive+0x82>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_SPI_TransmitReceive+0x82>
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d8e:	e14e      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d003      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2205      	movs	r2, #5
 8001da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d007      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e00:	d178      	bne.n	8001ef4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x10a>
 8001e0a:	8b7b      	ldrh	r3, [r7, #26]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d166      	bne.n	8001ede <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e34:	e053      	b.n	8001ede <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d11b      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x176>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x176>
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d113      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	1c9a      	adds	r2, r3, #2
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d119      	bne.n	8001ebe <HAL_SPI_TransmitReceive+0x1b8>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d014      	beq.n	8001ebe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	1c9a      	adds	r2, r3, #2
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ebe:	f7fe fbe1 	bl	8000684 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d807      	bhi.n	8001ede <HAL_SPI_TransmitReceive+0x1d8>
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d003      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001edc:	e0a7      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1a6      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x130>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1a1      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x130>
 8001ef2:	e07c      	b.n	8001fee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_SPI_TransmitReceive+0x1fc>
 8001efc:	8b7b      	ldrh	r3, [r7, #26]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d16b      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f28:	e057      	b.n	8001fda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d11c      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x26c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d017      	beq.n	8001f72 <HAL_SPI_TransmitReceive+0x26c>
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d114      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d119      	bne.n	8001fb4 <HAL_SPI_TransmitReceive+0x2ae>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d014      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fb4:	f7fe fb66 	bl	8000684 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d803      	bhi.n	8001fcc <HAL_SPI_TransmitReceive+0x2c6>
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d102      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0x2cc>
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fd8:	e029      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1a2      	bne.n	8001f2a <HAL_SPI_TransmitReceive+0x224>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d19d      	bne.n	8001f2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f8f8 	bl	80021e8 <SPI_EndRxTxTransaction>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800200a:	e010      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	e000      	b.n	800202e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800202c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800203e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002042:	4618      	mov	r0, r3
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800205a:	e04c      	b.n	80020f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d048      	beq.n	80020f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002064:	f7fe fb0e 	bl	8000684 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d902      	bls.n	800207a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d13d      	bne.n	80020f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002092:	d111      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800209c:	d004      	beq.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d107      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c0:	d10f      	bne.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	429a      	cmp	r2, r3
 8002112:	d1a3      	bne.n	800205c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af02      	add	r7, sp, #8
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002132:	d111      	bne.n	8002158 <SPI_EndRxTransaction+0x3a>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213c:	d004      	beq.n	8002148 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d107      	bne.n	8002158 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002160:	d12a      	bne.n	80021b8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216a:	d012      	beq.n	8002192 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff ff67 	bl	800204a <SPI_WaitFlagStateUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d02d      	beq.n	80021de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0220 	orr.w	r2, r3, #32
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e026      	b.n	80021e0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	2101      	movs	r1, #1
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff ff54 	bl	800204a <SPI_WaitFlagStateUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01a      	beq.n	80021de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e013      	b.n	80021e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	2101      	movs	r1, #1
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff ff41 	bl	800204a <SPI_WaitFlagStateUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0220 	orr.w	r2, r3, #32
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e000      	b.n	80021e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <SPI_EndRxTxTransaction+0x7c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <SPI_EndRxTxTransaction+0x80>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0d5b      	lsrs	r3, r3, #21
 8002200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002212:	d112      	bne.n	800223a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff ff13 	bl	800204a <SPI_WaitFlagStateUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3b01      	subs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d0f2      	beq.n	800223a <SPI_EndRxTxTransaction+0x52>
 8002254:	e000      	b.n	8002258 <SPI_EndRxTxTransaction+0x70>
        break;
 8002256:	bf00      	nop
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	165e9f81 	.word	0x165e9f81

0800226c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e03f      	b.n	80022fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f002 fd1c 	bl	8004cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fb97 	bl	80029e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b088      	sub	sp, #32
 800230a:	af02      	add	r7, sp, #8
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	f040 8083 	bne.w	800242e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_UART_Transmit+0x2e>
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e07b      	b.n	8002430 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_UART_Transmit+0x40>
 8002342:	2302      	movs	r3, #2
 8002344:	e074      	b.n	8002430 <HAL_UART_Transmit+0x12a>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2221      	movs	r2, #33	; 0x21
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800235c:	f7fe f992 	bl	8000684 <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002376:	e042      	b.n	80023fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d122      	bne.n	80023d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f9b6 	bl	800270c <UART_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e042      	b.n	8002430 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3302      	adds	r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	e017      	b.n	80023fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	e013      	b.n	80023fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f993 	bl	800270c <UART_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e01f      	b.n	8002430 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1b7      	bne.n	8002378 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2200      	movs	r2, #0
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f97a 	bl	800270c <UART_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e006      	b.n	8002430 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b20      	cmp	r3, #32
 8002450:	d140      	bne.n	80024d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_UART_Receive_IT+0x26>
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e039      	b.n	80024d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_UART_Receive_IT+0x38>
 800246c:	2302      	movs	r3, #2
 800246e:	e032      	b.n	80024d6 <HAL_UART_Receive_IT+0x9e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	; 0x22
 8002494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_UART_IRQHandler+0x52>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9d6 	bl	80028e0 <UART_Receive_IT>
      return;
 8002534:	e0d0      	b.n	80026d8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80b0 	beq.w	800269e <HAL_UART_IRQHandler+0x1ba>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_UART_IRQHandler+0x70>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a5 	beq.w	800269e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_UART_IRQHandler+0x90>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_UART_IRQHandler+0xb0>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	f043 0202 	orr.w	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_UART_IRQHandler+0xd0>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00f      	beq.n	80025de <HAL_UART_IRQHandler+0xfa>
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_UART_IRQHandler+0xee>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d077      	beq.n	80026d6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_UART_IRQHandler+0x11c>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f970 	bl	80028e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_UART_IRQHandler+0x144>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d031      	beq.n	800268c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8b9 	bl	80027a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d123      	bne.n	8002684 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <HAL_UART_IRQHandler+0x1fc>)
 800265a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe f950 	bl	8000906 <HAL_DMA_Abort_IT>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d016      	beq.n	800269a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002676:	4610      	mov	r0, r2
 8002678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267a:	e00e      	b.n	800269a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f83b 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002682:	e00a      	b.n	800269a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f837 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268a:	e006      	b.n	800269a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f833 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002698:	e01d      	b.n	80026d6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269a:	bf00      	nop
    return;
 800269c:	e01b      	b.n	80026d6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_UART_IRQHandler+0x1d6>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8a6 	bl	8002804 <UART_Transmit_IT>
    return;
 80026b8:	e00e      	b.n	80026d8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_UART_IRQHandler+0x1f4>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d004      	beq.n	80026d8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8ee 	bl	80028b0 <UART_EndTransmit_IT>
    return;
 80026d4:	e000      	b.n	80026d8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80026d6:	bf00      	nop
  }
}
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	080027dd 	.word	0x080027dd

080026e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271c:	e02c      	b.n	8002778 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d028      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <UART_WaitOnFlagUntilTimeout+0x30>
 800272c:	f7fd ffaa 	bl	8000684 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	429a      	cmp	r2, r3
 800273a:	d21d      	bcs.n	8002778 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800274a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e00f      	b.n	8002798 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	429a      	cmp	r2, r3
 8002794:	d0c3      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff ff7e 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b21      	cmp	r3, #33	; 0x21
 8002816:	d144      	bne.n	80028a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d11a      	bne.n	8002858 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002836:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]
 800284a:	e00e      	b.n	800286a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]
 8002856:	e008      	b.n	800286a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6211      	str	r1, [r2, #32]
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	84d1      	strh	r1, [r2, #38]	; 0x26
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff07 	bl	80026e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b22      	cmp	r3, #34	; 0x22
 80028f2:	d171      	bne.n	80029d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d123      	bne.n	8002946 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10e      	bne.n	800292a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
 8002928:	e029      	b.n	800297e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b29b      	uxth	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
 8002944:	e01b      	b.n	800297e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6858      	ldr	r0, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6291      	str	r1, [r2, #40]	; 0x28
 800295e:	b2c2      	uxtb	r2, r0
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e00c      	b.n	800297e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	1c58      	adds	r0, r3, #1
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	6288      	str	r0, [r1, #40]	; 0x28
 8002976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800298e:	2b00      	cmp	r3, #0
 8002990:	d120      	bne.n	80029d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0220 	bic.w	r2, r2, #32
 80029a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f002 f9d0 	bl	8004d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e002      	b.n	80029da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e8:	b0bd      	sub	sp, #244	; 0xf4
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	68d9      	ldr	r1, [r3, #12]
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	ea40 0301 	orr.w	r3, r0, r1
 8002a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a3c:	f021 010c 	bic.w	r1, r1, #12
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	6999      	ldr	r1, [r3, #24]
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	ea40 0301 	orr.w	r3, r0, r1
 8002a6a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a76:	f040 81a5 	bne.w	8002dc4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4bcd      	ldr	r3, [pc, #820]	; (8002db8 <UART_SetConfig+0x3d4>)
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d006      	beq.n	8002a94 <UART_SetConfig+0xb0>
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4bcb      	ldr	r3, [pc, #812]	; (8002dbc <UART_SetConfig+0x3d8>)
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	f040 80cb 	bne.w	8002c2a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7fe fa76 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 8002a98:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aa0:	461c      	mov	r4, r3
 8002aa2:	f04f 0500 	mov.w	r5, #0
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	1891      	adds	r1, r2, r2
 8002aac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ab6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002aba:	1912      	adds	r2, r2, r4
 8002abc:	eb45 0303 	adc.w	r3, r5, r3
 8002ac0:	f04f 0000 	mov.w	r0, #0
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	00d9      	lsls	r1, r3, #3
 8002aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ace:	00d0      	lsls	r0, r2, #3
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	1911      	adds	r1, r2, r4
 8002ad6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002ada:	416b      	adcs	r3, r5
 8002adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	1891      	adds	r1, r2, r2
 8002aee:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002af2:	415b      	adcs	r3, r3
 8002af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002af8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002afc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002b00:	f7fd fbde 	bl	80002c0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4bad      	ldr	r3, [pc, #692]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	011e      	lsls	r6, r3, #4
 8002b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b16:	461c      	mov	r4, r3
 8002b18:	f04f 0500 	mov.w	r5, #0
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	462b      	mov	r3, r5
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	67b9      	str	r1, [r7, #120]	; 0x78
 8002b24:	415b      	adcs	r3, r3
 8002b26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b28:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002b2c:	1912      	adds	r2, r2, r4
 8002b2e:	eb45 0303 	adc.w	r3, r5, r3
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	00d9      	lsls	r1, r3, #3
 8002b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b40:	00d0      	lsls	r0, r2, #3
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	1911      	adds	r1, r2, r4
 8002b48:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002b4c:	416b      	adcs	r3, r5
 8002b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	1891      	adds	r1, r2, r2
 8002b60:	6739      	str	r1, [r7, #112]	; 0x70
 8002b62:	415b      	adcs	r3, r3
 8002b64:	677b      	str	r3, [r7, #116]	; 0x74
 8002b66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b6a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002b6e:	f7fd fba7 	bl	80002c0 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	; 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	3332      	adds	r3, #50	; 0x32
 8002b8a:	4a8d      	ldr	r2, [pc, #564]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b98:	441e      	add	r6, r3
 8002b9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	1894      	adds	r4, r2, r2
 8002baa:	66bc      	str	r4, [r7, #104]	; 0x68
 8002bac:	415b      	adcs	r3, r3
 8002bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002bb4:	1812      	adds	r2, r2, r0
 8002bb6:	eb41 0303 	adc.w	r3, r1, r3
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	f04f 0500 	mov.w	r5, #0
 8002bc2:	00dd      	lsls	r5, r3, #3
 8002bc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bc8:	00d4      	lsls	r4, r2, #3
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	1814      	adds	r4, r2, r0
 8002bd0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002bd4:	414b      	adcs	r3, r1
 8002bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	6639      	str	r1, [r7, #96]	; 0x60
 8002bea:	415b      	adcs	r3, r3
 8002bec:	667b      	str	r3, [r7, #100]	; 0x64
 8002bee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bf6:	f7fd fb63 	bl	80002c0 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002c00:	fba3 1302 	umull	r1, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3332      	adds	r3, #50	; 0x32
 8002c12:	4a6b      	ldr	r2, [pc, #428]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	f003 0207 	and.w	r2, r3, #7
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4432      	add	r2, r6
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	e26d      	b.n	8003106 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c2a:	f7fe f997 	bl	8000f5c <HAL_RCC_GetPCLK1Freq>
 8002c2e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c36:	461c      	mov	r4, r3
 8002c38:	f04f 0500 	mov.w	r5, #0
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	462b      	mov	r3, r5
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c44:	415b      	adcs	r3, r3
 8002c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c4c:	1912      	adds	r2, r2, r4
 8002c4e:	eb45 0303 	adc.w	r3, r5, r3
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	00d9      	lsls	r1, r3, #3
 8002c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c60:	00d0      	lsls	r0, r2, #3
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	1911      	adds	r1, r2, r4
 8002c68:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002c6c:	416b      	adcs	r3, r5
 8002c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	1891      	adds	r1, r2, r2
 8002c80:	6539      	str	r1, [r7, #80]	; 0x50
 8002c82:	415b      	adcs	r3, r3
 8002c84:	657b      	str	r3, [r7, #84]	; 0x54
 8002c86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c8a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002c8e:	f7fd fb17 	bl	80002c0 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002c98:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	011e      	lsls	r6, r3, #4
 8002ca0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ca4:	461c      	mov	r4, r3
 8002ca6:	f04f 0500 	mov.w	r5, #0
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cba:	1912      	adds	r2, r2, r4
 8002cbc:	eb45 0303 	adc.w	r3, r5, r3
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	00d9      	lsls	r1, r3, #3
 8002cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cce:	00d0      	lsls	r0, r2, #3
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	1911      	adds	r1, r2, r4
 8002cd6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002cda:	416b      	adcs	r3, r5
 8002cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	1891      	adds	r1, r2, r2
 8002cee:	6439      	str	r1, [r7, #64]	; 0x40
 8002cf0:	415b      	adcs	r3, r3
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cf8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002cfc:	f7fd fae0 	bl	80002c0 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002d06:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2164      	movs	r1, #100	; 0x64
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d26:	441e      	add	r6, r3
 8002d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	1894      	adds	r4, r2, r2
 8002d38:	63bc      	str	r4, [r7, #56]	; 0x38
 8002d3a:	415b      	adcs	r3, r3
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d42:	1812      	adds	r2, r2, r0
 8002d44:	eb41 0303 	adc.w	r3, r1, r3
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	f04f 0500 	mov.w	r5, #0
 8002d50:	00dd      	lsls	r5, r3, #3
 8002d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d56:	00d4      	lsls	r4, r2, #3
 8002d58:	4622      	mov	r2, r4
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	1814      	adds	r4, r2, r0
 8002d5e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002d62:	414b      	adcs	r3, r1
 8002d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	6339      	str	r1, [r7, #48]	; 0x30
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d80:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d84:	f7fd fa9c 	bl	80002c0 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2164      	movs	r1, #100	; 0x64
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <UART_SetConfig+0x3dc>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 0207 	and.w	r2, r3, #7
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4432      	add	r2, r6
 8002db4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002db6:	e1a6      	b.n	8003106 <UART_SetConfig+0x722>
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4bd1      	ldr	r3, [pc, #836]	; (8003110 <UART_SetConfig+0x72c>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d006      	beq.n	8002dde <UART_SetConfig+0x3fa>
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4bcf      	ldr	r3, [pc, #828]	; (8003114 <UART_SetConfig+0x730>)
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 80ca 	bne.w	8002f72 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dde:	f7fe f8d1 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 8002de2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dea:	461c      	mov	r4, r3
 8002dec:	f04f 0500 	mov.w	r5, #0
 8002df0:	4622      	mov	r2, r4
 8002df2:	462b      	mov	r3, r5
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e00:	1912      	adds	r2, r2, r4
 8002e02:	eb45 0303 	adc.w	r3, r5, r3
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	00d9      	lsls	r1, r3, #3
 8002e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e14:	00d0      	lsls	r0, r2, #3
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	eb12 0a04 	adds.w	sl, r2, r4
 8002e1e:	eb43 0b05 	adc.w	fp, r3, r5
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	008b      	lsls	r3, r1, #2
 8002e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e3c:	0082      	lsls	r2, r0, #2
 8002e3e:	4650      	mov	r0, sl
 8002e40:	4659      	mov	r1, fp
 8002e42:	f7fd fa3d 	bl	80002c0 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4bb3      	ldr	r3, [pc, #716]	; (8003118 <UART_SetConfig+0x734>)
 8002e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	011e      	lsls	r6, r3, #4
 8002e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	1894      	adds	r4, r2, r2
 8002e64:	623c      	str	r4, [r7, #32]
 8002e66:	415b      	adcs	r3, r3
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6e:	1812      	adds	r2, r2, r0
 8002e70:	eb41 0303 	adc.w	r3, r1, r3
 8002e74:	f04f 0400 	mov.w	r4, #0
 8002e78:	f04f 0500 	mov.w	r5, #0
 8002e7c:	00dd      	lsls	r5, r3, #3
 8002e7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e82:	00d4      	lsls	r4, r2, #3
 8002e84:	4622      	mov	r2, r4
 8002e86:	462b      	mov	r3, r5
 8002e88:	1814      	adds	r4, r2, r0
 8002e8a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002e8e:	414b      	adcs	r3, r1
 8002e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	008b      	lsls	r3, r1, #2
 8002eaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eae:	0082      	lsls	r2, r0, #2
 8002eb0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002eb4:	f7fd fa04 	bl	80002c0 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4b96      	ldr	r3, [pc, #600]	; (8003118 <UART_SetConfig+0x734>)
 8002ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2164      	movs	r1, #100	; 0x64
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	3332      	adds	r3, #50	; 0x32
 8002ed0:	4a91      	ldr	r2, [pc, #580]	; (8003118 <UART_SetConfig+0x734>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002edc:	441e      	add	r6, r3
 8002ede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	1894      	adds	r4, r2, r2
 8002eee:	61bc      	str	r4, [r7, #24]
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef8:	1812      	adds	r2, r2, r0
 8002efa:	eb41 0303 	adc.w	r3, r1, r3
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	f04f 0500 	mov.w	r5, #0
 8002f06:	00dd      	lsls	r5, r3, #3
 8002f08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0c:	00d4      	lsls	r4, r2, #3
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	1814      	adds	r4, r2, r0
 8002f14:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	008b      	lsls	r3, r1, #2
 8002f34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f38:	0082      	lsls	r2, r0, #2
 8002f3a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002f3e:	f7fd f9bf 	bl	80002c0 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4b74      	ldr	r3, [pc, #464]	; (8003118 <UART_SetConfig+0x734>)
 8002f48:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	2164      	movs	r1, #100	; 0x64
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	3332      	adds	r3, #50	; 0x32
 8002f5a:	4a6f      	ldr	r2, [pc, #444]	; (8003118 <UART_SetConfig+0x734>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4432      	add	r2, r6
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e0c9      	b.n	8003106 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f72:	f7fd fff3 	bl	8000f5c <HAL_RCC_GetPCLK1Freq>
 8002f76:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f7e:	461c      	mov	r4, r3
 8002f80:	f04f 0500 	mov.w	r5, #0
 8002f84:	4622      	mov	r2, r4
 8002f86:	462b      	mov	r3, r5
 8002f88:	1891      	adds	r1, r2, r2
 8002f8a:	6139      	str	r1, [r7, #16]
 8002f8c:	415b      	adcs	r3, r3
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f94:	1912      	adds	r2, r2, r4
 8002f96:	eb45 0303 	adc.w	r3, r5, r3
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa8:	00d0      	lsls	r0, r2, #3
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	eb12 0804 	adds.w	r8, r2, r4
 8002fb2:	eb43 0905 	adc.w	r9, r3, r5
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	008b      	lsls	r3, r1, #2
 8002fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fd0:	0082      	lsls	r2, r0, #2
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f7fd f973 	bl	80002c0 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <UART_SetConfig+0x734>)
 8002fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	011e      	lsls	r6, r3, #4
 8002fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	1894      	adds	r4, r2, r2
 8002ff8:	60bc      	str	r4, [r7, #8]
 8002ffa:	415b      	adcs	r3, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003002:	1812      	adds	r2, r2, r0
 8003004:	eb41 0303 	adc.w	r3, r1, r3
 8003008:	f04f 0400 	mov.w	r4, #0
 800300c:	f04f 0500 	mov.w	r5, #0
 8003010:	00dd      	lsls	r5, r3, #3
 8003012:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003016:	00d4      	lsls	r4, r2, #3
 8003018:	4622      	mov	r2, r4
 800301a:	462b      	mov	r3, r5
 800301c:	1814      	adds	r4, r2, r0
 800301e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003022:	414b      	adcs	r3, r1
 8003024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f04f 0100 	mov.w	r1, #0
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	008b      	lsls	r3, r1, #2
 800303e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003042:	0082      	lsls	r2, r0, #2
 8003044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003048:	f7fd f93a 	bl	80002c0 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <UART_SetConfig+0x734>)
 8003052:	fba3 1302 	umull	r1, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2164      	movs	r1, #100	; 0x64
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	3332      	adds	r3, #50	; 0x32
 8003064:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <UART_SetConfig+0x734>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003070:	441e      	add	r6, r3
 8003072:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003076:	4618      	mov	r0, r3
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	1894      	adds	r4, r2, r2
 8003082:	603c      	str	r4, [r7, #0]
 8003084:	415b      	adcs	r3, r3
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308c:	1812      	adds	r2, r2, r0
 800308e:	eb41 0303 	adc.w	r3, r1, r3
 8003092:	f04f 0400 	mov.w	r4, #0
 8003096:	f04f 0500 	mov.w	r5, #0
 800309a:	00dd      	lsls	r5, r3, #3
 800309c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030a0:	00d4      	lsls	r4, r2, #3
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	1814      	adds	r4, r2, r0
 80030a8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80030ac:	414b      	adcs	r3, r1
 80030ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	008b      	lsls	r3, r1, #2
 80030c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030cc:	0082      	lsls	r2, r0, #2
 80030ce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80030d2:	f7fd f8f5 	bl	80002c0 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <UART_SetConfig+0x734>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <UART_SetConfig+0x734>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4432      	add	r2, r6
 8003102:	609a      	str	r2, [r3, #8]
}
 8003104:	e7ff      	b.n	8003106 <UART_SetConfig+0x722>
 8003106:	bf00      	nop
 8003108:	37f4      	adds	r7, #244	; 0xf4
 800310a:	46bd      	mov	sp, r7
 800310c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003110:	40011000 	.word	0x40011000
 8003114:	40011400 	.word	0x40011400
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <ApplicationManager_Init>:
static void ApplicationManager_Static_GotEncryptedPacketHandler(void);
static void ApplicationManager_Static_DefaultHandler(void);


void ApplicationManager_Init(ApplicationHandler_t *App)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	App->ApplicationState = APP_STATE_WAITING;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
	App->MessageLength = 0u;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	705a      	strb	r2, [r3, #1]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <ApplicationManager_StateMachine>:

void ApplicationManager_StateMachine(ApplicationHandler_t *App)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	while(1u)
	{
		switch(App->ApplicationState)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d818      	bhi.n	800317e <ApplicationManager_StateMachine+0x42>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <ApplicationManager_StateMachine+0x18>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003165 	.word	0x08003165
 8003158:	0800316b 	.word	0x0800316b
 800315c:	08003173 	.word	0x08003173
 8003160:	08003179 	.word	0x08003179
		{
			case APP_STATE_WAITING :
				ApplicationManager_Static_WaitingHandler();
 8003164:	f000 f80e 	bl	8003184 <ApplicationManager_Static_WaitingHandler>
				break;
 8003168:	e00b      	b.n	8003182 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_COMMAND :
				ApplicationManager_Static_GotCommandHandler(App);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f812 	bl	8003194 <ApplicationManager_Static_GotCommandHandler>
				break;
 8003170:	e007      	b.n	8003182 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_PACKET :
				ApplicationManager_Static_GotPacketHandler();
 8003172:	f000 f825 	bl	80031c0 <ApplicationManager_Static_GotPacketHandler>
				break;
 8003176:	e004      	b.n	8003182 <ApplicationManager_StateMachine+0x46>
			case APP_STATE_GOT_ENCRYPTED_PACKET :
				ApplicationManager_Static_GotEncryptedPacketHandler();
 8003178:	f000 f829 	bl	80031ce <ApplicationManager_Static_GotEncryptedPacketHandler>
				break;
 800317c:	e001      	b.n	8003182 <ApplicationManager_StateMachine+0x46>
			default :
				ApplicationManager_Static_DefaultHandler();
 800317e:	f000 f82d 	bl	80031dc <ApplicationManager_Static_DefaultHandler>
		switch(App->ApplicationState)
 8003182:	e7df      	b.n	8003144 <ApplicationManager_StateMachine+0x8>

08003184 <ApplicationManager_Static_WaitingHandler>:
		}
	}
}

static void ApplicationManager_Static_WaitingHandler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	// TODO
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <ApplicationManager_Static_GotCommandHandler>:

static void ApplicationManager_Static_GotCommandHandler(ApplicationHandler_t *App)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	// Check command type
	CommandLineInterfaceController_GetCommand(&hCLI, hCLI.pCLI_Buffer, App->MessageLength);
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <ApplicationManager_Static_GotCommandHandler+0x28>)
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <ApplicationManager_Static_GotCommandHandler+0x28>)
 80031a8:	f000 f876 	bl	8003298 <CommandLineInterfaceController_GetCommand>

	// Reset application state
	App->ApplicationState = APP_STATE_WAITING;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000310 	.word	0x20000310

080031c0 <ApplicationManager_Static_GotPacketHandler>:

static void ApplicationManager_Static_GotPacketHandler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
	// TODO
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <ApplicationManager_Static_GotEncryptedPacketHandler>:

static void ApplicationManager_Static_GotEncryptedPacketHandler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
	// TODO
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <ApplicationManager_Static_DefaultHandler>:

static void ApplicationManager_Static_DefaultHandler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
	// TODO
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <CommandLineInterfaceController_ClearBuffer>:
static void CommandLineInterfaceController_Controller_Static_ConnectHandler(CommandLineInterfaceControllerHandle_t *CLI);
static void CommandLineInterfaceController_Controller_Static_DisconnectHandler(CommandLineInterfaceControllerHandle_t *CLI);
static void CommandLineInterfaceController_Controller_Static_MessageHandler(CommandLineInterfaceControllerHandle_t *CLI, char *msg, uint8_t length);

void CommandLineInterfaceController_ClearBuffer(CommandLineInterfaceControllerHandle_t *CLI)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	memset(CLI->pCLI_Buffer, '\0', CLI->CLI_BufferSize);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	2100      	movs	r1, #0
 80031fe:	f001 fe7f 	bl	8004f00 <memset>

	CLI->CLI_BufferHead = 0u;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	719a      	strb	r2, [r3, #6]
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <CommandLineInterfaceController_Init>:

void CommandLineInterfaceController_Init(CommandLineInterfaceControllerHandle_t *CLI)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	CLI->pCLI_Buffer = CommandLineInterfaceController_Buffer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <CommandLineInterfaceController_Init+0x28>)
 800321c:	601a      	str	r2, [r3, #0]

	CLI->CLI_BufferSize = COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	22fa      	movs	r2, #250	; 0xfa
 8003222:	809a      	strh	r2, [r3, #4]

	CLI->CLI_BufferHead = 0u;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	719a      	strb	r2, [r3, #6]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000014c 	.word	0x2000014c

0800323c <CommandLineInterfaceController_WriteMessage>:


void CommandLineInterfaceController_WriteMessage(CommandLineInterfaceControllerHandle_t *CLI, const char *msg)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	uint16_t Size;

    // Check message length
	if(strlen(msg) <= COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH)
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f7fc ffe2 	bl	8000210 <strlen>
 800324c:	4603      	mov	r3, r0
 800324e:	2bfa      	cmp	r3, #250	; 0xfa
 8003250:	d808      	bhi.n	8003264 <CommandLineInterfaceController_WriteMessage+0x28>
	{
		Size = sprintf(CLI->pCLI_Buffer, msg);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f001 fe59 	bl	8004f10 <siprintf>
 800325e:	4603      	mov	r3, r0
 8003260:	81fb      	strh	r3, [r7, #14]
 8003262:	e007      	b.n	8003274 <CommandLineInterfaceController_WriteMessage+0x38>
	}
	else
	{
		Size = sprintf(CLI->pCLI_Buffer, "ERROR : Message is too long !\r\n");
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4909      	ldr	r1, [pc, #36]	; (8003290 <CommandLineInterfaceController_WriteMessage+0x54>)
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fe50 	bl	8004f10 <siprintf>
 8003270:	4603      	mov	r3, r0
 8003272:	81fb      	strh	r3, [r7, #14]
	}

    // Send the message
	HAL_UART_Transmit(&huart2, (uint8_t*) CLI->pCLI_Buffer, Size, 100u);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	89fa      	ldrh	r2, [r7, #14]
 800327a:	2364      	movs	r3, #100	; 0x64
 800327c:	4805      	ldr	r0, [pc, #20]	; (8003294 <CommandLineInterfaceController_WriteMessage+0x58>)
 800327e:	f7ff f842 	bl	8002306 <HAL_UART_Transmit>

	// Clear the buffer
	CommandLineInterfaceController_ClearBuffer(CLI);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffb1 	bl	80031ea <CommandLineInterfaceController_ClearBuffer>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	08005768 	.word	0x08005768
 8003294:	20000374 	.word	0x20000374

08003298 <CommandLineInterfaceController_GetCommand>:


void CommandLineInterfaceController_GetCommand(CommandLineInterfaceControllerHandle_t *CLI, char *msg, uint8_t length)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 800329e:	af00      	add	r7, sp, #0
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	6018      	str	r0, [r3, #0]
 80032a6:	f107 0308 	add.w	r3, r7, #8
 80032aa:	6019      	str	r1, [r3, #0]
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	701a      	strb	r2, [r3, #0]
	uint8_t CommandNumber = 0xFFu;
 80032b0:	23ff      	movs	r3, #255	; 0xff
 80032b2:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307

	const char commands[COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT][COMMAND_LINE_INTERFACE_CONTROLLER_CMD_MAX_LENGTH] =
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <CommandLineInterfaceController_GetCommand+0x140>)
 80032bc:	4618      	mov	r0, r3
 80032be:	4611      	mov	r1, r2
 80032c0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80032c4:	461a      	mov	r2, r3
 80032c6:	f001 fe0d 	bl	8004ee4 <memcpy>
		"connect",
		"disconnect"
	};

    // Check the given string for command patterns
	for(uint8_t i = 0u; i < COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT; ++i)
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 80032d0:	e050      	b.n	8003374 <CommandLineInterfaceController_GetCommand+0xdc>
	{
		for(uint8_t j = 0u; j < length; ++j)
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
 80032d8:	e03f      	b.n	800335a <CommandLineInterfaceController_GetCommand+0xc2>
		{
			if(commands[i][j] != msg[j])
 80032da:	f897 2306 	ldrb.w	r2, [r7, #774]	; 0x306
 80032de:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 80032e2:	f107 0114 	add.w	r1, r7, #20
 80032e6:	20fa      	movs	r0, #250	; 0xfa
 80032e8:	fb00 f202 	mul.w	r2, r0, r2
 80032ec:	440a      	add	r2, r1
 80032ee:	4413      	add	r3, r2
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 80032f6:	f107 0108 	add.w	r1, r7, #8
 80032fa:	6809      	ldr	r1, [r1, #0]
 80032fc:	440b      	add	r3, r1
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d131      	bne.n	8003368 <CommandLineInterfaceController_GetCommand+0xd0>
			{
				break;
			}
			else if((j == strlen(commands[i]) - 1u) && (length == strlen(commands[i])))
 8003304:	f897 4305 	ldrb.w	r4, [r7, #773]	; 0x305
 8003308:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 800330c:	f107 0214 	add.w	r2, r7, #20
 8003310:	21fa      	movs	r1, #250	; 0xfa
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7fc ff79 	bl	8000210 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	3b01      	subs	r3, #1
 8003322:	429c      	cmp	r4, r3
 8003324:	d114      	bne.n	8003350 <CommandLineInterfaceController_GetCommand+0xb8>
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781c      	ldrb	r4, [r3, #0]
 800332a:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 800332e:	f107 0214 	add.w	r2, r7, #20
 8003332:	21fa      	movs	r1, #250	; 0xfa
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7fc ff68 	bl	8000210 <strlen>
 8003340:	4603      	mov	r3, r0
 8003342:	429c      	cmp	r4, r3
 8003344:	d104      	bne.n	8003350 <CommandLineInterfaceController_GetCommand+0xb8>
			{
				CommandNumber = i;
 8003346:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 800334a:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
				break;
 800334e:	e00c      	b.n	800336a <CommandLineInterfaceController_GetCommand+0xd2>
		for(uint8_t j = 0u; j < length; ++j)
 8003350:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 8003354:	3301      	adds	r3, #1
 8003356:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	f897 2305 	ldrb.w	r2, [r7, #773]	; 0x305
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3b9      	bcc.n	80032da <CommandLineInterfaceController_GetCommand+0x42>
 8003366:	e000      	b.n	800336a <CommandLineInterfaceController_GetCommand+0xd2>
				break;
 8003368:	bf00      	nop
	for(uint8_t i = 0u; i < COMMAND_LINE_INTERFACE_CONTROLLER_CMD_COUNT; ++i)
 800336a:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 800336e:	3301      	adds	r3, #1
 8003370:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 8003374:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8003378:	2b02      	cmp	r3, #2
 800337a:	d9aa      	bls.n	80032d2 <CommandLineInterfaceController_GetCommand+0x3a>
			}
		}
	}

    // Execute the given command
	switch(CommandNumber)
 800337c:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8003380:	2b02      	cmp	r3, #2
 8003382:	d012      	beq.n	80033aa <CommandLineInterfaceController_GetCommand+0x112>
 8003384:	2b02      	cmp	r3, #2
 8003386:	dc16      	bgt.n	80033b6 <CommandLineInterfaceController_GetCommand+0x11e>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <CommandLineInterfaceController_GetCommand+0xfa>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d006      	beq.n	800339e <CommandLineInterfaceController_GetCommand+0x106>
 8003390:	e011      	b.n	80033b6 <CommandLineInterfaceController_GetCommand+0x11e>
	{
		case 0u :
			CommandLineInterfaceController_Controller_Static_HelpHandler(CLI);
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f000 f820 	bl	80033dc <CommandLineInterfaceController_Controller_Static_HelpHandler>
			break;
 800339c:	e016      	b.n	80033cc <CommandLineInterfaceController_GetCommand+0x134>
		case 1u :
			CommandLineInterfaceController_Controller_Static_ConnectHandler(CLI);
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f000 f82e 	bl	8003404 <CommandLineInterfaceController_Controller_Static_ConnectHandler>
			break;
 80033a8:	e010      	b.n	80033cc <CommandLineInterfaceController_GetCommand+0x134>
		case 2u :
			CommandLineInterfaceController_Controller_Static_DisconnectHandler(CLI);
 80033aa:	f107 030c 	add.w	r3, r7, #12
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	f000 f836 	bl	8003420 <CommandLineInterfaceController_Controller_Static_DisconnectHandler>
			break;
 80033b4:	e00a      	b.n	80033cc <CommandLineInterfaceController_GetCommand+0x134>
		default :
			CommandLineInterfaceController_Controller_Static_MessageHandler(CLI, msg, length);
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	f107 0108 	add.w	r1, r7, #8
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	f000 f839 	bl	800343c <CommandLineInterfaceController_Controller_Static_MessageHandler>
	}
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	f507 7743 	add.w	r7, r7, #780	; 0x30c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	08005788 	.word	0x08005788

080033dc <CommandLineInterfaceController_Controller_Static_HelpHandler>:


static void CommandLineInterfaceController_Controller_Static_HelpHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	CommandLineInterfaceController_WriteMessage(CLI, ">> connect - show list of available connections\r\n");
 80033e4:	4905      	ldr	r1, [pc, #20]	; (80033fc <CommandLineInterfaceController_Controller_Static_HelpHandler+0x20>)
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff28 	bl	800323c <CommandLineInterfaceController_WriteMessage>
	CommandLineInterfaceController_WriteMessage(CLI, ">> disconnect - disconnect from all connections\r\n");
 80033ec:	4904      	ldr	r1, [pc, #16]	; (8003400 <CommandLineInterfaceController_Controller_Static_HelpHandler+0x24>)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff24 	bl	800323c <CommandLineInterfaceController_WriteMessage>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	08005a78 	.word	0x08005a78
 8003400:	08005aac 	.word	0x08005aac

08003404 <CommandLineInterfaceController_Controller_Static_ConnectHandler>:

static void CommandLineInterfaceController_Controller_Static_ConnectHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	CommandLineInterfaceController_WriteMessage(CLI, "List of available connections : \r\n");
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <CommandLineInterfaceController_Controller_Static_ConnectHandler+0x18>)
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff14 	bl	800323c <CommandLineInterfaceController_WriteMessage>
	// TODO - connections list
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08005ae0 	.word	0x08005ae0

08003420 <CommandLineInterfaceController_Controller_Static_DisconnectHandler>:

static void CommandLineInterfaceController_Controller_Static_DisconnectHandler(CommandLineInterfaceControllerHandle_t *CLI)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	// TODO - disconnect part of the code
	CommandLineInterfaceController_WriteMessage(CLI, "Disconnected from all connections\r\n");
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <CommandLineInterfaceController_Controller_Static_DisconnectHandler+0x18>)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff06 	bl	800323c <CommandLineInterfaceController_WriteMessage>
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08005b04 	.word	0x08005b04

0800343c <CommandLineInterfaceController_Controller_Static_MessageHandler>:

static void CommandLineInterfaceController_Controller_Static_MessageHandler(CommandLineInterfaceControllerHandle_t *CLI, char *msg, uint8_t length)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	71fb      	strb	r3, [r7, #7]
	// TODO - pack the message and send
	uint8_t status;
	uint16_t Size;


	msg[length++ + 1u] = '\n';
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	71fa      	strb	r2, [r7, #7]
 8003450:	3301      	adds	r3, #1
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	220a      	movs	r2, #10
 8003458:	701a      	strb	r2, [r3, #0]
	msg[length++ + 1u] = '\0';
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	71fa      	strb	r2, [r7, #7]
 8003460:	3301      	adds	r3, #1
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]

	if(length <= 32u)
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2b20      	cmp	r3, #32
 800346e:	d83e      	bhi.n	80034ee <CommandLineInterfaceController_Controller_Static_MessageHandler+0xb2>
	{
		status = NRF24_write(msg, 32u);
 8003470:	2120      	movs	r1, #32
 8003472:	68b8      	ldr	r0, [r7, #8]
 8003474:	f000 fadd 	bl	8003a32 <NRF24_write>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

		if(status & _BV(BIT_TX_DS))
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <CommandLineInterfaceController_Controller_Static_MessageHandler+0x6a>
		{
			Size = sprintf(CLI->pCLI_Buffer, "Transmitted Successfully\r\n");
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	491d      	ldr	r1, [pc, #116]	; (8003500 <CommandLineInterfaceController_Controller_Static_MessageHandler+0xc4>)
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fd3f 	bl	8004f10 <siprintf>
 8003492:	4603      	mov	r3, r0
 8003494:	82bb      	strh	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, (uint8_t*) CLI->pCLI_Buffer, Size, 100u);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	8aba      	ldrh	r2, [r7, #20]
 800349c:	2364      	movs	r3, #100	; 0x64
 800349e:	4819      	ldr	r0, [pc, #100]	; (8003504 <CommandLineInterfaceController_Controller_Static_MessageHandler+0xc8>)
 80034a0:	f7fe ff31 	bl	8002306 <HAL_UART_Transmit>
 80034a4:	e023      	b.n	80034ee <CommandLineInterfaceController_Controller_Static_MessageHandler+0xb2>
		}
		else if(status & _BV(BIT_MAX_RT))
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <CommandLineInterfaceController_Controller_Static_MessageHandler+0x94>
		{
			Size = sprintf(CLI->pCLI_Buffer, "Max retransmission level reached\r\n");
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4914      	ldr	r1, [pc, #80]	; (8003508 <CommandLineInterfaceController_Controller_Static_MessageHandler+0xcc>)
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fd2a 	bl	8004f10 <siprintf>
 80034bc:	4603      	mov	r3, r0
 80034be:	82bb      	strh	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, (uint8_t*) CLI->pCLI_Buffer, Size, 100u);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	8aba      	ldrh	r2, [r7, #20]
 80034c6:	2364      	movs	r3, #100	; 0x64
 80034c8:	480e      	ldr	r0, [pc, #56]	; (8003504 <CommandLineInterfaceController_Controller_Static_MessageHandler+0xc8>)
 80034ca:	f7fe ff1c 	bl	8002306 <HAL_UART_Transmit>
 80034ce:	e00e      	b.n	80034ee <CommandLineInterfaceController_Controller_Static_MessageHandler+0xb2>
		}
		else
		{
			Size = sprintf(CLI->pCLI_Buffer, "Error\r\n");
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	490d      	ldr	r1, [pc, #52]	; (800350c <CommandLineInterfaceController_Controller_Static_MessageHandler+0xd0>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fd1a 	bl	8004f10 <siprintf>
 80034dc:	4603      	mov	r3, r0
 80034de:	82bb      	strh	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, (uint8_t*) CLI->pCLI_Buffer, Size, 100u);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	8aba      	ldrh	r2, [r7, #20]
 80034e6:	2364      	movs	r3, #100	; 0x64
 80034e8:	4806      	ldr	r0, [pc, #24]	; (8003504 <CommandLineInterfaceController_Controller_Static_MessageHandler+0xc8>)
 80034ea:	f7fe ff0c 	bl	8002306 <HAL_UART_Transmit>
		}
	}
	CommandLineInterfaceController_ClearBuffer(CLI);
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fe7b 	bl	80031ea <CommandLineInterfaceController_ClearBuffer>

	NRF24_startListening();;
 80034f4:	f000 fa6c 	bl	80039d0 <NRF24_startListening>
}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08005b28 	.word	0x08005b28
 8003504:	20000374 	.word	0x20000374
 8003508:	08005b44 	.word	0x08005b44
 800350c:	08005b68 	.word	0x08005b68

08003510 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <NRF24_DelayMicroSeconds+0x3c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <NRF24_DelayMicroSeconds+0x40>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9a      	lsrs	r2, r3, #18
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8003530:	bf00      	nop
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	60fa      	str	r2, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1fa      	bne.n	8003532 <NRF24_DelayMicroSeconds+0x22>
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000008 	.word	0x20000008
 8003550:	165e9f81 	.word	0x165e9f81

08003554 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <NRF24_csn+0x20>
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <NRF24_csn+0x38>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <NRF24_csn+0x3c>)
 8003568:	8811      	ldrh	r1, [r2, #0]
 800356a:	2201      	movs	r2, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fb81 	bl	8000c74 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003572:	e007      	b.n	8003584 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <NRF24_csn+0x38>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a05      	ldr	r2, [pc, #20]	; (8003590 <NRF24_csn+0x3c>)
 800357a:	8811      	ldrh	r1, [r2, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fb78 	bl	8000c74 <HAL_GPIO_WritePin>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	2000009c 	.word	0x2000009c
 8003590:	200000a0 	.word	0x200000a0

08003594 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <NRF24_ce+0x20>
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <NRF24_ce+0x38>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <NRF24_ce+0x3c>)
 80035a8:	8811      	ldrh	r1, [r2, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fb61 	bl	8000c74 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80035b2:	e007      	b.n	80035c4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <NRF24_ce+0x38>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <NRF24_ce+0x3c>)
 80035ba:	8811      	ldrh	r1, [r2, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fb58 	bl	8000c74 <HAL_GPIO_WritePin>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	2000009c 	.word	0x2000009c
 80035d0:	200000a2 	.word	0x200000a2

080035d4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7ff ffb8 	bl	8003554 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80035ee:	f107 010c 	add.w	r1, r7, #12
 80035f2:	2364      	movs	r3, #100	; 0x64
 80035f4:	2201      	movs	r2, #1
 80035f6:	480a      	ldr	r0, [pc, #40]	; (8003620 <NRF24_read_register+0x4c>)
 80035f8:	f7fe f948 	bl	800188c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	2364      	movs	r3, #100	; 0x64
 8003604:	2201      	movs	r2, #1
 8003606:	4806      	ldr	r0, [pc, #24]	; (8003620 <NRF24_read_register+0x4c>)
 8003608:	f7fe fa74 	bl	8001af4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800360c:	7b7b      	ldrb	r3, [r7, #13]
 800360e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003610:	2001      	movs	r0, #1
 8003612:	f7ff ff9f 	bl	8003554 <NRF24_csn>
	return retData;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200000a4 	.word	0x200000a4

08003624 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
 8003630:	4613      	mov	r3, r2
 8003632:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003634:	2000      	movs	r0, #0
 8003636:	f7ff ff8d 	bl	8003554 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	b2db      	uxtb	r3, r3
 8003642:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003644:	f107 010c 	add.w	r1, r7, #12
 8003648:	2364      	movs	r3, #100	; 0x64
 800364a:	2201      	movs	r2, #1
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <NRF24_read_registerN+0x4c>)
 800364e:	f7fe f91d 	bl	800188c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003652:	79bb      	ldrb	r3, [r7, #6]
 8003654:	b29a      	uxth	r2, r3
 8003656:	2364      	movs	r3, #100	; 0x64
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4805      	ldr	r0, [pc, #20]	; (8003670 <NRF24_read_registerN+0x4c>)
 800365c:	f7fe fa4a 	bl	8001af4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003660:	2001      	movs	r0, #1
 8003662:	f7ff ff77 	bl	8003554 <NRF24_csn>
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200000a4 	.word	0x200000a4

08003674 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	460a      	mov	r2, r1
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	4613      	mov	r3, r2
 8003682:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff ff65 	bl	8003554 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f043 0320 	orr.w	r3, r3, #32
 8003690:	b2db      	uxtb	r3, r3
 8003692:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003694:	79bb      	ldrb	r3, [r7, #6]
 8003696:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003698:	f107 010c 	add.w	r1, r7, #12
 800369c:	2364      	movs	r3, #100	; 0x64
 800369e:	2202      	movs	r2, #2
 80036a0:	4804      	ldr	r0, [pc, #16]	; (80036b4 <NRF24_write_register+0x40>)
 80036a2:	f7fe f8f3 	bl	800188c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7ff ff54 	bl	8003554 <NRF24_csn>
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200000a4 	.word	0x200000a4

080036b8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff ff43 	bl	8003554 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80036d8:	f107 010c 	add.w	r1, r7, #12
 80036dc:	2364      	movs	r3, #100	; 0x64
 80036de:	2201      	movs	r2, #1
 80036e0:	4808      	ldr	r0, [pc, #32]	; (8003704 <NRF24_write_registerN+0x4c>)
 80036e2:	f7fe f8d3 	bl	800188c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80036e6:	79bb      	ldrb	r3, [r7, #6]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	2364      	movs	r3, #100	; 0x64
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <NRF24_write_registerN+0x4c>)
 80036f0:	f7fe f8cc 	bl	800188c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7ff ff2d 	bl	8003554 <NRF24_csn>
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200000a4 	.word	0x200000a4

08003708 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003714:	2000      	movs	r0, #0
 8003716:	f7ff ff1d 	bl	8003554 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800371a:	23a0      	movs	r3, #160	; 0xa0
 800371c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800371e:	f107 010f 	add.w	r1, r7, #15
 8003722:	2364      	movs	r3, #100	; 0x64
 8003724:	2201      	movs	r2, #1
 8003726:	4808      	ldr	r0, [pc, #32]	; (8003748 <NRF24_write_payload+0x40>)
 8003728:	f7fe f8b0 	bl	800188c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	b29a      	uxth	r2, r3
 8003730:	2364      	movs	r3, #100	; 0x64
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4804      	ldr	r0, [pc, #16]	; (8003748 <NRF24_write_payload+0x40>)
 8003736:	f7fe f8a9 	bl	800188c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800373a:	2001      	movs	r0, #1
 800373c:	f7ff ff0a 	bl	8003554 <NRF24_csn>
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200000a4 	.word	0x200000a4

0800374c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8003758:	f000 fa8c 	bl	8003c74 <NRF24_getPayloadSize>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	4293      	cmp	r3, r2
 8003764:	d303      	bcc.n	800376e <NRF24_read_payload+0x22>
 8003766:	f000 fa85 	bl	8003c74 <NRF24_getPayloadSize>
 800376a:	4603      	mov	r3, r0
 800376c:	e000      	b.n	8003770 <NRF24_read_payload+0x24>
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003772:	2000      	movs	r0, #0
 8003774:	f7ff feee 	bl	8003554 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003778:	2361      	movs	r3, #97	; 0x61
 800377a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800377c:	f107 010e 	add.w	r1, r7, #14
 8003780:	2364      	movs	r3, #100	; 0x64
 8003782:	2201      	movs	r2, #1
 8003784:	4808      	ldr	r0, [pc, #32]	; (80037a8 <NRF24_read_payload+0x5c>)
 8003786:	f7fe f881 	bl	800188c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	b29a      	uxth	r2, r3
 800378e:	2364      	movs	r3, #100	; 0x64
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <NRF24_read_payload+0x5c>)
 8003794:	f7fe f9ae 	bl	8001af4 <HAL_SPI_Receive>
	NRF24_csn(1);
 8003798:	2001      	movs	r0, #1
 800379a:	f7ff fedb 	bl	8003554 <NRF24_csn>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200000a4 	.word	0x200000a4

080037ac <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80037b0:	21ff      	movs	r1, #255	; 0xff
 80037b2:	20e1      	movs	r0, #225	; 0xe1
 80037b4:	f7ff ff5e 	bl	8003674 <NRF24_write_register>
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}

080037bc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80037c0:	21ff      	movs	r1, #255	; 0xff
 80037c2:	20e2      	movs	r0, #226	; 0xe2
 80037c4:	f7ff ff56 	bl	8003674 <NRF24_write_register>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}

080037cc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80037d2:	2007      	movs	r0, #7
 80037d4:	f7ff fefe 	bl	80035d4 <NRF24_read_register>
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80037dc:	79fb      	ldrb	r3, [r7, #7]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80037e8:	b082      	sub	sp, #8
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80037fc:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <NRF24_begin+0x1d8>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	2258      	movs	r2, #88	; 0x58
 8003806:	4619      	mov	r1, r3
 8003808:	f001 fb6c 	bl	8004ee4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800380c:	4a6d      	ldr	r2, [pc, #436]	; (80039c4 <NRF24_begin+0x1dc>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003812:	4a6d      	ldr	r2, [pc, #436]	; (80039c8 <NRF24_begin+0x1e0>)
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003818:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <NRF24_begin+0x1e4>)
 800381a:	883b      	ldrh	r3, [r7, #0]
 800381c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800381e:	2001      	movs	r0, #1
 8003820:	f7ff fe98 	bl	8003554 <NRF24_csn>
	NRF24_ce(0);
 8003824:	2000      	movs	r0, #0
 8003826:	f7ff feb5 	bl	8003594 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800382a:	2005      	movs	r0, #5
 800382c:	f7fc ff36 	bl	800069c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x38);
 8003830:	2138      	movs	r1, #56	; 0x38
 8003832:	2000      	movs	r0, #0
 8003834:	f7ff ff1e 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8003838:	213f      	movs	r1, #63	; 0x3f
 800383a:	2001      	movs	r0, #1
 800383c:	f7ff ff1a 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003840:	2103      	movs	r1, #3
 8003842:	2002      	movs	r0, #2
 8003844:	f7ff ff16 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8003848:	2103      	movs	r1, #3
 800384a:	2003      	movs	r0, #3
 800384c:	f7ff ff12 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003850:	2103      	movs	r1, #3
 8003852:	2004      	movs	r0, #4
 8003854:	f7ff ff0e 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003858:	2102      	movs	r1, #2
 800385a:	2005      	movs	r0, #5
 800385c:	f7ff ff0a 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003860:	210f      	movs	r1, #15
 8003862:	2006      	movs	r0, #6
 8003864:	f7ff ff06 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003868:	210e      	movs	r1, #14
 800386a:	2007      	movs	r0, #7
 800386c:	f7ff ff02 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003870:	2100      	movs	r1, #0
 8003872:	2008      	movs	r0, #8
 8003874:	f7ff fefe 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003878:	2100      	movs	r1, #0
 800387a:	2009      	movs	r0, #9
 800387c:	f7ff fefa 	bl	8003674 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8003880:	23e7      	movs	r3, #231	; 0xe7
 8003882:	733b      	strb	r3, [r7, #12]
 8003884:	23e7      	movs	r3, #231	; 0xe7
 8003886:	72fb      	strb	r3, [r7, #11]
 8003888:	23e7      	movs	r3, #231	; 0xe7
 800388a:	72bb      	strb	r3, [r7, #10]
 800388c:	23e7      	movs	r3, #231	; 0xe7
 800388e:	727b      	strb	r3, [r7, #9]
 8003890:	23e7      	movs	r3, #231	; 0xe7
 8003892:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	2205      	movs	r2, #5
 800389a:	4619      	mov	r1, r3
 800389c:	200a      	movs	r0, #10
 800389e:	f7ff ff0b 	bl	80036b8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80038a2:	23c2      	movs	r3, #194	; 0xc2
 80038a4:	733b      	strb	r3, [r7, #12]
 80038a6:	23c2      	movs	r3, #194	; 0xc2
 80038a8:	72fb      	strb	r3, [r7, #11]
 80038aa:	23c2      	movs	r3, #194	; 0xc2
 80038ac:	72bb      	strb	r3, [r7, #10]
 80038ae:	23c2      	movs	r3, #194	; 0xc2
 80038b0:	727b      	strb	r3, [r7, #9]
 80038b2:	23c2      	movs	r3, #194	; 0xc2
 80038b4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	2205      	movs	r2, #5
 80038bc:	4619      	mov	r1, r3
 80038be:	200b      	movs	r0, #11
 80038c0:	f7ff fefa 	bl	80036b8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80038c4:	21c3      	movs	r1, #195	; 0xc3
 80038c6:	200c      	movs	r0, #12
 80038c8:	f7ff fed4 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80038cc:	21c4      	movs	r1, #196	; 0xc4
 80038ce:	200d      	movs	r0, #13
 80038d0:	f7ff fed0 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80038d4:	21c5      	movs	r1, #197	; 0xc5
 80038d6:	200e      	movs	r0, #14
 80038d8:	f7ff fecc 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80038dc:	21c6      	movs	r1, #198	; 0xc6
 80038de:	200f      	movs	r0, #15
 80038e0:	f7ff fec8 	bl	8003674 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80038e4:	23e7      	movs	r3, #231	; 0xe7
 80038e6:	733b      	strb	r3, [r7, #12]
 80038e8:	23e7      	movs	r3, #231	; 0xe7
 80038ea:	72fb      	strb	r3, [r7, #11]
 80038ec:	23e7      	movs	r3, #231	; 0xe7
 80038ee:	72bb      	strb	r3, [r7, #10]
 80038f0:	23e7      	movs	r3, #231	; 0xe7
 80038f2:	727b      	strb	r3, [r7, #9]
 80038f4:	23e7      	movs	r3, #231	; 0xe7
 80038f6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	2205      	movs	r2, #5
 80038fe:	4619      	mov	r1, r3
 8003900:	2010      	movs	r0, #16
 8003902:	f7ff fed9 	bl	80036b8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003906:	2100      	movs	r1, #0
 8003908:	2011      	movs	r0, #17
 800390a:	f7ff feb3 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800390e:	2100      	movs	r1, #0
 8003910:	2012      	movs	r0, #18
 8003912:	f7ff feaf 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003916:	2100      	movs	r1, #0
 8003918:	2013      	movs	r0, #19
 800391a:	f7ff feab 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800391e:	2100      	movs	r1, #0
 8003920:	2014      	movs	r0, #20
 8003922:	f7ff fea7 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003926:	2100      	movs	r1, #0
 8003928:	2015      	movs	r0, #21
 800392a:	f7ff fea3 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800392e:	2100      	movs	r1, #0
 8003930:	2016      	movs	r0, #22
 8003932:	f7ff fe9f 	bl	8003674 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8003936:	f000 fa95 	bl	8003e64 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800393a:	2100      	movs	r1, #0
 800393c:	201c      	movs	r0, #28
 800393e:	f7ff fe99 	bl	8003674 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003942:	2100      	movs	r1, #0
 8003944:	201d      	movs	r0, #29
 8003946:	f7ff fe95 	bl	8003674 <NRF24_write_register>
	printRadioSettings();
 800394a:	f000 faa5 	bl	8003e98 <printRadioSettings>
	//Initialise retries 15 and delay 4000 usec
	NRF24_setRetries(15, 15);
 800394e:	210f      	movs	r1, #15
 8003950:	200f      	movs	r0, #15
 8003952:	f000 f947 	bl	8003be4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8003956:	2003      	movs	r0, #3
 8003958:	f000 f9c5 	bl	8003ce6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);
 800395c:	2002      	movs	r0, #2
 800395e:	f000 f9fb 	bl	8003d58 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003962:	2002      	movs	r0, #2
 8003964:	f000 fa3e 	bl	8003de4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003968:	f000 f990 	bl	8003c8c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800396c:	2020      	movs	r0, #32
 800396e:	f000 f969 	bl	8003c44 <NRF24_setPayloadSize>
	//Set auto ACK
	NRF24_setAutoAck(true);
 8003972:	2001      	movs	r0, #1
 8003974:	f000 f9a2 	bl	8003cbc <NRF24_setAutoAck>
	
	//Reset status register
	NRF24_resetStatus();
 8003978:	f000 fa6b 	bl	8003e52 <NRF24_resetStatus>
	//Initialise channel to 52
	NRF24_setChannel(52);
 800397c:	2034      	movs	r0, #52	; 0x34
 800397e:	f000 f94c 	bl	8003c1a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003982:	f7ff ff13 	bl	80037ac <NRF24_flush_tx>
	NRF24_flush_rx();
 8003986:	f7ff ff19 	bl	80037bc <NRF24_flush_rx>
	
	NRF24_powerDown();
 800398a:	f000 fa53 	bl	8003e34 <NRF24_powerDown>

	NRF24_openWritingPipe(0x11223344);
 800398e:	a10a      	add	r1, pc, #40	; (adr r1, 80039b8 <NRF24_begin+0x1d0>)
 8003990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003994:	f000 f8b4 	bl	8003b00 <NRF24_openWritingPipe>
	NRF24_openReadingPipe(1, 0x11223344);
 8003998:	a307      	add	r3, pc, #28	; (adr r3, 80039b8 <NRF24_begin+0x1d0>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	2001      	movs	r0, #1
 80039a0:	f000 f8d2 	bl	8003b48 <NRF24_openReadingPipe>
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ae:	b002      	add	sp, #8
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	f3af 8000 	nop.w
 80039b8:	11223344 	.word	0x11223344
 80039bc:	00000000 	.word	0x00000000
 80039c0:	200000a4 	.word	0x200000a4
 80039c4:	2000009c 	.word	0x2000009c
 80039c8:	200000a0 	.word	0x200000a0
 80039cc:	200000a2 	.word	0x200000a2

080039d0 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7ff fdfd 	bl	80035d4 <NRF24_read_register>
 80039da:	4603      	mov	r3, r0
 80039dc:	f043 0303 	orr.w	r3, r3, #3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff fe45 	bl	8003674 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <NRF24_startListening+0x48>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	d004      	beq.n	80039fe <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80039f4:	2205      	movs	r2, #5
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <NRF24_startListening+0x48>)
 80039f8:	200a      	movs	r0, #10
 80039fa:	f7ff fe5d 	bl	80036b8 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80039fe:	f7ff fed5 	bl	80037ac <NRF24_flush_tx>
	NRF24_flush_rx();
 8003a02:	f7ff fedb 	bl	80037bc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7ff fdc4 	bl	8003594 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8003a0c:	2096      	movs	r0, #150	; 0x96
 8003a0e:	f7ff fd7f 	bl	8003510 <NRF24_DelayMicroSeconds>
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000090 	.word	0x20000090

08003a1c <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7ff fdb7 	bl	8003594 <NRF24_ce>
	NRF24_flush_tx();
 8003a26:	f7ff fec1 	bl	80037ac <NRF24_flush_tx>
	NRF24_flush_rx();
 8003a2a:	f7ff fec7 	bl	80037bc <NRF24_flush_rx>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
uint8_t NRF24_write( const void* buf, uint8_t len )
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
	uint8_t status;

	//Stop listening
	NRF24_stopListening();
 8003a3e:	f7ff ffed 	bl	8003a1c <NRF24_stopListening>

	//Start writing
	NRF24_resetStatus();
 8003a42:	f000 fa06 	bl	8003e52 <NRF24_resetStatus>

	// Transmitter power-up
	NRF24_ce(0);
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7ff fda4 	bl	8003594 <NRF24_ce>
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff fdc1 	bl	80035d4 <NRF24_read_register>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	2000      	movs	r0, #0
 8003a64:	f7ff fe06 	bl	8003674 <NRF24_write_register>
	NRF24_ce(1);
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f7ff fd93 	bl	8003594 <NRF24_ce>
	NRF24_DelayMicroSeconds(150);
 8003a6e:	2096      	movs	r0, #150	; 0x96
 8003a70:	f7ff fd4e 	bl	8003510 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe45 	bl	8003708 <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7ff fd88 	bl	8003594 <NRF24_ce>
	NRF24_DelayMicroSeconds(150);
 8003a84:	2096      	movs	r0, #150	; 0x96
 8003a86:	f7ff fd43 	bl	8003510 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7ff fd82 	bl	8003594 <NRF24_ce>

  	uint32_t sent_at = HAL_GetTick();
 8003a90:	f7fc fdf8 	bl	8000684 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]
	do
  	{
		//Get status register
		status = NRF24_get_status();
 8003a96:	f7ff fe99 	bl	80037cc <NRF24_get_status>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	72fb      	strb	r3, [r7, #11]
  	}
  	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < 10u ) );
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <NRF24_write+0x84>
 8003aa8:	f7fc fdec 	bl	8000684 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d9ef      	bls.n	8003a96 <NRF24_write+0x64>

	// flush
	NRF24_flush_tx();
 8003ab6:	f7ff fe79 	bl	80037ac <NRF24_flush_tx>

	return status;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <NRF24_read>:
{
	return NRF24_availablePipe(NULL);
}
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fe39 	bl	800374c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8003ada:	2017      	movs	r0, #23
 8003adc:	f7ff fd7a 	bl	80035d4 <NRF24_read_register>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8003ae8:	f7ff fe68 	bl	80037bc <NRF24_flush_rx>
	//NRF24_getDynamicPayloadSize();
	return rxStatus;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	4619      	mov	r1, r3
 8003b10:	200a      	movs	r0, #10
 8003b12:	f7ff fdd1 	bl	80036b8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8003b16:	463b      	mov	r3, r7
 8003b18:	2205      	movs	r2, #5
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	2010      	movs	r0, #16
 8003b1e:	f7ff fdcb 	bl	80036b8 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8003b22:	2320      	movs	r3, #32
 8003b24:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <NRF24_openWritingPipe+0x44>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bf28      	it	cs
 8003b30:	4613      	movcs	r3, r2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	4619      	mov	r1, r3
 8003b36:	2011      	movs	r0, #17
 8003b38:	f7ff fd9c 	bl	8003674 <NRF24_write_register>
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000098 	.word	0x20000098

08003b48 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4601      	mov	r1, r0
 8003b50:	e9c7 2300 	strd	r2, r3, [r7]
 8003b54:	460b      	mov	r3, r1
 8003b56:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8003b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b62:	491c      	ldr	r1, [pc, #112]	; (8003bd4 <NRF24_openReadingPipe+0x8c>)
 8003b64:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d82d      	bhi.n	8003bca <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d808      	bhi.n	8003b86 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <NRF24_openReadingPipe+0x90>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd9a 	bl	80036b8 <NRF24_write_registerN>
 8003b84:	e007      	b.n	8003b96 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <NRF24_openReadingPipe+0x90>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fd91 	bl	80036b8 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <NRF24_openReadingPipe+0x94>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <NRF24_openReadingPipe+0x98>)
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fd66 	bl	8003674 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f7ff fd13 	bl	80035d4 <NRF24_read_register>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b25a      	sxtb	r2, r3
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	f7ff fd55 	bl	8003674 <NRF24_write_register>
	}
	
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000090 	.word	0x20000090
 8003bd8:	080060f4 	.word	0x080060f4
 8003bdc:	080060fc 	.word	0x080060fc
 8003be0:	20000098 	.word	0x20000098

08003be4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	460a      	mov	r2, r1
 8003bee:	71fb      	strb	r3, [r7, #7]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	b25a      	sxtb	r2, r3
 8003bfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	2004      	movs	r0, #4
 8003c0e:	f7ff fd31 	bl	8003674 <NRF24_write_register>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8003c24:	237f      	movs	r3, #127	; 0x7f
 8003c26:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf28      	it	cs
 8003c30:	4613      	movcs	r3, r2
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	2005      	movs	r0, #5
 8003c38:	f7ff fd1c 	bl	8003674 <NRF24_write_register>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bf28      	it	cs
 8003c5a:	4613      	movcs	r3, r2
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <NRF24_setPayloadSize+0x2c>)
 8003c60:	701a      	strb	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000098 	.word	0x20000098

08003c74 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
	return payload_size;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <NRF24_getPayloadSize+0x14>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000098 	.word	0x20000098

08003c8c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8003c90:	201d      	movs	r0, #29
 8003c92:	f7ff fc9f 	bl	80035d4 <NRF24_read_register>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	201d      	movs	r0, #29
 8003ca2:	f7ff fce7 	bl	8003674 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	201c      	movs	r0, #28
 8003caa:	f7ff fce3 	bl	8003674 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8003cae:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <NRF24_disableDynamicPayloads+0x2c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000099 	.word	0x20000099

08003cbc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8003ccc:	213f      	movs	r1, #63	; 0x3f
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7ff fcd0 	bl	8003674 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8003cd4:	e003      	b.n	8003cde <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7ff fccb 	bl	8003674 <NRF24_write_register>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003cf0:	2006      	movs	r0, #6
 8003cf2:	f7ff fc6f 	bl	80035d4 <NRF24_read_register>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	f023 0306 	bic.w	r3, r3, #6
 8003d00:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d104      	bne.n	8003d12 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	f043 0306 	orr.w	r3, r3, #6
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e019      	b.n	8003d46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d104      	bne.n	8003d22 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e011      	b.n	8003d46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d104      	bne.n	8003d32 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	f043 0302 	orr.w	r3, r3, #2
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	e009      	b.n	8003d46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d103      	bne.n	8003d46 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	f043 0306 	orr.w	r3, r3, #6
 8003d44:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	2006      	movs	r0, #6
 8003d4c:	f7ff fc92 	bl	8003674 <NRF24_write_register>
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003d66:	2006      	movs	r0, #6
 8003d68:	f7ff fc34 	bl	80035d4 <NRF24_read_register>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <NRF24_setDataRate+0x88>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8003d76:	7bbb      	ldrb	r3, [r7, #14]
 8003d78:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003d7c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d107      	bne.n	8003d94 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <NRF24_setDataRate+0x88>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8003d8a:	7bbb      	ldrb	r3, [r7, #14]
 8003d8c:	f043 0320 	orr.w	r3, r3, #32
 8003d90:	73bb      	strb	r3, [r7, #14]
 8003d92:	e00d      	b.n	8003db0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <NRF24_setDataRate+0x88>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	73bb      	strb	r3, [r7, #14]
 8003da8:	e002      	b.n	8003db0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <NRF24_setDataRate+0x88>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	4619      	mov	r1, r3
 8003db4:	2006      	movs	r0, #6
 8003db6:	f7ff fc5d 	bl	8003674 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8003dba:	2006      	movs	r0, #6
 8003dbc:	f7ff fc0a 	bl	80035d4 <NRF24_read_register>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d102      	bne.n	8003dd0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e002      	b.n	8003dd6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <NRF24_setDataRate+0x88>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2000009a 	.word	0x2000009a

08003de4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7ff fbf0 	bl	80035d4 <NRF24_read_register>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00f      	beq.n	8003e22 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d104      	bne.n	8003e12 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e007      	b.n	8003e22 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	4619      	mov	r1, r3
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff fc24 	bl	8003674 <NRF24_write_register>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff fbcb 	bl	80035d4 <NRF24_read_register>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f023 0302 	bic.w	r3, r3, #2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7ff fc13 	bl	8003674 <NRF24_write_register>
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8003e56:	2170      	movs	r1, #112	; 0x70
 8003e58:	2007      	movs	r0, #7
 8003e5a:	f7ff fc0b 	bl	8003674 <NRF24_write_register>
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7ff fb72 	bl	8003554 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003e70:	2350      	movs	r3, #80	; 0x50
 8003e72:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8003e74:	2373      	movs	r3, #115	; 0x73
 8003e76:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003e78:	1d39      	adds	r1, r7, #4
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	4805      	ldr	r0, [pc, #20]	; (8003e94 <NRF24_ACTIVATE_cmd+0x30>)
 8003e80:	f7fd fd04 	bl	800188c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7ff fb65 	bl	8003554 <NRF24_csn>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200000a4 	.word	0x200000a4

08003e98 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	b0a1      	sub	sp, #132	; 0x84
 8003e9c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8003e9e:	f107 0308 	add.w	r3, r7, #8
 8003ea2:	49c3      	ldr	r1, [pc, #780]	; (80041b0 <printRadioSettings+0x318>)
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 f833 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003eaa:	f107 0308 	add.w	r3, r7, #8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc f9ae 	bl	8000210 <strlen>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	f107 0108 	add.w	r1, r7, #8
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	48bd      	ldr	r0, [pc, #756]	; (80041b4 <printRadioSettings+0x31c>)
 8003ec0:	f7fe fa21 	bl	8002306 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7ff fb85 	bl	80035d4 <NRF24_read_register>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <printRadioSettings+0x5e>
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	49b2      	ldr	r1, [pc, #712]	; (80041b8 <printRadioSettings+0x320>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f80e 	bl	8004f10 <siprintf>
 8003ef4:	e00c      	b.n	8003f10 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	49b0      	ldr	r1, [pc, #704]	; (80041bc <printRadioSettings+0x324>)
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f807 	bl	8004f10 <siprintf>
 8003f02:	e005      	b.n	8003f10 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003f04:	f107 0308 	add.w	r3, r7, #8
 8003f08:	49ad      	ldr	r1, [pc, #692]	; (80041c0 <printRadioSettings+0x328>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 f800 	bl	8004f10 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc f97b 	bl	8000210 <strlen>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	f107 0108 	add.w	r1, r7, #8
 8003f22:	230a      	movs	r3, #10
 8003f24:	48a3      	ldr	r0, [pc, #652]	; (80041b4 <printRadioSettings+0x31c>)
 8003f26:	f7fe f9ee 	bl	8002306 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f7ff fb52 	bl	80035d4 <NRF24_read_register>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f3a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfcc      	ite	gt
 8003f42:	2301      	movgt	r3, #1
 8003f44:	2300      	movle	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f4e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfcc      	ite	gt
 8003f56:	2301      	movgt	r3, #1
 8003f58:	2300      	movle	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f62:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfcc      	ite	gt
 8003f6a:	2301      	movgt	r3, #1
 8003f6c:	2300      	movle	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f76:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfcc      	ite	gt
 8003f7e:	2301      	movgt	r3, #1
 8003f80:	2300      	movle	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f8a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfcc      	ite	gt
 8003f92:	2301      	movgt	r3, #1
 8003f94:	2300      	movle	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f9e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bfcc      	ite	gt
 8003fa6:	2301      	movgt	r3, #1
 8003fa8:	2300      	movle	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	9402      	str	r4, [sp, #8]
 8003fb4:	9101      	str	r1, [sp, #4]
 8003fb6:	9200      	str	r2, [sp, #0]
 8003fb8:	4633      	mov	r3, r6
 8003fba:	462a      	mov	r2, r5
 8003fbc:	4981      	ldr	r1, [pc, #516]	; (80041c4 <printRadioSettings+0x32c>)
 8003fbe:	f000 ffa7 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc f922 	bl	8000210 <strlen>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	f107 0108 	add.w	r1, r7, #8
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	4877      	ldr	r0, [pc, #476]	; (80041b4 <printRadioSettings+0x31c>)
 8003fd8:	f7fe f995 	bl	8002306 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f7ff faf9 	bl	80035d4 <NRF24_read_register>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003fec:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfcc      	ite	gt
 8003ff4:	2301      	movgt	r3, #1
 8003ff6:	2300      	movle	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ffc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004000:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004004:	2b00      	cmp	r3, #0
 8004006:	bfcc      	ite	gt
 8004008:	2301      	movgt	r3, #1
 800400a:	2300      	movle	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004014:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfcc      	ite	gt
 800401c:	2301      	movgt	r3, #1
 800401e:	2300      	movle	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004028:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800402c:	2b00      	cmp	r3, #0
 800402e:	bfcc      	ite	gt
 8004030:	2301      	movgt	r3, #1
 8004032:	2300      	movle	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004038:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800403c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004040:	2b00      	cmp	r3, #0
 8004042:	bfcc      	ite	gt
 8004044:	2301      	movgt	r3, #1
 8004046:	2300      	movle	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800404c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004050:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004054:	2b00      	cmp	r3, #0
 8004056:	bfcc      	ite	gt
 8004058:	2301      	movgt	r3, #1
 800405a:	2300      	movle	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f107 0008 	add.w	r0, r7, #8
 8004062:	9303      	str	r3, [sp, #12]
 8004064:	9402      	str	r4, [sp, #8]
 8004066:	9101      	str	r1, [sp, #4]
 8004068:	9200      	str	r2, [sp, #0]
 800406a:	4633      	mov	r3, r6
 800406c:	462a      	mov	r2, r5
 800406e:	4956      	ldr	r1, [pc, #344]	; (80041c8 <printRadioSettings+0x330>)
 8004070:	f000 ff4e 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc f8c9 	bl	8000210 <strlen>
 800407e:	4603      	mov	r3, r0
 8004080:	b29a      	uxth	r2, r3
 8004082:	f107 0108 	add.w	r1, r7, #8
 8004086:	230a      	movs	r3, #10
 8004088:	484a      	ldr	r0, [pc, #296]	; (80041b4 <printRadioSettings+0x31c>)
 800408a:	f7fe f93c 	bl	8002306 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800408e:	2003      	movs	r0, #3
 8004090:	f7ff faa0 	bl	80035d4 <NRF24_read_register>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800409e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80040a2:	3302      	adds	r3, #2
 80040a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80040a8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	4946      	ldr	r1, [pc, #280]	; (80041cc <printRadioSettings+0x334>)
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 ff2c 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f8a7 	bl	8000210 <strlen>
 80040c2:	4603      	mov	r3, r0
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	f107 0108 	add.w	r1, r7, #8
 80040ca:	230a      	movs	r3, #10
 80040cc:	4839      	ldr	r0, [pc, #228]	; (80041b4 <printRadioSettings+0x31c>)
 80040ce:	f7fe f91a 	bl	8002306 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80040d2:	2005      	movs	r0, #5
 80040d4:	f7ff fa7e 	bl	80035d4 <NRF24_read_register>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80040de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80040e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4939      	ldr	r1, [pc, #228]	; (80041d0 <printRadioSettings+0x338>)
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ff0f 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc f88a 	bl	8000210 <strlen>
 80040fc:	4603      	mov	r3, r0
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f107 0108 	add.w	r1, r7, #8
 8004104:	230a      	movs	r3, #10
 8004106:	482b      	ldr	r0, [pc, #172]	; (80041b4 <printRadioSettings+0x31c>)
 8004108:	f7fe f8fd 	bl	8002306 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800410c:	2006      	movs	r0, #6
 800410e:	f7ff fa61 	bl	80035d4 <NRF24_read_register>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <printRadioSettings+0x29a>
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	492a      	ldr	r1, [pc, #168]	; (80041d4 <printRadioSettings+0x33c>)
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fef0 	bl	8004f10 <siprintf>
 8004130:	e005      	b.n	800413e <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4928      	ldr	r1, [pc, #160]	; (80041d8 <printRadioSettings+0x340>)
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fee9 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc f864 	bl	8000210 <strlen>
 8004148:	4603      	mov	r3, r0
 800414a:	b29a      	uxth	r2, r3
 800414c:	f107 0108 	add.w	r1, r7, #8
 8004150:	230a      	movs	r3, #10
 8004152:	4818      	ldr	r0, [pc, #96]	; (80041b4 <printRadioSettings+0x31c>)
 8004154:	f7fe f8d7 	bl	8002306 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8004158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800415c:	f003 0306 	and.w	r3, r3, #6
 8004160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004164:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800416e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <printRadioSettings+0x2ec>
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4918      	ldr	r1, [pc, #96]	; (80041dc <printRadioSettings+0x344>)
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fec7 	bl	8004f10 <siprintf>
 8004182:	e03b      	b.n	80041fc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <printRadioSettings+0x302>
 800418c:	f107 0308 	add.w	r3, r7, #8
 8004190:	4913      	ldr	r1, [pc, #76]	; (80041e0 <printRadioSettings+0x348>)
 8004192:	4618      	mov	r0, r3
 8004194:	f000 febc 	bl	8004f10 <siprintf>
 8004198:	e030      	b.n	80041fc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800419a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d122      	bne.n	80041e8 <printRadioSettings+0x350>
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	490f      	ldr	r1, [pc, #60]	; (80041e4 <printRadioSettings+0x34c>)
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 feb1 	bl	8004f10 <siprintf>
 80041ae:	e025      	b.n	80041fc <printRadioSettings+0x364>
 80041b0:	08005b70 	.word	0x08005b70
 80041b4:	200000fc 	.word	0x200000fc
 80041b8:	08005ba4 	.word	0x08005ba4
 80041bc:	08005bc0 	.word	0x08005bc0
 80041c0:	08005bdc 	.word	0x08005bdc
 80041c4:	08005bf0 	.word	0x08005bf0
 80041c8:	08005c34 	.word	0x08005c34
 80041cc:	08005c80 	.word	0x08005c80
 80041d0:	08005c9c 	.word	0x08005c9c
 80041d4:	08005cb0 	.word	0x08005cb0
 80041d8:	08005cc8 	.word	0x08005cc8
 80041dc:	08005ce0 	.word	0x08005ce0
 80041e0:	08005cf4 	.word	0x08005cf4
 80041e4:	08005d08 	.word	0x08005d08
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80041e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d105      	bne.n	80041fc <printRadioSettings+0x364>
 80041f0:	f107 0308 	add.w	r3, r7, #8
 80041f4:	49d7      	ldr	r1, [pc, #860]	; (8004554 <printRadioSettings+0x6bc>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fe8a 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc f805 	bl	8000210 <strlen>
 8004206:	4603      	mov	r3, r0
 8004208:	b29a      	uxth	r2, r3
 800420a:	f107 0108 	add.w	r1, r7, #8
 800420e:	230a      	movs	r3, #10
 8004210:	48d1      	ldr	r0, [pc, #836]	; (8004558 <printRadioSettings+0x6c0>)
 8004212:	f7fe f878 	bl	8002306 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004216:	463b      	mov	r3, r7
 8004218:	2205      	movs	r2, #5
 800421a:	4619      	mov	r1, r3
 800421c:	200a      	movs	r0, #10
 800421e:	f7ff fa01 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004222:	793b      	ldrb	r3, [r7, #4]
 8004224:	461c      	mov	r4, r3
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	461d      	mov	r5, r3
 800422a:	78bb      	ldrb	r3, [r7, #2]
 800422c:	787a      	ldrb	r2, [r7, #1]
 800422e:	7839      	ldrb	r1, [r7, #0]
 8004230:	f107 0008 	add.w	r0, r7, #8
 8004234:	9102      	str	r1, [sp, #8]
 8004236:	9201      	str	r2, [sp, #4]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	462b      	mov	r3, r5
 800423c:	4622      	mov	r2, r4
 800423e:	49c7      	ldr	r1, [pc, #796]	; (800455c <printRadioSettings+0x6c4>)
 8004240:	f000 fe66 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	4618      	mov	r0, r3
 800424a:	f7fb ffe1 	bl	8000210 <strlen>
 800424e:	4603      	mov	r3, r0
 8004250:	b29a      	uxth	r2, r3
 8004252:	f107 0108 	add.w	r1, r7, #8
 8004256:	230a      	movs	r3, #10
 8004258:	48bf      	ldr	r0, [pc, #764]	; (8004558 <printRadioSettings+0x6c0>)
 800425a:	f7fe f854 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800425e:	463b      	mov	r3, r7
 8004260:	2205      	movs	r2, #5
 8004262:	4619      	mov	r1, r3
 8004264:	200b      	movs	r0, #11
 8004266:	f7ff f9dd 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800426a:	793b      	ldrb	r3, [r7, #4]
 800426c:	461c      	mov	r4, r3
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	461d      	mov	r5, r3
 8004272:	78bb      	ldrb	r3, [r7, #2]
 8004274:	787a      	ldrb	r2, [r7, #1]
 8004276:	7839      	ldrb	r1, [r7, #0]
 8004278:	f107 0008 	add.w	r0, r7, #8
 800427c:	9102      	str	r1, [sp, #8]
 800427e:	9201      	str	r2, [sp, #4]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	462b      	mov	r3, r5
 8004284:	4622      	mov	r2, r4
 8004286:	49b6      	ldr	r1, [pc, #728]	; (8004560 <printRadioSettings+0x6c8>)
 8004288:	f000 fe42 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800428c:	f107 0308 	add.w	r3, r7, #8
 8004290:	4618      	mov	r0, r3
 8004292:	f7fb ffbd 	bl	8000210 <strlen>
 8004296:	4603      	mov	r3, r0
 8004298:	b29a      	uxth	r2, r3
 800429a:	f107 0108 	add.w	r1, r7, #8
 800429e:	230a      	movs	r3, #10
 80042a0:	48ad      	ldr	r0, [pc, #692]	; (8004558 <printRadioSettings+0x6c0>)
 80042a2:	f7fe f830 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80042a6:	463b      	mov	r3, r7
 80042a8:	2201      	movs	r2, #1
 80042aa:	4619      	mov	r1, r3
 80042ac:	200c      	movs	r0, #12
 80042ae:	f7ff f9b9 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80042b2:	783b      	ldrb	r3, [r7, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f107 0308 	add.w	r3, r7, #8
 80042ba:	49aa      	ldr	r1, [pc, #680]	; (8004564 <printRadioSettings+0x6cc>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fe27 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fb ffa2 	bl	8000210 <strlen>
 80042cc:	4603      	mov	r3, r0
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	f107 0108 	add.w	r1, r7, #8
 80042d4:	230a      	movs	r3, #10
 80042d6:	48a0      	ldr	r0, [pc, #640]	; (8004558 <printRadioSettings+0x6c0>)
 80042d8:	f7fe f815 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80042dc:	463b      	mov	r3, r7
 80042de:	2201      	movs	r2, #1
 80042e0:	4619      	mov	r1, r3
 80042e2:	200d      	movs	r0, #13
 80042e4:	f7ff f99e 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80042e8:	783b      	ldrb	r3, [r7, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	499d      	ldr	r1, [pc, #628]	; (8004568 <printRadioSettings+0x6d0>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe0c 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fb ff87 	bl	8000210 <strlen>
 8004302:	4603      	mov	r3, r0
 8004304:	b29a      	uxth	r2, r3
 8004306:	f107 0108 	add.w	r1, r7, #8
 800430a:	230a      	movs	r3, #10
 800430c:	4892      	ldr	r0, [pc, #584]	; (8004558 <printRadioSettings+0x6c0>)
 800430e:	f7fd fffa 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8004312:	463b      	mov	r3, r7
 8004314:	2201      	movs	r2, #1
 8004316:	4619      	mov	r1, r3
 8004318:	200e      	movs	r0, #14
 800431a:	f7ff f983 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800431e:	783b      	ldrb	r3, [r7, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	4991      	ldr	r1, [pc, #580]	; (800456c <printRadioSettings+0x6d4>)
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fdf1 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	4618      	mov	r0, r3
 8004334:	f7fb ff6c 	bl	8000210 <strlen>
 8004338:	4603      	mov	r3, r0
 800433a:	b29a      	uxth	r2, r3
 800433c:	f107 0108 	add.w	r1, r7, #8
 8004340:	230a      	movs	r3, #10
 8004342:	4885      	ldr	r0, [pc, #532]	; (8004558 <printRadioSettings+0x6c0>)
 8004344:	f7fd ffdf 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004348:	463b      	mov	r3, r7
 800434a:	2201      	movs	r2, #1
 800434c:	4619      	mov	r1, r3
 800434e:	200f      	movs	r0, #15
 8004350:	f7ff f968 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004354:	783b      	ldrb	r3, [r7, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4984      	ldr	r1, [pc, #528]	; (8004570 <printRadioSettings+0x6d8>)
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fdd6 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4618      	mov	r0, r3
 800436a:	f7fb ff51 	bl	8000210 <strlen>
 800436e:	4603      	mov	r3, r0
 8004370:	b29a      	uxth	r2, r3
 8004372:	f107 0108 	add.w	r1, r7, #8
 8004376:	230a      	movs	r3, #10
 8004378:	4877      	ldr	r0, [pc, #476]	; (8004558 <printRadioSettings+0x6c0>)
 800437a:	f7fd ffc4 	bl	8002306 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800437e:	463b      	mov	r3, r7
 8004380:	2205      	movs	r2, #5
 8004382:	4619      	mov	r1, r3
 8004384:	2010      	movs	r0, #16
 8004386:	f7ff f94d 	bl	8003624 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800438a:	793b      	ldrb	r3, [r7, #4]
 800438c:	461c      	mov	r4, r3
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	461d      	mov	r5, r3
 8004392:	78bb      	ldrb	r3, [r7, #2]
 8004394:	787a      	ldrb	r2, [r7, #1]
 8004396:	7839      	ldrb	r1, [r7, #0]
 8004398:	f107 0008 	add.w	r0, r7, #8
 800439c:	9102      	str	r1, [sp, #8]
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	462b      	mov	r3, r5
 80043a4:	4622      	mov	r2, r4
 80043a6:	4973      	ldr	r1, [pc, #460]	; (8004574 <printRadioSettings+0x6dc>)
 80043a8:	f000 fdb2 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fb ff2d 	bl	8000210 <strlen>
 80043b6:	4603      	mov	r3, r0
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	f107 0108 	add.w	r1, r7, #8
 80043be:	230a      	movs	r3, #10
 80043c0:	4865      	ldr	r0, [pc, #404]	; (8004558 <printRadioSettings+0x6c0>)
 80043c2:	f7fd ffa0 	bl	8002306 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80043c6:	2011      	movs	r0, #17
 80043c8:	f7ff f904 	bl	80035d4 <NRF24_read_register>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80043d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043da:	f107 0308 	add.w	r3, r7, #8
 80043de:	4966      	ldr	r1, [pc, #408]	; (8004578 <printRadioSettings+0x6e0>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fd95 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fb ff10 	bl	8000210 <strlen>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	f107 0108 	add.w	r1, r7, #8
 80043f8:	230a      	movs	r3, #10
 80043fa:	4857      	ldr	r0, [pc, #348]	; (8004558 <printRadioSettings+0x6c0>)
 80043fc:	f7fd ff83 	bl	8002306 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004400:	2012      	movs	r0, #18
 8004402:	f7ff f8e7 	bl	80035d4 <NRF24_read_register>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800440c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	4958      	ldr	r1, [pc, #352]	; (800457c <printRadioSettings+0x6e4>)
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fd78 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	4618      	mov	r0, r3
 8004426:	f7fb fef3 	bl	8000210 <strlen>
 800442a:	4603      	mov	r3, r0
 800442c:	b29a      	uxth	r2, r3
 800442e:	f107 0108 	add.w	r1, r7, #8
 8004432:	230a      	movs	r3, #10
 8004434:	4848      	ldr	r0, [pc, #288]	; (8004558 <printRadioSettings+0x6c0>)
 8004436:	f7fd ff66 	bl	8002306 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800443a:	2013      	movs	r0, #19
 800443c:	f7ff f8ca 	bl	80035d4 <NRF24_read_register>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800444a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444e:	f107 0308 	add.w	r3, r7, #8
 8004452:	494b      	ldr	r1, [pc, #300]	; (8004580 <printRadioSettings+0x6e8>)
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd5b 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4618      	mov	r0, r3
 8004460:	f7fb fed6 	bl	8000210 <strlen>
 8004464:	4603      	mov	r3, r0
 8004466:	b29a      	uxth	r2, r3
 8004468:	f107 0108 	add.w	r1, r7, #8
 800446c:	230a      	movs	r3, #10
 800446e:	483a      	ldr	r0, [pc, #232]	; (8004558 <printRadioSettings+0x6c0>)
 8004470:	f7fd ff49 	bl	8002306 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004474:	2014      	movs	r0, #20
 8004476:	f7ff f8ad 	bl	80035d4 <NRF24_read_register>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004488:	f107 0308 	add.w	r3, r7, #8
 800448c:	493d      	ldr	r1, [pc, #244]	; (8004584 <printRadioSettings+0x6ec>)
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fd3e 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004494:	f107 0308 	add.w	r3, r7, #8
 8004498:	4618      	mov	r0, r3
 800449a:	f7fb feb9 	bl	8000210 <strlen>
 800449e:	4603      	mov	r3, r0
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f107 0108 	add.w	r1, r7, #8
 80044a6:	230a      	movs	r3, #10
 80044a8:	482b      	ldr	r0, [pc, #172]	; (8004558 <printRadioSettings+0x6c0>)
 80044aa:	f7fd ff2c 	bl	8002306 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80044ae:	2015      	movs	r0, #21
 80044b0:	f7ff f890 	bl	80035d4 <NRF24_read_register>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80044ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4930      	ldr	r1, [pc, #192]	; (8004588 <printRadioSettings+0x6f0>)
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd21 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fb fe9c 	bl	8000210 <strlen>
 80044d8:	4603      	mov	r3, r0
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f107 0108 	add.w	r1, r7, #8
 80044e0:	230a      	movs	r3, #10
 80044e2:	481d      	ldr	r0, [pc, #116]	; (8004558 <printRadioSettings+0x6c0>)
 80044e4:	f7fd ff0f 	bl	8002306 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80044e8:	2016      	movs	r0, #22
 80044ea:	f7ff f873 	bl	80035d4 <NRF24_read_register>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80044f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044fc:	f107 0308 	add.w	r3, r7, #8
 8004500:	4922      	ldr	r1, [pc, #136]	; (800458c <printRadioSettings+0x6f4>)
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fd04 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004508:	f107 0308 	add.w	r3, r7, #8
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb fe7f 	bl	8000210 <strlen>
 8004512:	4603      	mov	r3, r0
 8004514:	b29a      	uxth	r2, r3
 8004516:	f107 0108 	add.w	r1, r7, #8
 800451a:	230a      	movs	r3, #10
 800451c:	480e      	ldr	r0, [pc, #56]	; (8004558 <printRadioSettings+0x6c0>)
 800451e:	f7fd fef2 	bl	8002306 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004522:	201c      	movs	r0, #28
 8004524:	f7ff f856 	bl	80035d4 <NRF24_read_register>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800452e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004532:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfcc      	ite	gt
 800453a:	2301      	movgt	r3, #1
 800453c:	2300      	movle	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004546:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfcc      	ite	gt
 800454e:	2301      	movgt	r3, #1
 8004550:	2300      	movle	r3, #0
 8004552:	e01d      	b.n	8004590 <printRadioSettings+0x6f8>
 8004554:	08005d1c 	.word	0x08005d1c
 8004558:	200000fc 	.word	0x200000fc
 800455c:	08005d30 	.word	0x08005d30
 8004560:	08005d60 	.word	0x08005d60
 8004564:	08005d90 	.word	0x08005d90
 8004568:	08005db8 	.word	0x08005db8
 800456c:	08005de0 	.word	0x08005de0
 8004570:	08005e08 	.word	0x08005e08
 8004574:	08005e30 	.word	0x08005e30
 8004578:	08005e5c 	.word	0x08005e5c
 800457c:	08005e78 	.word	0x08005e78
 8004580:	08005e94 	.word	0x08005e94
 8004584:	08005eb0 	.word	0x08005eb0
 8004588:	08005ecc 	.word	0x08005ecc
 800458c:	08005ee8 	.word	0x08005ee8
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004594:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004598:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800459c:	2b00      	cmp	r3, #0
 800459e:	bfcc      	ite	gt
 80045a0:	2301      	movgt	r3, #1
 80045a2:	2300      	movle	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bfcc      	ite	gt
 80045b4:	2301      	movgt	r3, #1
 80045b6:	2300      	movle	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfcc      	ite	gt
 80045c8:	2301      	movgt	r3, #1
 80045ca:	2300      	movle	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfcc      	ite	gt
 80045dc:	2301      	movgt	r3, #1
 80045de:	2300      	movle	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f107 0008 	add.w	r0, r7, #8
 80045e6:	9303      	str	r3, [sp, #12]
 80045e8:	9402      	str	r4, [sp, #8]
 80045ea:	9101      	str	r1, [sp, #4]
 80045ec:	9200      	str	r2, [sp, #0]
 80045ee:	4633      	mov	r3, r6
 80045f0:	462a      	mov	r2, r5
 80045f2:	4936      	ldr	r1, [pc, #216]	; (80046cc <printRadioSettings+0x834>)
 80045f4:	f000 fc8c 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045f8:	f107 0308 	add.w	r3, r7, #8
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb fe07 	bl	8000210 <strlen>
 8004602:	4603      	mov	r3, r0
 8004604:	b29a      	uxth	r2, r3
 8004606:	f107 0108 	add.w	r1, r7, #8
 800460a:	230a      	movs	r3, #10
 800460c:	4830      	ldr	r0, [pc, #192]	; (80046d0 <printRadioSettings+0x838>)
 800460e:	f7fd fe7a 	bl	8002306 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004612:	201d      	movs	r0, #29
 8004614:	f7fe ffde 	bl	80035d4 <NRF24_read_register>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800461e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <printRadioSettings+0x7a0>
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4929      	ldr	r1, [pc, #164]	; (80046d4 <printRadioSettings+0x83c>)
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fc6d 	bl	8004f10 <siprintf>
 8004636:	e005      	b.n	8004644 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	4926      	ldr	r1, [pc, #152]	; (80046d8 <printRadioSettings+0x840>)
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc66 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb fde1 	bl	8000210 <strlen>
 800464e:	4603      	mov	r3, r0
 8004650:	b29a      	uxth	r2, r3
 8004652:	f107 0108 	add.w	r1, r7, #8
 8004656:	230a      	movs	r3, #10
 8004658:	481d      	ldr	r0, [pc, #116]	; (80046d0 <printRadioSettings+0x838>)
 800465a:	f7fd fe54 	bl	8002306 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800465e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <printRadioSettings+0x7e0>
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	491b      	ldr	r1, [pc, #108]	; (80046dc <printRadioSettings+0x844>)
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fc4d 	bl	8004f10 <siprintf>
 8004676:	e005      	b.n	8004684 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <printRadioSettings+0x848>)
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fc46 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004684:	f107 0308 	add.w	r3, r7, #8
 8004688:	4618      	mov	r0, r3
 800468a:	f7fb fdc1 	bl	8000210 <strlen>
 800468e:	4603      	mov	r3, r0
 8004690:	b29a      	uxth	r2, r3
 8004692:	f107 0108 	add.w	r1, r7, #8
 8004696:	230a      	movs	r3, #10
 8004698:	480d      	ldr	r0, [pc, #52]	; (80046d0 <printRadioSettings+0x838>)
 800469a:	f7fd fe34 	bl	8002306 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	4910      	ldr	r1, [pc, #64]	; (80046e4 <printRadioSettings+0x84c>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fc33 	bl	8004f10 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fdae 	bl	8000210 <strlen>
 80046b4:	4603      	mov	r3, r0
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f107 0108 	add.w	r1, r7, #8
 80046bc:	230a      	movs	r3, #10
 80046be:	4804      	ldr	r0, [pc, #16]	; (80046d0 <printRadioSettings+0x838>)
 80046c0:	f7fd fe21 	bl	8002306 <HAL_UART_Transmit>
}
 80046c4:	bf00      	nop
 80046c6:	3774      	adds	r7, #116	; 0x74
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046cc:	08005f04 	.word	0x08005f04
 80046d0:	200000fc 	.word	0x200000fc
 80046d4:	08005f50 	.word	0x08005f50
 80046d8:	08005f68 	.word	0x08005f68
 80046dc:	08005f80 	.word	0x08005f80
 80046e0:	08005f9c 	.word	0x08005f9c
 80046e4:	08005b70 	.word	0x08005b70

080046e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <MX_GPIO_Init+0x120>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <MX_GPIO_Init+0x120>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <MX_GPIO_Init+0x120>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <MX_GPIO_Init+0x120>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a39      	ldr	r2, [pc, #228]	; (8004808 <MX_GPIO_Init+0x120>)
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <MX_GPIO_Init+0x120>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b33      	ldr	r3, [pc, #204]	; (8004808 <MX_GPIO_Init+0x120>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a32      	ldr	r2, [pc, #200]	; (8004808 <MX_GPIO_Init+0x120>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b30      	ldr	r3, [pc, #192]	; (8004808 <MX_GPIO_Init+0x120>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <MX_GPIO_Init+0x120>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <MX_GPIO_Init+0x120>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b29      	ldr	r3, [pc, #164]	; (8004808 <MX_GPIO_Init+0x120>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	2120      	movs	r1, #32
 8004772:	4826      	ldr	r0, [pc, #152]	; (800480c <MX_GPIO_Init+0x124>)
 8004774:	f7fc fa7e 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800477e:	4824      	ldr	r0, [pc, #144]	; (8004810 <MX_GPIO_Init+0x128>)
 8004780:	f7fc fa78 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800478a:	4b22      	ldr	r3, [pc, #136]	; (8004814 <MX_GPIO_Init+0x12c>)
 800478c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	4619      	mov	r1, r3
 8004798:	481d      	ldr	r0, [pc, #116]	; (8004810 <MX_GPIO_Init+0x128>)
 800479a:	f7fc f8d7 	bl	800094c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800479e:	2320      	movs	r3, #32
 80047a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a2:	2301      	movs	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	4619      	mov	r1, r3
 80047b4:	4815      	ldr	r0, [pc, #84]	; (800480c <MX_GPIO_Init+0x124>)
 80047b6:	f7fc f8c9 	bl	800094c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80047ba:	2340      	movs	r3, #64	; 0x40
 80047bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <MX_GPIO_Init+0x12c>)
 80047c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	4619      	mov	r1, r3
 80047cc:	4810      	ldr	r0, [pc, #64]	; (8004810 <MX_GPIO_Init+0x128>)
 80047ce:	f7fc f8bd 	bl	800094c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 80047d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d8:	2301      	movs	r3, #1
 80047da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e0:	2300      	movs	r3, #0
 80047e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4619      	mov	r1, r3
 80047ea:	4809      	ldr	r0, [pc, #36]	; (8004810 <MX_GPIO_Init+0x128>)
 80047ec:	f7fc f8ae 	bl	800094c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	2017      	movs	r0, #23
 80047f6:	f7fc f850 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80047fa:	2017      	movs	r0, #23
 80047fc:	f7fc f869 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 8004800:	bf00      	nop
 8004802:	3728      	adds	r7, #40	; 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	40020000 	.word	0x40020000
 8004810:	40020800 	.word	0x40020800
 8004814:	10210000 	.word	0x10210000

08004818 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d10d      	bne.n	8004844 <HAL_GPIO_EXTI_Callback+0x2c>
  {
    // New data arrived in the RX buffer

    // Read the data from RX FIFO
    NRF24_read(myRxData, 32);
 8004828:	2120      	movs	r1, #32
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <HAL_GPIO_EXTI_Callback+0x34>)
 800482c:	f7ff f94a 	bl	8003ac4 <NRF24_read>



    HAL_UART_Transmit(&huart2, (uint8_t*)myRxData, 32u, 100u);
 8004830:	2364      	movs	r3, #100	; 0x64
 8004832:	2220      	movs	r2, #32
 8004834:	4905      	ldr	r1, [pc, #20]	; (800484c <HAL_GPIO_EXTI_Callback+0x34>)
 8004836:	4806      	ldr	r0, [pc, #24]	; (8004850 <HAL_GPIO_EXTI_Callback+0x38>)
 8004838:	f7fd fd65 	bl	8002306 <HAL_UART_Transmit>

    // Reset RX_DR flag in STATUS register
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	2007      	movs	r0, #7
 8004840:	f7fe ff18 	bl	8003674 <NRF24_write_register>
  }
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200002ac 	.word	0x200002ac
 8004850:	20000374 	.word	0x20000374

08004854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b097      	sub	sp, #92	; 0x5c
 8004858:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800485a:	f7fb fead 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800485e:	f000 f83b 	bl	80048d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004862:	f7ff ff41 	bl	80046e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004866:	f000 fa09 	bl	8004c7c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800486a:	f000 f8af 	bl	80049cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  CommandLineInterfaceController_Init(&hCLI);
 800486e:	4814      	ldr	r0, [pc, #80]	; (80048c0 <main+0x6c>)
 8004870:	f7fe fcce 	bl	8003210 <CommandLineInterfaceController_Init>
  ApplicationManager_Init(&hApplication);
 8004874:	4813      	ldr	r0, [pc, #76]	; (80048c4 <main+0x70>)
 8004876:	f7fe fc51 	bl	800311c <ApplicationManager_Init>
  NRF24_begin(NRF24_CE_GPIO_Port, NRF24_CSN_Pin, NRF24_CE_Pin, hspi2);
 800487a:	4c13      	ldr	r4, [pc, #76]	; (80048c8 <main+0x74>)
 800487c:	4668      	mov	r0, sp
 800487e:	1d23      	adds	r3, r4, #4
 8004880:	2254      	movs	r2, #84	; 0x54
 8004882:	4619      	mov	r1, r3
 8004884:	f000 fb2e 	bl	8004ee4 <memcpy>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004892:	480e      	ldr	r0, [pc, #56]	; (80048cc <main+0x78>)
 8004894:	f7fe ffa8 	bl	80037e8 <NRF24_begin>

  CommandLineInterfaceController_WriteMessage(&hCLI, "COMMAND LINE INTERFACE\r\n");
 8004898:	490d      	ldr	r1, [pc, #52]	; (80048d0 <main+0x7c>)
 800489a:	4809      	ldr	r0, [pc, #36]	; (80048c0 <main+0x6c>)
 800489c:	f7fe fcce 	bl	800323c <CommandLineInterfaceController_WriteMessage>

  HAL_UART_Receive_IT(&huart2, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u);
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <main+0x6c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a06      	ldr	r2, [pc, #24]	; (80048c0 <main+0x6c>)
 80048a6:	7992      	ldrb	r2, [r2, #6]
 80048a8:	4413      	add	r3, r2
 80048aa:	2201      	movs	r2, #1
 80048ac:	4619      	mov	r1, r3
 80048ae:	4809      	ldr	r0, [pc, #36]	; (80048d4 <main+0x80>)
 80048b0:	f7fd fdc2 	bl	8002438 <HAL_UART_Receive_IT>
  NRF24_startListening();
 80048b4:	f7ff f88c 	bl	80039d0 <NRF24_startListening>

  ApplicationManager_StateMachine(&hApplication);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <main+0x70>)
 80048ba:	f7fe fc3f 	bl	800313c <ApplicationManager_StateMachine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80048be:	e7fe      	b.n	80048be <main+0x6a>
 80048c0:	20000310 	.word	0x20000310
 80048c4:	20000318 	.word	0x20000318
 80048c8:	2000031c 	.word	0x2000031c
 80048cc:	40020800 	.word	0x40020800
 80048d0:	080060b4 	.word	0x080060b4
 80048d4:	20000374 	.word	0x20000374

080048d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	; 0x50
 80048dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048de:	f107 031c 	add.w	r3, r7, #28
 80048e2:	2234      	movs	r2, #52	; 0x34
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fb0a 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048ec:	f107 0308 	add.w	r3, r7, #8
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	2300      	movs	r3, #0
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <SystemClock_Config+0xdc>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <SystemClock_Config+0xdc>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6413      	str	r3, [r2, #64]	; 0x40
 800490c:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <SystemClock_Config+0xdc>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004918:	2300      	movs	r3, #0
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <SystemClock_Config+0xe0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <SystemClock_Config+0xe0>)
 8004922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <SystemClock_Config+0xe0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004934:	2301      	movs	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800493e:	2302      	movs	r3, #2
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004948:	2304      	movs	r3, #4
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800494c:	23b4      	movs	r3, #180	; 0xb4
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004950:	2302      	movs	r3, #2
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004954:	2302      	movs	r3, #2
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004958:	2302      	movs	r3, #2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800495c:	f107 031c 	add.w	r3, r7, #28
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc fcd5 	bl	8001310 <HAL_RCC_OscConfig>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800496c:	f000 f826 	bl	80049bc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004970:	f7fc f9b2 	bl	8000cd8 <HAL_PWREx_EnableOverDrive>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800497a:	f000 f81f 	bl	80049bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800497e:	230f      	movs	r3, #15
 8004980:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004982:	2302      	movs	r3, #2
 8004984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800498a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800498e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004994:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	2105      	movs	r1, #5
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc f9eb 	bl	8000d78 <HAL_RCC_ClockConfig>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80049a8:	f000 f808 	bl	80049bc <Error_Handler>
  }
}
 80049ac:	bf00      	nop
 80049ae:	3750      	adds	r7, #80	; 0x50
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000

080049bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <MX_SPI2_Init+0x68>)
 80049d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <MX_SPI2_Init+0x64>)
 80049f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a00:	2218      	movs	r2, #24
 8004a02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a18:	220a      	movs	r2, #10
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a1c:	4804      	ldr	r0, [pc, #16]	; (8004a30 <MX_SPI2_Init+0x64>)
 8004a1e:	f7fc fed1 	bl	80017c4 <HAL_SPI_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a28:	f7ff ffc8 	bl	80049bc <Error_Handler>
  }

}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	2000031c 	.word	0x2000031c
 8004a34:	40003800 	.word	0x40003800

08004a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <HAL_SPI_MspInit+0xe0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d15a      	bne.n	8004b10 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_SPI_MspInit+0xe4>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aba:	2303      	movs	r3, #3
 8004abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004abe:	2307      	movs	r3, #7
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4815      	ldr	r0, [pc, #84]	; (8004b20 <HAL_SPI_MspInit+0xe8>)
 8004aca:	f7fb ff3f 	bl	800094c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ace:	2304      	movs	r3, #4
 8004ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ada:	2303      	movs	r3, #3
 8004adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ade:	2305      	movs	r3, #5
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	480d      	ldr	r0, [pc, #52]	; (8004b20 <HAL_SPI_MspInit+0xe8>)
 8004aea:	f7fb ff2f 	bl	800094c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af4:	2302      	movs	r3, #2
 8004af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afc:	2303      	movs	r3, #3
 8004afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b00:	2305      	movs	r3, #5
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4806      	ldr	r0, [pc, #24]	; (8004b24 <HAL_SPI_MspInit+0xec>)
 8004b0c:	f7fb ff1e 	bl	800094c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004b10:	bf00      	nop
 8004b12:	3728      	adds	r7, #40	; 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40003800 	.word	0x40003800
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40020800 	.word	0x40020800
 8004b24:	40020400 	.word	0x40020400

08004b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b66:	2007      	movs	r0, #7
 8004b68:	f7fb fe8c 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800

08004b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b86:	b480      	push	{r7}
 8004b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b8a:	e7fe      	b.n	8004b8a <HardFault_Handler+0x4>

08004b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <MemManage_Handler+0x4>

08004b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b96:	e7fe      	b.n	8004b96 <BusFault_Handler+0x4>

08004b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b9c:	e7fe      	b.n	8004b9c <UsageFault_Handler+0x4>

08004b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bcc:	f7fb fd46 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004bd8:	2040      	movs	r0, #64	; 0x40
 8004bda:	f7fc f865 	bl	8000ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <USART2_IRQHandler+0x10>)
 8004bea:	f7fd fc7b 	bl	80024e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000374 	.word	0x20000374

08004bf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <_sbrk+0x50>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <_sbrk+0x16>
		heap_end = &end;
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <_sbrk+0x50>)
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <_sbrk+0x54>)
 8004c0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <_sbrk+0x50>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <_sbrk+0x50>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	466a      	mov	r2, sp
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d907      	bls.n	8004c32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c22:	f000 f935 	bl	8004e90 <__errno>
 8004c26:	4603      	mov	r3, r0
 8004c28:	220c      	movs	r2, #12
 8004c2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c30:	e006      	b.n	8004c40 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <_sbrk+0x50>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <_sbrk+0x50>)
 8004c3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000013c 	.word	0x2000013c
 8004c4c:	200003c8 	.word	0x200003c8

08004c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <SystemInit+0x28>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <SystemInit+0x28>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <SystemInit+0x28>)
 8004c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c6a:	609a      	str	r2, [r3, #8]
#endif
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <MX_USART2_UART_Init+0x50>)
 8004c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004ca2:	220c      	movs	r2, #12
 8004ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004cb2:	4805      	ldr	r0, [pc, #20]	; (8004cc8 <MX_USART2_UART_Init+0x4c>)
 8004cb4:	f7fd fada 	bl	800226c <HAL_UART_Init>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004cbe:	f7ff fe7d 	bl	80049bc <Error_Handler>
  }

}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000374 	.word	0x20000374
 8004ccc:	40004400 	.word	0x40004400

08004cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_UART_MspInit+0x94>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d133      	bne.n	8004d5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_UART_MspInit+0x98>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d36:	2303      	movs	r3, #3
 8004d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d3a:	2307      	movs	r3, #7
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3e:	f107 0314 	add.w	r3, r7, #20
 8004d42:	4619      	mov	r1, r3
 8004d44:	4809      	ldr	r0, [pc, #36]	; (8004d6c <HAL_UART_MspInit+0x9c>)
 8004d46:	f7fb fe01 	bl	800094c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2026      	movs	r0, #38	; 0x26
 8004d50:	f7fb fda3 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d54:	2026      	movs	r0, #38	; 0x26
 8004d56:	f7fb fdbc 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40020000 	.word	0x40020000

08004d70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	// Check if buffer is not full, if yes generate error message
	if(hCLI.CLI_BufferHead != hCLI.CLI_BufferSize)
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004d7a:	799b      	ldrb	r3, [r3, #6]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004d80:	889b      	ldrh	r3, [r3, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d03f      	beq.n	8004e06 <HAL_UART_RxCpltCallback+0x96>
	{
		// Echo functionality
		HAL_UART_Transmit(huart, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u, 100u);
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004d8c:	7992      	ldrb	r2, [r2, #6]
 8004d8e:	1899      	adds	r1, r3, r2
 8004d90:	2364      	movs	r3, #100	; 0x64
 8004d92:	2201      	movs	r2, #1
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fd fab6 	bl	8002306 <HAL_UART_Transmit>

		// Check if enter button has been pushed
		if(hCLI.pCLI_Buffer[hCLI.CLI_BufferHead] == '\r')
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004da0:	7992      	ldrb	r2, [r2, #6]
 8004da2:	4413      	add	r3, r2
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b0d      	cmp	r3, #13
 8004da8:	d113      	bne.n	8004dd2 <HAL_UART_RxCpltCallback+0x62>
		{
			// Send /n
			char letter = '\n';
 8004daa:	230a      	movs	r3, #10
 8004dac:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, (uint8_t*) &letter, 1u, 100u);
 8004dae:	f107 010f 	add.w	r1, r7, #15
 8004db2:	2364      	movs	r3, #100	; 0x64
 8004db4:	2201      	movs	r2, #1
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd faa5 	bl	8002306 <HAL_UART_Transmit>

			hApplication.ApplicationState = APP_STATE_GOT_COMMAND;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_UART_RxCpltCallback+0xc4>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
			hApplication.MessageLength = hCLI.CLI_BufferHead;
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dc4:	799a      	ldrb	r2, [r3, #6]
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_UART_RxCpltCallback+0xc4>)
 8004dc8:	705a      	strb	r2, [r3, #1]

			// Reset command line interface controller buffer head
			hCLI.CLI_BufferHead = 0u;
 8004dca:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	719a      	strb	r2, [r3, #6]
 8004dd0:	e020      	b.n	8004e14 <HAL_UART_RxCpltCallback+0xa4>
		}
		// Check if backspace button has been pushed
		else if(hCLI.pCLI_Buffer[hCLI.CLI_BufferHead] == 127u)
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dd8:	7992      	ldrb	r2, [r2, #6]
 8004dda:	4413      	add	r3, r2
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b7f      	cmp	r3, #127	; 0x7f
 8004de0:	d10a      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x88>
		{
			if(hCLI.CLI_BufferHead > 0u)
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004de4:	799b      	ldrb	r3, [r3, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d014      	beq.n	8004e14 <HAL_UART_RxCpltCallback+0xa4>
			{
				hCLI.CLI_BufferHead--;
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dec:	799b      	ldrb	r3, [r3, #6]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004df4:	719a      	strb	r2, [r3, #6]
 8004df6:	e00d      	b.n	8004e14 <HAL_UART_RxCpltCallback+0xa4>
			}
		}
		else
		{
			hCLI.CLI_BufferHead++;
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004dfa:	799b      	ldrb	r3, [r3, #6]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004e02:	719a      	strb	r2, [r3, #6]
 8004e04:	e006      	b.n	8004e14 <HAL_UART_RxCpltCallback+0xa4>
		}
	}
	else
	{
		CommandLineInterfaceController_WriteMessage(&hCLI, "\rERROR : command is too long !\r\n");
 8004e06:	490c      	ldr	r1, [pc, #48]	; (8004e38 <HAL_UART_RxCpltCallback+0xc8>)
 8004e08:	4809      	ldr	r0, [pc, #36]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004e0a:	f7fe fa17 	bl	800323c <CommandLineInterfaceController_WriteMessage>

		hCLI.CLI_BufferHead = 0u;
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	719a      	strb	r2, [r3, #6]
	}

	// Reenable UART receive interrupt
	HAL_UART_Receive_IT(huart, (uint8_t*) &hCLI.pCLI_Buffer[hCLI.CLI_BufferHead], 1u);
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_UART_RxCpltCallback+0xc0>)
 8004e1a:	7992      	ldrb	r2, [r2, #6]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fb08 	bl	8002438 <HAL_UART_Receive_IT>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000310 	.word	0x20000310
 8004e34:	20000318 	.word	0x20000318
 8004e38:	080060d0 	.word	0x080060d0

08004e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e42:	e003      	b.n	8004e4c <LoopCopyDataInit>

08004e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e4a:	3104      	adds	r1, #4

08004e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e4c:	480b      	ldr	r0, [pc, #44]	; (8004e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e54:	d3f6      	bcc.n	8004e44 <CopyDataInit>
  ldr  r2, =_sbss
 8004e56:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e58:	e002      	b.n	8004e60 <LoopFillZerobss>

08004e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e5c:	f842 3b04 	str.w	r3, [r2], #4

08004e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e64:	d3f9      	bcc.n	8004e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e66:	f7ff fef3 	bl	8004c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e6a:	f000 f817 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e6e:	f7ff fcf1 	bl	8004854 <main>
  bx  lr    
 8004e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e78:	08006160 	.word	0x08006160
  ldr  r0, =_sdata
 8004e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e80:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004e84:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004e88:	200003c4 	.word	0x200003c4

08004e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e8c:	e7fe      	b.n	8004e8c <ADC_IRQHandler>
	...

08004e90 <__errno>:
 8004e90:	4b01      	ldr	r3, [pc, #4]	; (8004e98 <__errno+0x8>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	; (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 fc4e 	bl	8005750 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08006158 	.word	0x08006158
 8004ed8:	08006158 	.word	0x08006158
 8004edc:	08006158 	.word	0x08006158
 8004ee0:	0800615c 	.word	0x0800615c

08004ee4 <memcpy>:
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eec:	d100      	bne.n	8004ef0 <memcpy+0xc>
 8004eee:	4770      	bx	lr
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d1f9      	bne.n	8004ef2 <memcpy+0xe>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <siprintf>:
 8004f10:	b40e      	push	{r1, r2, r3}
 8004f12:	b500      	push	{lr}
 8004f14:	b09c      	sub	sp, #112	; 0x70
 8004f16:	ab1d      	add	r3, sp, #116	; 0x74
 8004f18:	9002      	str	r0, [sp, #8]
 8004f1a:	9006      	str	r0, [sp, #24]
 8004f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f20:	4809      	ldr	r0, [pc, #36]	; (8004f48 <siprintf+0x38>)
 8004f22:	9107      	str	r1, [sp, #28]
 8004f24:	9104      	str	r1, [sp, #16]
 8004f26:	4909      	ldr	r1, [pc, #36]	; (8004f4c <siprintf+0x3c>)
 8004f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2c:	9105      	str	r1, [sp, #20]
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	a902      	add	r1, sp, #8
 8004f34:	f000 f868 	bl	8005008 <_svfiprintf_r>
 8004f38:	9b02      	ldr	r3, [sp, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	b01c      	add	sp, #112	; 0x70
 8004f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f44:	b003      	add	sp, #12
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	ffff0208 	.word	0xffff0208

08004f50 <__ssputs_r>:
 8004f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	688e      	ldr	r6, [r1, #8]
 8004f56:	429e      	cmp	r6, r3
 8004f58:	4682      	mov	sl, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	4690      	mov	r8, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	d838      	bhi.n	8004fd4 <__ssputs_r+0x84>
 8004f62:	898a      	ldrh	r2, [r1, #12]
 8004f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f68:	d032      	beq.n	8004fd0 <__ssputs_r+0x80>
 8004f6a:	6825      	ldr	r5, [r4, #0]
 8004f6c:	6909      	ldr	r1, [r1, #16]
 8004f6e:	eba5 0901 	sub.w	r9, r5, r1
 8004f72:	6965      	ldr	r5, [r4, #20]
 8004f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	444b      	add	r3, r9
 8004f80:	106d      	asrs	r5, r5, #1
 8004f82:	429d      	cmp	r5, r3
 8004f84:	bf38      	it	cc
 8004f86:	461d      	movcc	r5, r3
 8004f88:	0553      	lsls	r3, r2, #21
 8004f8a:	d531      	bpl.n	8004ff0 <__ssputs_r+0xa0>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f000 fb39 	bl	8005604 <_malloc_r>
 8004f92:	4606      	mov	r6, r0
 8004f94:	b950      	cbnz	r0, 8004fac <__ssputs_r+0x5c>
 8004f96:	230c      	movs	r3, #12
 8004f98:	f8ca 3000 	str.w	r3, [sl]
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	6921      	ldr	r1, [r4, #16]
 8004fae:	464a      	mov	r2, r9
 8004fb0:	f7ff ff98 	bl	8004ee4 <memcpy>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	6126      	str	r6, [r4, #16]
 8004fc2:	6165      	str	r5, [r4, #20]
 8004fc4:	444e      	add	r6, r9
 8004fc6:	eba5 0509 	sub.w	r5, r5, r9
 8004fca:	6026      	str	r6, [r4, #0]
 8004fcc:	60a5      	str	r5, [r4, #8]
 8004fce:	463e      	mov	r6, r7
 8004fd0:	42be      	cmp	r6, r7
 8004fd2:	d900      	bls.n	8004fd6 <__ssputs_r+0x86>
 8004fd4:	463e      	mov	r6, r7
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	4641      	mov	r1, r8
 8004fdc:	f000 faa8 	bl	8005530 <memmove>
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	4432      	add	r2, r6
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7db      	b.n	8004fa8 <__ssputs_r+0x58>
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	f000 fb61 	bl	80056b8 <_realloc_r>
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1e1      	bne.n	8004fc0 <__ssputs_r+0x70>
 8004ffc:	6921      	ldr	r1, [r4, #16]
 8004ffe:	4650      	mov	r0, sl
 8005000:	f000 fab0 	bl	8005564 <_free_r>
 8005004:	e7c7      	b.n	8004f96 <__ssputs_r+0x46>
	...

08005008 <_svfiprintf_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4698      	mov	r8, r3
 800500e:	898b      	ldrh	r3, [r1, #12]
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	b09d      	sub	sp, #116	; 0x74
 8005014:	4607      	mov	r7, r0
 8005016:	460d      	mov	r5, r1
 8005018:	4614      	mov	r4, r2
 800501a:	d50e      	bpl.n	800503a <_svfiprintf_r+0x32>
 800501c:	690b      	ldr	r3, [r1, #16]
 800501e:	b963      	cbnz	r3, 800503a <_svfiprintf_r+0x32>
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	f000 faef 	bl	8005604 <_malloc_r>
 8005026:	6028      	str	r0, [r5, #0]
 8005028:	6128      	str	r0, [r5, #16]
 800502a:	b920      	cbnz	r0, 8005036 <_svfiprintf_r+0x2e>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e0d1      	b.n	80051da <_svfiprintf_r+0x1d2>
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	616b      	str	r3, [r5, #20]
 800503a:	2300      	movs	r3, #0
 800503c:	9309      	str	r3, [sp, #36]	; 0x24
 800503e:	2320      	movs	r3, #32
 8005040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005044:	f8cd 800c 	str.w	r8, [sp, #12]
 8005048:	2330      	movs	r3, #48	; 0x30
 800504a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051f4 <_svfiprintf_r+0x1ec>
 800504e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005052:	f04f 0901 	mov.w	r9, #1
 8005056:	4623      	mov	r3, r4
 8005058:	469a      	mov	sl, r3
 800505a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505e:	b10a      	cbz	r2, 8005064 <_svfiprintf_r+0x5c>
 8005060:	2a25      	cmp	r2, #37	; 0x25
 8005062:	d1f9      	bne.n	8005058 <_svfiprintf_r+0x50>
 8005064:	ebba 0b04 	subs.w	fp, sl, r4
 8005068:	d00b      	beq.n	8005082 <_svfiprintf_r+0x7a>
 800506a:	465b      	mov	r3, fp
 800506c:	4622      	mov	r2, r4
 800506e:	4629      	mov	r1, r5
 8005070:	4638      	mov	r0, r7
 8005072:	f7ff ff6d 	bl	8004f50 <__ssputs_r>
 8005076:	3001      	adds	r0, #1
 8005078:	f000 80aa 	beq.w	80051d0 <_svfiprintf_r+0x1c8>
 800507c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507e:	445a      	add	r2, fp
 8005080:	9209      	str	r2, [sp, #36]	; 0x24
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80a2 	beq.w	80051d0 <_svfiprintf_r+0x1c8>
 800508c:	2300      	movs	r3, #0
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005096:	f10a 0a01 	add.w	sl, sl, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	9307      	str	r3, [sp, #28]
 800509e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a2:	931a      	str	r3, [sp, #104]	; 0x68
 80050a4:	4654      	mov	r4, sl
 80050a6:	2205      	movs	r2, #5
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	4851      	ldr	r0, [pc, #324]	; (80051f4 <_svfiprintf_r+0x1ec>)
 80050ae:	f7fb f8b7 	bl	8000220 <memchr>
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	b9d8      	cbnz	r0, 80050ee <_svfiprintf_r+0xe6>
 80050b6:	06d0      	lsls	r0, r2, #27
 80050b8:	bf44      	itt	mi
 80050ba:	2320      	movmi	r3, #32
 80050bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c0:	0711      	lsls	r1, r2, #28
 80050c2:	bf44      	itt	mi
 80050c4:	232b      	movmi	r3, #43	; 0x2b
 80050c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ca:	f89a 3000 	ldrb.w	r3, [sl]
 80050ce:	2b2a      	cmp	r3, #42	; 0x2a
 80050d0:	d015      	beq.n	80050fe <_svfiprintf_r+0xf6>
 80050d2:	9a07      	ldr	r2, [sp, #28]
 80050d4:	4654      	mov	r4, sl
 80050d6:	2000      	movs	r0, #0
 80050d8:	f04f 0c0a 	mov.w	ip, #10
 80050dc:	4621      	mov	r1, r4
 80050de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e2:	3b30      	subs	r3, #48	; 0x30
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d94e      	bls.n	8005186 <_svfiprintf_r+0x17e>
 80050e8:	b1b0      	cbz	r0, 8005118 <_svfiprintf_r+0x110>
 80050ea:	9207      	str	r2, [sp, #28]
 80050ec:	e014      	b.n	8005118 <_svfiprintf_r+0x110>
 80050ee:	eba0 0308 	sub.w	r3, r0, r8
 80050f2:	fa09 f303 	lsl.w	r3, r9, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	46a2      	mov	sl, r4
 80050fc:	e7d2      	b.n	80050a4 <_svfiprintf_r+0x9c>
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	1d19      	adds	r1, r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	9103      	str	r1, [sp, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfbb      	ittet	lt
 800510a:	425b      	neglt	r3, r3
 800510c:	f042 0202 	orrlt.w	r2, r2, #2
 8005110:	9307      	strge	r3, [sp, #28]
 8005112:	9307      	strlt	r3, [sp, #28]
 8005114:	bfb8      	it	lt
 8005116:	9204      	strlt	r2, [sp, #16]
 8005118:	7823      	ldrb	r3, [r4, #0]
 800511a:	2b2e      	cmp	r3, #46	; 0x2e
 800511c:	d10c      	bne.n	8005138 <_svfiprintf_r+0x130>
 800511e:	7863      	ldrb	r3, [r4, #1]
 8005120:	2b2a      	cmp	r3, #42	; 0x2a
 8005122:	d135      	bne.n	8005190 <_svfiprintf_r+0x188>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	9203      	str	r2, [sp, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	f04f 33ff 	movlt.w	r3, #4294967295
 8005134:	3402      	adds	r4, #2
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005204 <_svfiprintf_r+0x1fc>
 800513c:	7821      	ldrb	r1, [r4, #0]
 800513e:	2203      	movs	r2, #3
 8005140:	4650      	mov	r0, sl
 8005142:	f7fb f86d 	bl	8000220 <memchr>
 8005146:	b140      	cbz	r0, 800515a <_svfiprintf_r+0x152>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	eba0 000a 	sub.w	r0, r0, sl
 800514e:	fa03 f000 	lsl.w	r0, r3, r0
 8005152:	9b04      	ldr	r3, [sp, #16]
 8005154:	4303      	orrs	r3, r0
 8005156:	3401      	adds	r4, #1
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515e:	4826      	ldr	r0, [pc, #152]	; (80051f8 <_svfiprintf_r+0x1f0>)
 8005160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005164:	2206      	movs	r2, #6
 8005166:	f7fb f85b 	bl	8000220 <memchr>
 800516a:	2800      	cmp	r0, #0
 800516c:	d038      	beq.n	80051e0 <_svfiprintf_r+0x1d8>
 800516e:	4b23      	ldr	r3, [pc, #140]	; (80051fc <_svfiprintf_r+0x1f4>)
 8005170:	bb1b      	cbnz	r3, 80051ba <_svfiprintf_r+0x1b2>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	3308      	adds	r3, #8
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	4433      	add	r3, r6
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	e767      	b.n	8005056 <_svfiprintf_r+0x4e>
 8005186:	fb0c 3202 	mla	r2, ip, r2, r3
 800518a:	460c      	mov	r4, r1
 800518c:	2001      	movs	r0, #1
 800518e:	e7a5      	b.n	80050dc <_svfiprintf_r+0xd4>
 8005190:	2300      	movs	r3, #0
 8005192:	3401      	adds	r4, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	f04f 0c0a 	mov.w	ip, #10
 800519c:	4620      	mov	r0, r4
 800519e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a2:	3a30      	subs	r2, #48	; 0x30
 80051a4:	2a09      	cmp	r2, #9
 80051a6:	d903      	bls.n	80051b0 <_svfiprintf_r+0x1a8>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0c5      	beq.n	8005138 <_svfiprintf_r+0x130>
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	e7c3      	b.n	8005138 <_svfiprintf_r+0x130>
 80051b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b4:	4604      	mov	r4, r0
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7f0      	b.n	800519c <_svfiprintf_r+0x194>
 80051ba:	ab03      	add	r3, sp, #12
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	462a      	mov	r2, r5
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <_svfiprintf_r+0x1f8>)
 80051c2:	a904      	add	r1, sp, #16
 80051c4:	4638      	mov	r0, r7
 80051c6:	f3af 8000 	nop.w
 80051ca:	1c42      	adds	r2, r0, #1
 80051cc:	4606      	mov	r6, r0
 80051ce:	d1d6      	bne.n	800517e <_svfiprintf_r+0x176>
 80051d0:	89ab      	ldrh	r3, [r5, #12]
 80051d2:	065b      	lsls	r3, r3, #25
 80051d4:	f53f af2c 	bmi.w	8005030 <_svfiprintf_r+0x28>
 80051d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051da:	b01d      	add	sp, #116	; 0x74
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	462a      	mov	r2, r5
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <_svfiprintf_r+0x1f8>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4638      	mov	r0, r7
 80051ec:	f000 f87a 	bl	80052e4 <_printf_i>
 80051f0:	e7eb      	b.n	80051ca <_svfiprintf_r+0x1c2>
 80051f2:	bf00      	nop
 80051f4:	0800611c 	.word	0x0800611c
 80051f8:	08006126 	.word	0x08006126
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f51 	.word	0x08004f51
 8005204:	08006122 	.word	0x08006122

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4616      	mov	r6, r2
 800520e:	4699      	mov	r9, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005218:	4293      	cmp	r3, r2
 800521a:	bfb8      	it	lt
 800521c:	4613      	movlt	r3, r2
 800521e:	6033      	str	r3, [r6, #0]
 8005220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005224:	4607      	mov	r7, r0
 8005226:	460c      	mov	r4, r1
 8005228:	b10a      	cbz	r2, 800522e <_printf_common+0x26>
 800522a:	3301      	adds	r3, #1
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	0699      	lsls	r1, r3, #26
 8005232:	bf42      	ittt	mi
 8005234:	6833      	ldrmi	r3, [r6, #0]
 8005236:	3302      	addmi	r3, #2
 8005238:	6033      	strmi	r3, [r6, #0]
 800523a:	6825      	ldr	r5, [r4, #0]
 800523c:	f015 0506 	ands.w	r5, r5, #6
 8005240:	d106      	bne.n	8005250 <_printf_common+0x48>
 8005242:	f104 0a19 	add.w	sl, r4, #25
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	6832      	ldr	r2, [r6, #0]
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	42ab      	cmp	r3, r5
 800524e:	dc26      	bgt.n	800529e <_printf_common+0x96>
 8005250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005254:	1e13      	subs	r3, r2, #0
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	bf18      	it	ne
 800525a:	2301      	movne	r3, #1
 800525c:	0692      	lsls	r2, r2, #26
 800525e:	d42b      	bmi.n	80052b8 <_printf_common+0xb0>
 8005260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005264:	4649      	mov	r1, r9
 8005266:	4638      	mov	r0, r7
 8005268:	47c0      	blx	r8
 800526a:	3001      	adds	r0, #1
 800526c:	d01e      	beq.n	80052ac <_printf_common+0xa4>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	68e5      	ldr	r5, [r4, #12]
 8005272:	6832      	ldr	r2, [r6, #0]
 8005274:	f003 0306 	and.w	r3, r3, #6
 8005278:	2b04      	cmp	r3, #4
 800527a:	bf08      	it	eq
 800527c:	1aad      	subeq	r5, r5, r2
 800527e:	68a3      	ldr	r3, [r4, #8]
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	bf0c      	ite	eq
 8005284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005288:	2500      	movne	r5, #0
 800528a:	4293      	cmp	r3, r2
 800528c:	bfc4      	itt	gt
 800528e:	1a9b      	subgt	r3, r3, r2
 8005290:	18ed      	addgt	r5, r5, r3
 8005292:	2600      	movs	r6, #0
 8005294:	341a      	adds	r4, #26
 8005296:	42b5      	cmp	r5, r6
 8005298:	d11a      	bne.n	80052d0 <_printf_common+0xc8>
 800529a:	2000      	movs	r0, #0
 800529c:	e008      	b.n	80052b0 <_printf_common+0xa8>
 800529e:	2301      	movs	r3, #1
 80052a0:	4652      	mov	r2, sl
 80052a2:	4649      	mov	r1, r9
 80052a4:	4638      	mov	r0, r7
 80052a6:	47c0      	blx	r8
 80052a8:	3001      	adds	r0, #1
 80052aa:	d103      	bne.n	80052b4 <_printf_common+0xac>
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b4:	3501      	adds	r5, #1
 80052b6:	e7c6      	b.n	8005246 <_printf_common+0x3e>
 80052b8:	18e1      	adds	r1, r4, r3
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	2030      	movs	r0, #48	; 0x30
 80052be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052c2:	4422      	add	r2, r4
 80052c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052cc:	3302      	adds	r3, #2
 80052ce:	e7c7      	b.n	8005260 <_printf_common+0x58>
 80052d0:	2301      	movs	r3, #1
 80052d2:	4622      	mov	r2, r4
 80052d4:	4649      	mov	r1, r9
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	3001      	adds	r0, #1
 80052dc:	d0e6      	beq.n	80052ac <_printf_common+0xa4>
 80052de:	3601      	adds	r6, #1
 80052e0:	e7d9      	b.n	8005296 <_printf_common+0x8e>
	...

080052e4 <_printf_i>:
 80052e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	460c      	mov	r4, r1
 80052ea:	4691      	mov	r9, r2
 80052ec:	7e27      	ldrb	r7, [r4, #24]
 80052ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052f0:	2f78      	cmp	r7, #120	; 0x78
 80052f2:	4680      	mov	r8, r0
 80052f4:	469a      	mov	sl, r3
 80052f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052fa:	d807      	bhi.n	800530c <_printf_i+0x28>
 80052fc:	2f62      	cmp	r7, #98	; 0x62
 80052fe:	d80a      	bhi.n	8005316 <_printf_i+0x32>
 8005300:	2f00      	cmp	r7, #0
 8005302:	f000 80d8 	beq.w	80054b6 <_printf_i+0x1d2>
 8005306:	2f58      	cmp	r7, #88	; 0x58
 8005308:	f000 80a3 	beq.w	8005452 <_printf_i+0x16e>
 800530c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005314:	e03a      	b.n	800538c <_printf_i+0xa8>
 8005316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800531a:	2b15      	cmp	r3, #21
 800531c:	d8f6      	bhi.n	800530c <_printf_i+0x28>
 800531e:	a001      	add	r0, pc, #4	; (adr r0, 8005324 <_printf_i+0x40>)
 8005320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005324:	0800537d 	.word	0x0800537d
 8005328:	08005391 	.word	0x08005391
 800532c:	0800530d 	.word	0x0800530d
 8005330:	0800530d 	.word	0x0800530d
 8005334:	0800530d 	.word	0x0800530d
 8005338:	0800530d 	.word	0x0800530d
 800533c:	08005391 	.word	0x08005391
 8005340:	0800530d 	.word	0x0800530d
 8005344:	0800530d 	.word	0x0800530d
 8005348:	0800530d 	.word	0x0800530d
 800534c:	0800530d 	.word	0x0800530d
 8005350:	0800549d 	.word	0x0800549d
 8005354:	080053c1 	.word	0x080053c1
 8005358:	0800547f 	.word	0x0800547f
 800535c:	0800530d 	.word	0x0800530d
 8005360:	0800530d 	.word	0x0800530d
 8005364:	080054bf 	.word	0x080054bf
 8005368:	0800530d 	.word	0x0800530d
 800536c:	080053c1 	.word	0x080053c1
 8005370:	0800530d 	.word	0x0800530d
 8005374:	0800530d 	.word	0x0800530d
 8005378:	08005487 	.word	0x08005487
 800537c:	680b      	ldr	r3, [r1, #0]
 800537e:	1d1a      	adds	r2, r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	600a      	str	r2, [r1, #0]
 8005384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800538c:	2301      	movs	r3, #1
 800538e:	e0a3      	b.n	80054d8 <_printf_i+0x1f4>
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	6808      	ldr	r0, [r1, #0]
 8005394:	062e      	lsls	r6, r5, #24
 8005396:	f100 0304 	add.w	r3, r0, #4
 800539a:	d50a      	bpl.n	80053b2 <_printf_i+0xce>
 800539c:	6805      	ldr	r5, [r0, #0]
 800539e:	600b      	str	r3, [r1, #0]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	da03      	bge.n	80053ac <_printf_i+0xc8>
 80053a4:	232d      	movs	r3, #45	; 0x2d
 80053a6:	426d      	negs	r5, r5
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ac:	485e      	ldr	r0, [pc, #376]	; (8005528 <_printf_i+0x244>)
 80053ae:	230a      	movs	r3, #10
 80053b0:	e019      	b.n	80053e6 <_printf_i+0x102>
 80053b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053b6:	6805      	ldr	r5, [r0, #0]
 80053b8:	600b      	str	r3, [r1, #0]
 80053ba:	bf18      	it	ne
 80053bc:	b22d      	sxthne	r5, r5
 80053be:	e7ef      	b.n	80053a0 <_printf_i+0xbc>
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	6825      	ldr	r5, [r4, #0]
 80053c4:	1d18      	adds	r0, r3, #4
 80053c6:	6008      	str	r0, [r1, #0]
 80053c8:	0628      	lsls	r0, r5, #24
 80053ca:	d501      	bpl.n	80053d0 <_printf_i+0xec>
 80053cc:	681d      	ldr	r5, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <_printf_i+0xf2>
 80053d0:	0669      	lsls	r1, r5, #25
 80053d2:	d5fb      	bpl.n	80053cc <_printf_i+0xe8>
 80053d4:	881d      	ldrh	r5, [r3, #0]
 80053d6:	4854      	ldr	r0, [pc, #336]	; (8005528 <_printf_i+0x244>)
 80053d8:	2f6f      	cmp	r7, #111	; 0x6f
 80053da:	bf0c      	ite	eq
 80053dc:	2308      	moveq	r3, #8
 80053de:	230a      	movne	r3, #10
 80053e0:	2100      	movs	r1, #0
 80053e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053e6:	6866      	ldr	r6, [r4, #4]
 80053e8:	60a6      	str	r6, [r4, #8]
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	bfa2      	ittt	ge
 80053ee:	6821      	ldrge	r1, [r4, #0]
 80053f0:	f021 0104 	bicge.w	r1, r1, #4
 80053f4:	6021      	strge	r1, [r4, #0]
 80053f6:	b90d      	cbnz	r5, 80053fc <_printf_i+0x118>
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	d04d      	beq.n	8005498 <_printf_i+0x1b4>
 80053fc:	4616      	mov	r6, r2
 80053fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005402:	fb03 5711 	mls	r7, r3, r1, r5
 8005406:	5dc7      	ldrb	r7, [r0, r7]
 8005408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800540c:	462f      	mov	r7, r5
 800540e:	42bb      	cmp	r3, r7
 8005410:	460d      	mov	r5, r1
 8005412:	d9f4      	bls.n	80053fe <_printf_i+0x11a>
 8005414:	2b08      	cmp	r3, #8
 8005416:	d10b      	bne.n	8005430 <_printf_i+0x14c>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	07df      	lsls	r7, r3, #31
 800541c:	d508      	bpl.n	8005430 <_printf_i+0x14c>
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	6861      	ldr	r1, [r4, #4]
 8005422:	4299      	cmp	r1, r3
 8005424:	bfde      	ittt	le
 8005426:	2330      	movle	r3, #48	; 0x30
 8005428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800542c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005430:	1b92      	subs	r2, r2, r6
 8005432:	6122      	str	r2, [r4, #16]
 8005434:	f8cd a000 	str.w	sl, [sp]
 8005438:	464b      	mov	r3, r9
 800543a:	aa03      	add	r2, sp, #12
 800543c:	4621      	mov	r1, r4
 800543e:	4640      	mov	r0, r8
 8005440:	f7ff fee2 	bl	8005208 <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	d14c      	bne.n	80054e2 <_printf_i+0x1fe>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	b004      	add	sp, #16
 800544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005452:	4835      	ldr	r0, [pc, #212]	; (8005528 <_printf_i+0x244>)
 8005454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	680e      	ldr	r6, [r1, #0]
 800545c:	061f      	lsls	r7, r3, #24
 800545e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005462:	600e      	str	r6, [r1, #0]
 8005464:	d514      	bpl.n	8005490 <_printf_i+0x1ac>
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	bf44      	itt	mi
 800546a:	f043 0320 	orrmi.w	r3, r3, #32
 800546e:	6023      	strmi	r3, [r4, #0]
 8005470:	b91d      	cbnz	r5, 800547a <_printf_i+0x196>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f023 0320 	bic.w	r3, r3, #32
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	2310      	movs	r3, #16
 800547c:	e7b0      	b.n	80053e0 <_printf_i+0xfc>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f043 0320 	orr.w	r3, r3, #32
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	2378      	movs	r3, #120	; 0x78
 8005488:	4828      	ldr	r0, [pc, #160]	; (800552c <_printf_i+0x248>)
 800548a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800548e:	e7e3      	b.n	8005458 <_printf_i+0x174>
 8005490:	065e      	lsls	r6, r3, #25
 8005492:	bf48      	it	mi
 8005494:	b2ad      	uxthmi	r5, r5
 8005496:	e7e6      	b.n	8005466 <_printf_i+0x182>
 8005498:	4616      	mov	r6, r2
 800549a:	e7bb      	b.n	8005414 <_printf_i+0x130>
 800549c:	680b      	ldr	r3, [r1, #0]
 800549e:	6826      	ldr	r6, [r4, #0]
 80054a0:	6960      	ldr	r0, [r4, #20]
 80054a2:	1d1d      	adds	r5, r3, #4
 80054a4:	600d      	str	r5, [r1, #0]
 80054a6:	0635      	lsls	r5, r6, #24
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0x1cc>
 80054ac:	6018      	str	r0, [r3, #0]
 80054ae:	e002      	b.n	80054b6 <_printf_i+0x1d2>
 80054b0:	0671      	lsls	r1, r6, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0x1c8>
 80054b4:	8018      	strh	r0, [r3, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	4616      	mov	r6, r2
 80054bc:	e7ba      	b.n	8005434 <_printf_i+0x150>
 80054be:	680b      	ldr	r3, [r1, #0]
 80054c0:	1d1a      	adds	r2, r3, #4
 80054c2:	600a      	str	r2, [r1, #0]
 80054c4:	681e      	ldr	r6, [r3, #0]
 80054c6:	6862      	ldr	r2, [r4, #4]
 80054c8:	2100      	movs	r1, #0
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7fa fea8 	bl	8000220 <memchr>
 80054d0:	b108      	cbz	r0, 80054d6 <_printf_i+0x1f2>
 80054d2:	1b80      	subs	r0, r0, r6
 80054d4:	6060      	str	r0, [r4, #4]
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	2300      	movs	r3, #0
 80054dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e0:	e7a8      	b.n	8005434 <_printf_i+0x150>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	4632      	mov	r2, r6
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	47d0      	blx	sl
 80054ec:	3001      	adds	r0, #1
 80054ee:	d0ab      	beq.n	8005448 <_printf_i+0x164>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	079b      	lsls	r3, r3, #30
 80054f4:	d413      	bmi.n	800551e <_printf_i+0x23a>
 80054f6:	68e0      	ldr	r0, [r4, #12]
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	4298      	cmp	r0, r3
 80054fc:	bfb8      	it	lt
 80054fe:	4618      	movlt	r0, r3
 8005500:	e7a4      	b.n	800544c <_printf_i+0x168>
 8005502:	2301      	movs	r3, #1
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	47d0      	blx	sl
 800550c:	3001      	adds	r0, #1
 800550e:	d09b      	beq.n	8005448 <_printf_i+0x164>
 8005510:	3501      	adds	r5, #1
 8005512:	68e3      	ldr	r3, [r4, #12]
 8005514:	9903      	ldr	r1, [sp, #12]
 8005516:	1a5b      	subs	r3, r3, r1
 8005518:	42ab      	cmp	r3, r5
 800551a:	dcf2      	bgt.n	8005502 <_printf_i+0x21e>
 800551c:	e7eb      	b.n	80054f6 <_printf_i+0x212>
 800551e:	2500      	movs	r5, #0
 8005520:	f104 0619 	add.w	r6, r4, #25
 8005524:	e7f5      	b.n	8005512 <_printf_i+0x22e>
 8005526:	bf00      	nop
 8005528:	0800612d 	.word	0x0800612d
 800552c:	0800613e 	.word	0x0800613e

08005530 <memmove>:
 8005530:	4288      	cmp	r0, r1
 8005532:	b510      	push	{r4, lr}
 8005534:	eb01 0402 	add.w	r4, r1, r2
 8005538:	d902      	bls.n	8005540 <memmove+0x10>
 800553a:	4284      	cmp	r4, r0
 800553c:	4623      	mov	r3, r4
 800553e:	d807      	bhi.n	8005550 <memmove+0x20>
 8005540:	1e43      	subs	r3, r0, #1
 8005542:	42a1      	cmp	r1, r4
 8005544:	d008      	beq.n	8005558 <memmove+0x28>
 8005546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800554a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800554e:	e7f8      	b.n	8005542 <memmove+0x12>
 8005550:	4402      	add	r2, r0
 8005552:	4601      	mov	r1, r0
 8005554:	428a      	cmp	r2, r1
 8005556:	d100      	bne.n	800555a <memmove+0x2a>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005562:	e7f7      	b.n	8005554 <memmove+0x24>

08005564 <_free_r>:
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	2900      	cmp	r1, #0
 8005568:	d048      	beq.n	80055fc <_free_r+0x98>
 800556a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f1a1 0404 	sub.w	r4, r1, #4
 8005576:	bfb8      	it	lt
 8005578:	18e4      	addlt	r4, r4, r3
 800557a:	f000 f8d3 	bl	8005724 <__malloc_lock>
 800557e:	4a20      	ldr	r2, [pc, #128]	; (8005600 <_free_r+0x9c>)
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	4615      	mov	r5, r2
 8005586:	b933      	cbnz	r3, 8005596 <_free_r+0x32>
 8005588:	6063      	str	r3, [r4, #4]
 800558a:	6014      	str	r4, [r2, #0]
 800558c:	b003      	add	sp, #12
 800558e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005592:	f000 b8cd 	b.w	8005730 <__malloc_unlock>
 8005596:	42a3      	cmp	r3, r4
 8005598:	d90b      	bls.n	80055b2 <_free_r+0x4e>
 800559a:	6821      	ldr	r1, [r4, #0]
 800559c:	1862      	adds	r2, r4, r1
 800559e:	4293      	cmp	r3, r2
 80055a0:	bf04      	itt	eq
 80055a2:	681a      	ldreq	r2, [r3, #0]
 80055a4:	685b      	ldreq	r3, [r3, #4]
 80055a6:	6063      	str	r3, [r4, #4]
 80055a8:	bf04      	itt	eq
 80055aa:	1852      	addeq	r2, r2, r1
 80055ac:	6022      	streq	r2, [r4, #0]
 80055ae:	602c      	str	r4, [r5, #0]
 80055b0:	e7ec      	b.n	800558c <_free_r+0x28>
 80055b2:	461a      	mov	r2, r3
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b10b      	cbz	r3, 80055bc <_free_r+0x58>
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d9fa      	bls.n	80055b2 <_free_r+0x4e>
 80055bc:	6811      	ldr	r1, [r2, #0]
 80055be:	1855      	adds	r5, r2, r1
 80055c0:	42a5      	cmp	r5, r4
 80055c2:	d10b      	bne.n	80055dc <_free_r+0x78>
 80055c4:	6824      	ldr	r4, [r4, #0]
 80055c6:	4421      	add	r1, r4
 80055c8:	1854      	adds	r4, r2, r1
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	d1dd      	bne.n	800558c <_free_r+0x28>
 80055d0:	681c      	ldr	r4, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	4421      	add	r1, r4
 80055d8:	6011      	str	r1, [r2, #0]
 80055da:	e7d7      	b.n	800558c <_free_r+0x28>
 80055dc:	d902      	bls.n	80055e4 <_free_r+0x80>
 80055de:	230c      	movs	r3, #12
 80055e0:	6003      	str	r3, [r0, #0]
 80055e2:	e7d3      	b.n	800558c <_free_r+0x28>
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	1961      	adds	r1, r4, r5
 80055e8:	428b      	cmp	r3, r1
 80055ea:	bf04      	itt	eq
 80055ec:	6819      	ldreq	r1, [r3, #0]
 80055ee:	685b      	ldreq	r3, [r3, #4]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	bf04      	itt	eq
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	6054      	str	r4, [r2, #4]
 80055fa:	e7c7      	b.n	800558c <_free_r+0x28>
 80055fc:	b003      	add	sp, #12
 80055fe:	bd30      	pop	{r4, r5, pc}
 8005600:	20000140 	.word	0x20000140

08005604 <_malloc_r>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	1ccd      	adds	r5, r1, #3
 8005608:	f025 0503 	bic.w	r5, r5, #3
 800560c:	3508      	adds	r5, #8
 800560e:	2d0c      	cmp	r5, #12
 8005610:	bf38      	it	cc
 8005612:	250c      	movcc	r5, #12
 8005614:	2d00      	cmp	r5, #0
 8005616:	4606      	mov	r6, r0
 8005618:	db01      	blt.n	800561e <_malloc_r+0x1a>
 800561a:	42a9      	cmp	r1, r5
 800561c:	d903      	bls.n	8005626 <_malloc_r+0x22>
 800561e:	230c      	movs	r3, #12
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	2000      	movs	r0, #0
 8005624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005626:	f000 f87d 	bl	8005724 <__malloc_lock>
 800562a:	4921      	ldr	r1, [pc, #132]	; (80056b0 <_malloc_r+0xac>)
 800562c:	680a      	ldr	r2, [r1, #0]
 800562e:	4614      	mov	r4, r2
 8005630:	b99c      	cbnz	r4, 800565a <_malloc_r+0x56>
 8005632:	4f20      	ldr	r7, [pc, #128]	; (80056b4 <_malloc_r+0xb0>)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b923      	cbnz	r3, 8005642 <_malloc_r+0x3e>
 8005638:	4621      	mov	r1, r4
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f862 	bl	8005704 <_sbrk_r>
 8005640:	6038      	str	r0, [r7, #0]
 8005642:	4629      	mov	r1, r5
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f85d 	bl	8005704 <_sbrk_r>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d123      	bne.n	8005696 <_malloc_r+0x92>
 800564e:	230c      	movs	r3, #12
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	4630      	mov	r0, r6
 8005654:	f000 f86c 	bl	8005730 <__malloc_unlock>
 8005658:	e7e3      	b.n	8005622 <_malloc_r+0x1e>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	1b5b      	subs	r3, r3, r5
 800565e:	d417      	bmi.n	8005690 <_malloc_r+0x8c>
 8005660:	2b0b      	cmp	r3, #11
 8005662:	d903      	bls.n	800566c <_malloc_r+0x68>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	441c      	add	r4, r3
 8005668:	6025      	str	r5, [r4, #0]
 800566a:	e004      	b.n	8005676 <_malloc_r+0x72>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	42a2      	cmp	r2, r4
 8005670:	bf0c      	ite	eq
 8005672:	600b      	streq	r3, [r1, #0]
 8005674:	6053      	strne	r3, [r2, #4]
 8005676:	4630      	mov	r0, r6
 8005678:	f000 f85a 	bl	8005730 <__malloc_unlock>
 800567c:	f104 000b 	add.w	r0, r4, #11
 8005680:	1d23      	adds	r3, r4, #4
 8005682:	f020 0007 	bic.w	r0, r0, #7
 8005686:	1ac2      	subs	r2, r0, r3
 8005688:	d0cc      	beq.n	8005624 <_malloc_r+0x20>
 800568a:	1a1b      	subs	r3, r3, r0
 800568c:	50a3      	str	r3, [r4, r2]
 800568e:	e7c9      	b.n	8005624 <_malloc_r+0x20>
 8005690:	4622      	mov	r2, r4
 8005692:	6864      	ldr	r4, [r4, #4]
 8005694:	e7cc      	b.n	8005630 <_malloc_r+0x2c>
 8005696:	1cc4      	adds	r4, r0, #3
 8005698:	f024 0403 	bic.w	r4, r4, #3
 800569c:	42a0      	cmp	r0, r4
 800569e:	d0e3      	beq.n	8005668 <_malloc_r+0x64>
 80056a0:	1a21      	subs	r1, r4, r0
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f82e 	bl	8005704 <_sbrk_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d1dd      	bne.n	8005668 <_malloc_r+0x64>
 80056ac:	e7cf      	b.n	800564e <_malloc_r+0x4a>
 80056ae:	bf00      	nop
 80056b0:	20000140 	.word	0x20000140
 80056b4:	20000144 	.word	0x20000144

080056b8 <_realloc_r>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	4607      	mov	r7, r0
 80056bc:	4614      	mov	r4, r2
 80056be:	460e      	mov	r6, r1
 80056c0:	b921      	cbnz	r1, 80056cc <_realloc_r+0x14>
 80056c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056c6:	4611      	mov	r1, r2
 80056c8:	f7ff bf9c 	b.w	8005604 <_malloc_r>
 80056cc:	b922      	cbnz	r2, 80056d8 <_realloc_r+0x20>
 80056ce:	f7ff ff49 	bl	8005564 <_free_r>
 80056d2:	4625      	mov	r5, r4
 80056d4:	4628      	mov	r0, r5
 80056d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d8:	f000 f830 	bl	800573c <_malloc_usable_size_r>
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d20f      	bcs.n	8005700 <_realloc_r+0x48>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4638      	mov	r0, r7
 80056e4:	f7ff ff8e 	bl	8005604 <_malloc_r>
 80056e8:	4605      	mov	r5, r0
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0f2      	beq.n	80056d4 <_realloc_r+0x1c>
 80056ee:	4631      	mov	r1, r6
 80056f0:	4622      	mov	r2, r4
 80056f2:	f7ff fbf7 	bl	8004ee4 <memcpy>
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ff33 	bl	8005564 <_free_r>
 80056fe:	e7e9      	b.n	80056d4 <_realloc_r+0x1c>
 8005700:	4635      	mov	r5, r6
 8005702:	e7e7      	b.n	80056d4 <_realloc_r+0x1c>

08005704 <_sbrk_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d06      	ldr	r5, [pc, #24]	; (8005720 <_sbrk_r+0x1c>)
 8005708:	2300      	movs	r3, #0
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7ff fa72 	bl	8004bf8 <_sbrk>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_sbrk_r+0x1a>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_sbrk_r+0x1a>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	200003b4 	.word	0x200003b4

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__malloc_lock+0x8>)
 8005726:	f000 b811 	b.w	800574c <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200003bc 	.word	0x200003bc

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_unlock+0x8>)
 8005732:	f000 b80c 	b.w	800574e <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200003bc 	.word	0x200003bc

0800573c <_malloc_usable_size_r>:
 800573c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005740:	1f18      	subs	r0, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfbc      	itt	lt
 8005746:	580b      	ldrlt	r3, [r1, r0]
 8005748:	18c0      	addlt	r0, r0, r3
 800574a:	4770      	bx	lr

0800574c <__retarget_lock_acquire_recursive>:
 800574c:	4770      	bx	lr

0800574e <__retarget_lock_release_recursive>:
 800574e:	4770      	bx	lr

08005750 <_init>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr

0800575c <_fini>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr
